{"version":3,"sources":["../../../../../../jspm_packages/github/jspm/nodelibs-http@1.7.1/lib/response.js"],"names":["Stream","require","util","Response","module","exports","res","offset","readable","inherits","capable","streaming","status2","parseHeaders","lines","getAllResponseHeaders","split","headers","i","length","line","m","match","key","toLowerCase","value","undefined","isArray","push","prototype","getResponse","xhr","respType","String","responseType","responseBlob","response","responseText","getHeader","handle","readyState","statusCode","status","err","emit","_emitData","error","respBody","toString","Uint8Array","byteLength","slice","Array","xs","Object","call"],"mappings":"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","file":"response.js","sourcesContent":["/* */ \nvar Stream = require('stream');\nvar util = require('util');\nvar Response = module.exports = function(res) {\n  this.offset = 0;\n  this.readable = true;\n};\nutil.inherits(Response, Stream);\nvar capable = {\n  streaming: true,\n  status2: true\n};\nfunction parseHeaders(res) {\n  var lines = res.getAllResponseHeaders().split(/\\r?\\n/);\n  var headers = {};\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (line === '')\n      continue;\n    var m = line.match(/^([^:]+):\\s*(.*)/);\n    if (m) {\n      var key = m[1].toLowerCase(),\n          value = m[2];\n      if (headers[key] !== undefined) {\n        if (isArray(headers[key])) {\n          headers[key].push(value);\n        } else {\n          headers[key] = [headers[key], value];\n        }\n      } else {\n        headers[key] = value;\n      }\n    } else {\n      headers[line] = true;\n    }\n  }\n  return headers;\n}\nResponse.prototype.getResponse = function(xhr) {\n  var respType = String(xhr.responseType).toLowerCase();\n  if (respType === 'blob')\n    return xhr.responseBlob || xhr.response;\n  if (respType === 'arraybuffer')\n    return xhr.response;\n  return xhr.responseText;\n};\nResponse.prototype.getHeader = function(key) {\n  return this.headers[key.toLowerCase()];\n};\nResponse.prototype.handle = function(res) {\n  if (res.readyState === 2 && capable.status2) {\n    try {\n      this.statusCode = res.status;\n      this.headers = parseHeaders(res);\n    } catch (err) {\n      capable.status2 = false;\n    }\n    if (capable.status2) {\n      this.emit('ready');\n    }\n  } else if (capable.streaming && res.readyState === 3) {\n    try {\n      if (!this.statusCode) {\n        this.statusCode = res.status;\n        this.headers = parseHeaders(res);\n        this.emit('ready');\n      }\n    } catch (err) {}\n    try {\n      this._emitData(res);\n    } catch (err) {\n      capable.streaming = false;\n    }\n  } else if (res.readyState === 4) {\n    if (!this.statusCode) {\n      this.statusCode = res.status;\n      this.emit('ready');\n    }\n    this._emitData(res);\n    if (res.error) {\n      this.emit('error', this.getResponse(res));\n    } else\n      this.emit('end');\n    this.emit('close');\n  }\n};\nResponse.prototype._emitData = function(res) {\n  var respBody = this.getResponse(res);\n  if (respBody.toString().match(/ArrayBuffer/)) {\n    this.emit('data', new Uint8Array(respBody, this.offset));\n    this.offset = respBody.byteLength;\n    return;\n  }\n  if (respBody.length > this.offset) {\n    this.emit('data', respBody.slice(this.offset));\n    this.offset = respBody.length;\n  }\n};\nvar isArray = Array.isArray || function(xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n"]}