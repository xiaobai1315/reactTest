{"version":3,"sources":["../../../../jspm_packages/npm/path-to-regexp@1.7.0/index.js"],"names":["isarray","require","module","exports","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","res","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","encodeAsterisk","matches","Array","i","obj","opts","data","encode","pretty","encodeURIComponent","token","value","segment","TypeError","JSON","stringify","j","test","attachKeys","re","keys","flags","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","regexp","stringToRegexp","strict","end","route","endsWithDelimiter"],"mappings":"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","file":"index.js","sourcesContent":["/* */ \nvar isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]}