{"version":3,"sources":["../../../../jspm_packages/npm/safe-buffer@5.1.1/index.js"],"names":["Buffer","buffer","require","copyProps","src","dst","key","from","alloc","allocUnsafe","allocUnsafeSlow","module","exports","SafeBuffer","arg","encodingOrOffset","length","TypeError","size","fill","encoding","buf","undefined","SlowBuffer"],"mappings":";;AAAA;AACA,CAAC,UAASA,MAAT,EAAiB;AAChB,MAAIC,SAASC,QAAQ,QAAR,CAAb;AACA,MAAIF,SAASC,OAAOD,MAApB;AACA,WAASG,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,SAAK,IAAIC,GAAT,IAAgBF,GAAhB,EAAqB;AACnBC,UAAIC,GAAJ,IAAWF,IAAIE,GAAJ,CAAX;AACD;AACF;AACD,MAAIN,OAAOO,IAAP,IAAeP,OAAOQ,KAAtB,IAA+BR,OAAOS,WAAtC,IAAqDT,OAAOU,eAAhE,EAAiF;AAC/EC,WAAOC,OAAP,GAAiBX,MAAjB;AACD,GAFD,MAEO;AACLE,cAAUF,MAAV,EAAkBW,OAAlB;AACAA,YAAQZ,MAAR,GAAiBa,UAAjB;AACD;AACD,WAASA,UAAT,CAAoBC,GAApB,EAAyBC,gBAAzB,EAA2CC,MAA3C,EAAmD;AACjD,WAAOhB,OAAOc,GAAP,EAAYC,gBAAZ,EAA8BC,MAA9B,CAAP;AACD;AACDb,YAAUH,MAAV,EAAkBa,UAAlB;AACAA,aAAWN,IAAX,GAAkB,UAASO,GAAT,EAAcC,gBAAd,EAAgCC,MAAhC,EAAwC;AACxD,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIG,SAAJ,CAAc,+BAAd,CAAN;AACD;AACD,WAAOjB,OAAOc,GAAP,EAAYC,gBAAZ,EAA8BC,MAA9B,CAAP;AACD,GALD;AAMAH,aAAWL,KAAX,GAAmB,UAASU,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+B;AAChD,QAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAID,SAAJ,CAAc,2BAAd,CAAN;AACD;AACD,QAAII,MAAMrB,OAAOkB,IAAP,CAAV;AACA,QAAIC,SAASG,SAAb,EAAwB;AACtB,UAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC;AAChCC,YAAIF,IAAJ,CAASA,IAAT,EAAeC,QAAf;AACD,OAFD,MAEO;AACLC,YAAIF,IAAJ,CAASA,IAAT;AACD;AACF,KAND,MAMO;AACLE,UAAIF,IAAJ,CAAS,CAAT;AACD;AACD,WAAOE,GAAP;AACD,GAfD;AAgBAR,aAAWJ,WAAX,GAAyB,UAASS,IAAT,EAAe;AACtC,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAID,SAAJ,CAAc,2BAAd,CAAN;AACD;AACD,WAAOjB,OAAOkB,IAAP,CAAP;AACD,GALD;AAMAL,aAAWH,eAAX,GAA6B,UAASQ,IAAT,EAAe;AAC1C,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAID,SAAJ,CAAc,2BAAd,CAAN;AACD;AACD,WAAOhB,OAAOsB,UAAP,CAAkBL,IAAlB,CAAP;AACD,GALD;AAMD,CApDD,EAoDGhB,QAAQ,QAAR,EAAkBF,MApDrB","file":"index.js","sourcesContent":["/* */ \n(function(Buffer) {\n  var buffer = require('buffer');\n  var Buffer = buffer.Buffer;\n  function copyProps(src, dst) {\n    for (var key in src) {\n      dst[key] = src[key];\n    }\n  }\n  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n    module.exports = buffer;\n  } else {\n    copyProps(buffer, exports);\n    exports.Buffer = SafeBuffer;\n  }\n  function SafeBuffer(arg, encodingOrOffset, length) {\n    return Buffer(arg, encodingOrOffset, length);\n  }\n  copyProps(Buffer, SafeBuffer);\n  SafeBuffer.from = function(arg, encodingOrOffset, length) {\n    if (typeof arg === 'number') {\n      throw new TypeError('Argument must not be a number');\n    }\n    return Buffer(arg, encodingOrOffset, length);\n  };\n  SafeBuffer.alloc = function(size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('Argument must be a number');\n    }\n    var buf = Buffer(size);\n    if (fill !== undefined) {\n      if (typeof encoding === 'string') {\n        buf.fill(fill, encoding);\n      } else {\n        buf.fill(fill);\n      }\n    } else {\n      buf.fill(0);\n    }\n    return buf;\n  };\n  SafeBuffer.allocUnsafe = function(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('Argument must be a number');\n    }\n    return Buffer(size);\n  };\n  SafeBuffer.allocUnsafeSlow = function(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('Argument must be a number');\n    }\n    return buffer.SlowBuffer(size);\n  };\n})(require('buffer').Buffer);\n"]}