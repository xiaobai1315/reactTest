{"version":3,"sources":["../../../../../jspm_packages/npm/base64-js@1.2.1/test/convert.js"],"names":["test","require","b64","checks","t","plan","length","i","check","b64Str","arr","str","fromByteArray","map","char","charCodeAt","toByteArray","byte","String","fromCharCode","join","equal","byteLength","callback","res","kValue","mappedValue","k","len","charAt"],"mappings":";;AAAA;AACA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,MAAMD,QAAQ,UAAR,CAAV;AACA,IAAIE,SAAS,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,KAAzB,EAAgC,MAAhC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,OAAvD,CAAb;AACAH,KAAK,4BAAL,EAAmC,UAASI,CAAT,EAAY;AAC7CA,IAAEC,IAAF,CAAOF,OAAOG,MAAP,GAAgB,CAAvB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAAOG,MAA3B,EAAmCC,GAAnC,EAAwC;AACtC,QAAIC,QAAQL,OAAOI,CAAP,CAAZ;AACA,QAAIE,MAAJ,EACIC,GADJ,EAEIC,GAFJ;AAGAF,aAASP,IAAIU,aAAJ,CAAkBC,IAAIL,KAAJ,EAAW,UAASM,IAAT,EAAe;AACnD,aAAOA,KAAKC,UAAL,CAAgB,CAAhB,CAAP;AACD,KAF0B,CAAlB,CAAT;AAGAL,UAAMR,IAAIc,WAAJ,CAAgBP,MAAhB,CAAN;AACAE,UAAME,IAAIH,GAAJ,EAAS,UAASO,IAAT,EAAe;AAC5B,aAAOC,OAAOC,YAAP,CAAoBF,IAApB,CAAP;AACD,KAFK,EAEHG,IAFG,CAEE,EAFF,CAAN;AAGAhB,MAAEiB,KAAF,CAAQb,KAAR,EAAeG,GAAf,EAAoB,aAAaH,KAAjC;AACAJ,MAAEiB,KAAF,CAAQnB,IAAIoB,UAAJ,CAAeb,MAAf,CAAR,EAAgCC,IAAIJ,MAApC,EAA4C,wBAAwBE,KAApE;AACD;AACF,CAjBD;AAkBA,SAASK,GAAT,CAAaH,GAAb,EAAkBa,QAAlB,EAA4B;AAC1B,MAAIC,MAAM,EAAV;AACA,MAAIC,MAAJ,EACIC,WADJ;AAEA,OAAK,IAAIC,IAAI,CAAR,EACDC,MAAMlB,IAAIJ,MADd,EACsBqB,IAAIC,GAD1B,EAC+BD,GAD/B,EACoC;AAClC,QAAK,OAAOjB,GAAP,KAAe,QAAf,IAA2B,CAAC,CAACA,IAAImB,MAAJ,CAAWF,CAAX,CAAlC,EAAkD;AAChDF,eAASf,IAAImB,MAAJ,CAAWF,CAAX,CAAT;AACAD,oBAAcH,SAASE,MAAT,EAAiBE,CAAjB,EAAoBjB,GAApB,CAAd;AACAc,UAAIG,CAAJ,IAASD,WAAT;AACD,KAJD,MAIO,IAAI,OAAOhB,GAAP,KAAe,QAAf,IAA2BiB,KAAKjB,GAApC,EAAyC;AAC9Ce,eAASf,IAAIiB,CAAJ,CAAT;AACAD,oBAAcH,SAASE,MAAT,EAAiBE,CAAjB,EAAoBjB,GAApB,CAAd;AACAc,UAAIG,CAAJ,IAASD,WAAT;AACD;AACF;AACD,SAAOF,GAAP;AACD","file":"convert.js","sourcesContent":["/* */ \nvar test = require('tape');\nvar b64 = require('../index');\nvar checks = ['a', 'aa', 'aaa', 'hi', 'hi!', 'hi!!', 'sup', 'sup?', 'sup?!'];\ntest('convert to base64 and back', function(t) {\n  t.plan(checks.length * 2);\n  for (var i = 0; i < checks.length; i++) {\n    var check = checks[i];\n    var b64Str,\n        arr,\n        str;\n    b64Str = b64.fromByteArray(map(check, function(char) {\n      return char.charCodeAt(0);\n    }));\n    arr = b64.toByteArray(b64Str);\n    str = map(arr, function(byte) {\n      return String.fromCharCode(byte);\n    }).join('');\n    t.equal(check, str, 'Checked ' + check);\n    t.equal(b64.byteLength(b64Str), arr.length, 'Checked length for ' + check);\n  }\n});\nfunction map(arr, callback) {\n  var res = [];\n  var kValue,\n      mappedValue;\n  for (var k = 0,\n      len = arr.length; k < len; k++) {\n    if ((typeof arr === 'string' && !!arr.charAt(k))) {\n      kValue = arr.charAt(k);\n      mappedValue = callback(kValue, k, arr);\n      res[k] = mappedValue;\n    } else if (typeof arr !== 'string' && k in arr) {\n      kValue = arr[k];\n      mappedValue = callback(kValue, k, arr);\n      res[k] = mappedValue;\n    }\n  }\n  return res;\n}\n"]}