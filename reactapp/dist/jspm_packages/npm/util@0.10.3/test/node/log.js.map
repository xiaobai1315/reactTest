{"version":3,"sources":["../../../../../../jspm_packages/npm/util@0.10.3/test/node/log.js"],"names":["process","assert","require","util","ok","stdout","writable","stderr","stdout_write","global","write","strings","string","push","console","_stderr","tests","input","output","undefined","parseInt","answer","forEach","test","log","result","shift","trim","re","match","exec","equal"],"mappings":";;AAAA;AACA,CAAC,UAASA,OAAT,EAAkB;AACjB,MAAIC,SAASC,QAAQ,QAAR,CAAb;AACA,MAAIC,OAAOD,QAAQ,YAAR,CAAX;AACAD,SAAOG,EAAP,CAAUJ,QAAQK,MAAR,CAAeC,QAAzB;AACAL,SAAOG,EAAP,CAAUJ,QAAQO,MAAR,CAAeD,QAAzB;AACA,MAAIE,eAAeC,OAAOT,OAAP,CAAeK,MAAf,CAAsBK,KAAzC;AACA,MAAIC,UAAU,EAAd;AACAF,SAAOT,OAAP,CAAeK,MAAf,CAAsBK,KAAtB,GAA8B,UAASE,MAAT,EAAiB;AAC7CD,YAAQE,IAAR,CAAaD,MAAb;AACD,GAFD;AAGAE,UAAQC,OAAR,GAAkBf,QAAQK,MAA1B;AACA,MAAIW,QAAQ,CAAC;AACXC,WAAO,KADI;AAEXC,YAAQ;AAFG,GAAD,EAGT;AACDD,WAAOE,SADN;AAEDD,YAAQ;AAFP,GAHS,EAMT;AACDD,WAAO,IADN;AAEDC,YAAQ;AAFP,GANS,EAST;AACDD,WAAO,KADN;AAEDC,YAAQ;AAFP,GATS,EAYT;AACDD,WAAO,EADN;AAEDC,YAAQ;AAFP,GAZS,EAeT;AACDD,WAAO,iBAAW,CAAE,CADnB;AAEDC,YAAQ;AAFP,GAfS,EAkBT;AACDD,WAAOG,SAAS,cAAT,EAAyB,EAAzB,CADN;AAEDF,YAAQ;AAFP,GAlBS,EAqBT;AACDD,WAAO,EAACI,QAAQ,EAAT,EADN;AAEDH,YAAQ;AAFP,GArBS,EAwBT;AACDD,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADN;AAEDC,YAAQ;AAFP,GAxBS,CAAZ;AA4BAF,QAAMM,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3BpB,SAAKqB,GAAL,CAASD,KAAKN,KAAd;AACA,QAAIQ,SAASd,QAAQe,KAAR,GAAgBC,IAAhB,EAAb;AAAA,QACIC,KAAM,6DADV;AAAA,QAEIC,QAAQD,GAAGE,IAAH,CAAQL,MAAR,CAFZ;AAGAxB,WAAOG,EAAP,CAAUyB,KAAV;AACA5B,WAAO8B,KAAP,CAAaF,MAAM,CAAN,CAAb,EAAuBN,KAAKL,MAA5B;AACD,GAPD;AAQAT,SAAOT,OAAP,CAAeK,MAAf,CAAsBK,KAAtB,GAA8BF,YAA9B;AACD,CAhDD,EAgDGN,QAAQ,SAAR,CAhDH","file":"log.js","sourcesContent":["/* */ \n(function(process) {\n  var assert = require('assert');\n  var util = require('../../util');\n  assert.ok(process.stdout.writable);\n  assert.ok(process.stderr.writable);\n  var stdout_write = global.process.stdout.write;\n  var strings = [];\n  global.process.stdout.write = function(string) {\n    strings.push(string);\n  };\n  console._stderr = process.stdout;\n  var tests = [{\n    input: 'foo',\n    output: 'foo'\n  }, {\n    input: undefined,\n    output: 'undefined'\n  }, {\n    input: null,\n    output: 'null'\n  }, {\n    input: false,\n    output: 'false'\n  }, {\n    input: 42,\n    output: '42'\n  }, {\n    input: function() {},\n    output: '[Function]'\n  }, {\n    input: parseInt('not a number', 10),\n    output: 'NaN'\n  }, {\n    input: {answer: 42},\n    output: '{ answer: 42 }'\n  }, {\n    input: [1, 2, 3],\n    output: '[ 1, 2, 3 ]'\n  }];\n  tests.forEach(function(test) {\n    util.log(test.input);\n    var result = strings.shift().trim(),\n        re = (/[0-9]{1,2} [A-Z][a-z]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} - (.+)$/),\n        match = re.exec(result);\n    assert.ok(match);\n    assert.equal(match[1], test.output);\n  });\n  global.process.stdout.write = stdout_write;\n})(require('process'));\n"]}