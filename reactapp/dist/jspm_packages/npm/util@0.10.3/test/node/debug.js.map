{"version":3,"sources":["../../../../../../jspm_packages/npm/util@0.10.3/test/node/debug.js"],"names":["process","assert","require","util","argv","child","parent","test","environ","shouldWrite","expectErr","expectOut","didTest","spawn","execPath","__filename","env","NODE_DEBUG","split","join","pid","err","stderr","setEncoding","on","c","out","stdout","equal","console","log","debug","debuglog","is","foo"],"mappings":";;AAAA;AACA,CAAC,UAASA,OAAT,EAAkB;AACjB,MAAIC,SAASC,QAAQ,QAAR,CAAb;AACA,MAAIC,OAAOD,QAAQ,YAAR,CAAX;AACA,MAAIF,QAAQI,IAAR,CAAa,CAAb,MAAoB,OAAxB,EACEC,QADF,KAGEC;AACF,WAASA,MAAT,GAAkB;AAChBC,SAAK,aAAL,EAAoB,IAApB;AACAA,SAAK,SAAL,EAAgB,IAAhB;AACAA,SAAK,SAAL,EAAgB,IAAhB;AACAA,SAAK,KAAL,EAAY,IAAZ;AACAA,SAAK,SAAL,EAAgB,KAAhB;AACAA,SAAK,EAAL,EAAS,KAAT;AACD;AACD,WAASA,IAAT,CAAcC,OAAd,EAAuBC,WAAvB,EAAoC;AAClC,QAAIC,YAAY,EAAhB;AACA,QAAID,WAAJ,EAAiB;AACfC,kBAAY,gDAAgD,wDAA5D;AACD;AACD,QAAIC,YAAY,MAAhB;AACA,QAAIC,UAAU,KAAd;AACA,QAAIC,QAAQX,QAAQ,eAAR,EAAyBW,KAArC;AACA,QAAIR,QAAQQ,MAAMb,QAAQc,QAAd,EAAwB,CAACC,UAAD,EAAa,OAAb,CAAxB,EAA+C,EAACC,KAAK,EAACC,YAAYT,OAAb,EAAN,EAA/C,CAAZ;AACAE,gBAAYA,UAAUQ,KAAV,CAAgB,OAAhB,EAAyBC,IAAzB,CAA8Bd,MAAMe,GAApC,CAAZ;AACA,QAAIC,MAAM,EAAV;AACAhB,UAAMiB,MAAN,CAAaC,WAAb,CAAyB,MAAzB;AACAlB,UAAMiB,MAAN,CAAaE,EAAb,CAAgB,MAAhB,EAAwB,UAASC,CAAT,EAAY;AAClCJ,aAAOI,CAAP;AACD,KAFD;AAGA,QAAIC,MAAM,EAAV;AACArB,UAAMsB,MAAN,CAAaJ,WAAb,CAAyB,MAAzB;AACAlB,UAAMsB,MAAN,CAAaH,EAAb,CAAgB,MAAhB,EAAwB,UAASC,CAAT,EAAY;AAClCC,aAAOD,CAAP;AACD,KAFD;AAGApB,UAAMmB,EAAN,CAAS,OAAT,EAAkB,UAASC,CAAT,EAAY;AAC5BxB,aAAO,CAACwB,CAAR;AACAxB,aAAO2B,KAAP,CAAaP,GAAb,EAAkBX,SAAlB;AACAT,aAAO2B,KAAP,CAAaF,GAAb,EAAkBf,SAAlB;AACAC,gBAAU,IAAV;AACAiB,cAAQC,GAAR,CAAY,UAAZ,EAAwBtB,OAAxB,EAAiCC,WAAjC;AACD,KAND;AAOAT,YAAQwB,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5BvB,aAAOW,OAAP;AACD,KAFD;AAGD;AACD,WAASP,KAAT,GAAiB;AACf,QAAI0B,QAAQ5B,KAAK6B,QAAL,CAAc,KAAd,CAAZ;AACAD,UAAM,MAAN,EAAc,EAACE,IAAI,GAAL,EAAd,EAAyB,WAAzB;AACAF,UAAM,4BAAN,EAAoC,IAApC,EAA0C,MAA1C,EAAkD,EAACG,KAAK,KAAN,EAAlD;AACAL,YAAQC,GAAR,CAAY,IAAZ;AACD;AACF,CApDD,EAoDG5B,QAAQ,SAAR,CApDH","file":"debug.js","sourcesContent":["/* */ \n(function(process) {\n  var assert = require('assert');\n  var util = require('../../util');\n  if (process.argv[2] === 'child')\n    child();\n  else\n    parent();\n  function parent() {\n    test('foo,tud,bar', true);\n    test('foo,tud', true);\n    test('tud,bar', true);\n    test('tud', true);\n    test('foo,bar', false);\n    test('', false);\n  }\n  function test(environ, shouldWrite) {\n    var expectErr = '';\n    if (shouldWrite) {\n      expectErr = 'TUD %PID%: this { is: \\'a\\' } /debugging/\\n' + 'TUD %PID%: number=1234 string=asdf obj={\"foo\":\"bar\"}\\n';\n    }\n    var expectOut = 'ok\\n';\n    var didTest = false;\n    var spawn = require('child_process').spawn;\n    var child = spawn(process.execPath, [__filename, 'child'], {env: {NODE_DEBUG: environ}});\n    expectErr = expectErr.split('%PID%').join(child.pid);\n    var err = '';\n    child.stderr.setEncoding('utf8');\n    child.stderr.on('data', function(c) {\n      err += c;\n    });\n    var out = '';\n    child.stdout.setEncoding('utf8');\n    child.stdout.on('data', function(c) {\n      out += c;\n    });\n    child.on('close', function(c) {\n      assert(!c);\n      assert.equal(err, expectErr);\n      assert.equal(out, expectOut);\n      didTest = true;\n      console.log('ok %j %j', environ, shouldWrite);\n    });\n    process.on('exit', function() {\n      assert(didTest);\n    });\n  }\n  function child() {\n    var debug = util.debuglog('tud');\n    debug('this', {is: 'a'}, /debugging/);\n    debug('number=%d string=%s obj=%j', 1234, 'asdf', {foo: 'bar'});\n    console.log('ok');\n  }\n})(require('process'));\n"]}