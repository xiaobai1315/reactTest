{"version":3,"sources":["../../../../../../jspm_packages/npm/util@0.10.3/test/node/util.js"],"names":["assert","require","context","runInNewContext","util","equal","isArray","Array","push","Error","Object","create","prototype","isRegExp","RegExp","Date","isDate","isError","TypeError","SyntaxError","name","message","ok","isObject","deepEqual","_extend","a","b"],"mappings":"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","file":"util.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar context = require('vm').runInNewContext;\nvar util = require('../../util');\nassert.equal(true, util.isArray([]));\nassert.equal(true, util.isArray(Array()));\nassert.equal(true, util.isArray(new Array()));\nassert.equal(true, util.isArray(new Array(5)));\nassert.equal(true, util.isArray(new Array('with', 'some', 'entries')));\nassert.equal(true, util.isArray(context('Array')()));\nassert.equal(false, util.isArray({}));\nassert.equal(false, util.isArray({push: function() {}}));\nassert.equal(false, util.isArray(/regexp/));\nassert.equal(false, util.isArray(new Error));\nassert.equal(false, util.isArray(Object.create(Array.prototype)));\nassert.equal(true, util.isRegExp(/regexp/));\nassert.equal(true, util.isRegExp(RegExp()));\nassert.equal(true, util.isRegExp(new RegExp()));\nassert.equal(true, util.isRegExp(context('RegExp')()));\nassert.equal(false, util.isRegExp({}));\nassert.equal(false, util.isRegExp([]));\nassert.equal(false, util.isRegExp(new Date()));\nassert.equal(false, util.isRegExp(Object.create(RegExp.prototype)));\nassert.equal(true, util.isDate(new Date()));\nassert.equal(true, util.isDate(new Date(0)));\nassert.equal(true, util.isDate(new (context('Date'))));\nassert.equal(false, util.isDate(Date()));\nassert.equal(false, util.isDate({}));\nassert.equal(false, util.isDate([]));\nassert.equal(false, util.isDate(new Error));\nassert.equal(false, util.isDate(Object.create(Date.prototype)));\nassert.equal(true, util.isError(new Error));\nassert.equal(true, util.isError(new TypeError));\nassert.equal(true, util.isError(new SyntaxError));\nassert.equal(true, util.isError(new (context('Error'))));\nassert.equal(true, util.isError(new (context('TypeError'))));\nassert.equal(true, util.isError(new (context('SyntaxError'))));\nassert.equal(false, util.isError({}));\nassert.equal(false, util.isError({\n  name: 'Error',\n  message: ''\n}));\nassert.equal(false, util.isError([]));\nassert.equal(true, util.isError(Object.create(Error.prototype)));\nassert.ok(util.isObject({}) === true);\nassert.deepEqual(util._extend({a: 1}), {a: 1});\nassert.deepEqual(util._extend({a: 1}, []), {a: 1});\nassert.deepEqual(util._extend({a: 1}, null), {a: 1});\nassert.deepEqual(util._extend({a: 1}, true), {a: 1});\nassert.deepEqual(util._extend({a: 1}, false), {a: 1});\nassert.deepEqual(util._extend({a: 1}, {b: 2}), {\n  a: 1,\n  b: 2\n});\nassert.deepEqual(util._extend({\n  a: 1,\n  b: 2\n}, {b: 3}), {\n  a: 1,\n  b: 3\n});\n"]}