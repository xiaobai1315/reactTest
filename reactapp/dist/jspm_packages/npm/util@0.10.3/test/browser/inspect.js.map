{"version":3,"sources":["../../../../../../jspm_packages/npm/util@0.10.3/test/browser/inspect.js"],"names":["assert","require","util","suite","test","a","equal","inspect","Array","Error","TypeError","SyntaxError"],"mappings":";;AAAA;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,OAAOD,QAAQ,YAAR,CAAX;AACAE,MAAM,SAAN;AACAC,KAAK,sCAAL,EAA6C,YAAW;AACtD,MAAIC,IAAI,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAR;AACAL,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAaF,CAAb,CAAb,EAA8B,+BAA9B;AACA,SAAOA,EAAE,CAAF,CAAP;AACAL,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAaF,CAAb,CAAb,EAA8B,wBAA9B;AACAL,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAaF,CAAb,EAAgB,IAAhB,CAAb,EAAoC,qCAApC;AACAL,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAa,IAAIC,KAAJ,CAAU,CAAV,CAAb,CAAb,EAAyC,cAAzC;AACD,CAPD;AAQAJ,KAAK,uEAAL,EAA8E,YAAW;AACvFJ,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAa,IAAIE,KAAJ,EAAb,CAAb,EAAwC,SAAxC;AACAT,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAa,IAAIE,KAAJ,CAAU,MAAV,CAAb,CAAb,EAA8C,eAA9C;AACAT,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAa,IAAIG,SAAJ,CAAc,MAAd,CAAb,CAAb,EAAkD,mBAAlD;AACAV,SAAOM,KAAP,CAAaJ,KAAKK,OAAL,CAAa,IAAII,WAAJ,CAAgB,MAAhB,CAAb,CAAb,EAAoD,qBAApD;AACD,CALD","file":"inspect.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar util = require('../../util');\nsuite('inspect');\ntest('util.inspect - test for sparse array', function() {\n  var a = ['foo', 'bar', 'baz'];\n  assert.equal(util.inspect(a), '[ \\'foo\\', \\'bar\\', \\'baz\\' ]');\n  delete a[1];\n  assert.equal(util.inspect(a), '[ \\'foo\\', , \\'baz\\' ]');\n  assert.equal(util.inspect(a, true), '[ \\'foo\\', , \\'baz\\', [length]: 3 ]');\n  assert.equal(util.inspect(new Array(5)), '[ , , , ,  ]');\n});\ntest('util.inspect -  exceptions should print the error message, not \\'{}\\'', function() {\n  assert.equal(util.inspect(new Error()), '[Error]');\n  assert.equal(util.inspect(new Error('FAIL')), '[Error: FAIL]');\n  assert.equal(util.inspect(new TypeError('FAIL')), '[TypeError: FAIL]');\n  assert.equal(util.inspect(new SyntaxError('FAIL')), '[SyntaxError: FAIL]');\n});\n"]}