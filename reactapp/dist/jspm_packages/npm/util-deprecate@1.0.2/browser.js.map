{"version":3,"sources":["../../../../jspm_packages/npm/util-deprecate@1.0.2/browser.js"],"names":["module","exports","deprecate","fn","msg","config","warned","deprecated","Error","console","trace","warn","apply","arguments","name","global","localStorage","_","val","String","toLowerCase"],"mappings":";;AACA;;;;AAIAA,OAAOC,OAAP,GAAiBC,SAAjB;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,CAAoBC,EAApB,EAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,OAAO,eAAP,CAAJ,EAA6B;AAC3B,WAAOF,EAAP;AACD;;AAED,MAAIG,SAAS,KAAb;AACA,WAASC,UAAT,GAAsB;AACpB,QAAI,CAACD,MAAL,EAAa;AACX,UAAID,OAAO,kBAAP,CAAJ,EAAgC;AAC9B,cAAM,IAAIG,KAAJ,CAAUJ,GAAV,CAAN;AACD,OAFD,MAEO,IAAIC,OAAO,kBAAP,CAAJ,EAAgC;AACrCI,gBAAQC,KAAR,CAAcN,GAAd;AACD,OAFM,MAEA;AACLK,gBAAQE,IAAR,CAAaP,GAAb;AACD;AACDE,eAAS,IAAT;AACD;AACD,WAAOH,GAAGS,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD;;AAED,SAAON,UAAP;AACD;;AAED;;;;;;;;AAQA,SAASF,MAAT,CAAiBS,IAAjB,EAAuB;AACrB;AACA,MAAI;AACF,QAAI,CAACC,OAAOC,YAAZ,EAA0B,OAAO,KAAP;AAC3B,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACD,MAAIC,MAAMH,OAAOC,YAAP,CAAoBF,IAApB,CAAV;AACA,MAAI,QAAQI,GAAZ,EAAiB,OAAO,KAAP;AACjB,SAAOC,OAAOD,GAAP,EAAYE,WAAZ,OAA8B,MAArC;AACD","file":"browser.js","sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"]}