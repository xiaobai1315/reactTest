{"version":3,"sources":["../../../../../jspm_packages/npm/core-js@1.2.7/modules/es6.regexp.constructor.js"],"names":["$","require","global","isRegExp","$flags","$RegExp","RegExp","Base","proto","prototype","re1","re2","CORRECT_NEW","p","f","piRE","fiU","undefined","constructor","source","call","each","getNames","key","setDesc","configurable","get","set","it"],"mappings":";;AAAA;AACA,IAAIA,IAAIC,QAAQ,KAAR,CAAR;AAAA,IACIC,SAASD,QAAQ,YAAR,CADb;AAAA,IAEIE,WAAWF,QAAQ,eAAR,CAFf;AAAA,IAGIG,SAASH,QAAQ,WAAR,CAHb;AAAA,IAIII,UAAUH,OAAOI,MAJrB;AAAA,IAKIC,OAAOF,OALX;AAAA,IAMIG,QAAQH,QAAQI,SANpB;AAAA,IAOIC,MAAM,IAPV;AAAA,IAQIC,MAAM,IARV;AAAA,IASIC,cAAc,IAAIP,OAAJ,CAAYK,GAAZ,MAAqBA,GATvC;AAUA,IAAIT,QAAQ,iBAAR,MAA+B,CAACW,WAAD,IAAgBX,QAAQ,WAAR,EAAqB,YAAW;AACjFU,MAAIV,QAAQ,SAAR,EAAmB,OAAnB,CAAJ,IAAmC,KAAnC;AACA,SAAOI,QAAQK,GAAR,KAAgBA,GAAhB,IAAuBL,QAAQM,GAAR,KAAgBA,GAAvC,IAA8CN,QAAQK,GAAR,EAAa,GAAb,KAAqB,MAA1E;AACD,CAHkD,CAA/C,CAAJ,EAGK;AACHL,YAAU,SAASC,MAAT,CAAgBO,CAAhB,EAAmBC,CAAnB,EAAsB;AAC9B,QAAIC,OAAOZ,SAASU,CAAT,CAAX;AAAA,QACIG,MAAMF,MAAMG,SADhB;AAEA,WAAO,EAAE,gBAAgBZ,OAAlB,KAA8BU,IAA9B,IAAsCF,EAAEK,WAAF,KAAkBb,OAAxD,IAAmEW,GAAnE,GAAyEH,CAAzE,GAA6ED,cAAc,IAAIL,IAAJ,CAASQ,QAAQ,CAACC,GAAT,GAAeH,EAAEM,MAAjB,GAA0BN,CAAnC,EAAsCC,CAAtC,CAAd,GAAyDP,KAAK,CAACQ,OAAOF,aAAaR,OAArB,IAAgCQ,EAAEM,MAAlC,GAA2CN,CAAhD,EAAmDE,QAAQC,GAAR,GAAcZ,OAAOgB,IAAP,CAAYP,CAAZ,CAAd,GAA+BC,CAAlF,CAA7I;AACD,GAJD;AAKAd,IAAEqB,IAAF,CAAOD,IAAP,CAAYpB,EAAEsB,QAAF,CAAWf,IAAX,CAAZ,EAA8B,UAASgB,GAAT,EAAc;AAC1CA,WAAOlB,OAAP,IAAkBL,EAAEwB,OAAF,CAAUnB,OAAV,EAAmBkB,GAAnB,EAAwB;AACxCE,oBAAc,IAD0B;AAExCC,WAAK,eAAW;AACd,eAAOnB,KAAKgB,GAAL,CAAP;AACD,OAJuC;AAKxCI,WAAK,aAASC,EAAT,EAAa;AAChBrB,aAAKgB,GAAL,IAAYK,EAAZ;AACD;AAPuC,KAAxB,CAAlB;AASD,GAVD;AAWApB,QAAMU,WAAN,GAAoBb,OAApB;AACAA,UAAQI,SAAR,GAAoBD,KAApB;AACAP,UAAQ,cAAR,EAAwBC,MAAxB,EAAgC,QAAhC,EAA0CG,OAA1C;AACD;AACDJ,QAAQ,iBAAR,EAA2B,QAA3B","file":"es6.regexp.constructor.js","sourcesContent":["/* */ \nvar $ = require('./$'),\n    global = require('./$.global'),\n    isRegExp = require('./$.is-regexp'),\n    $flags = require('./$.flags'),\n    $RegExp = global.RegExp,\n    Base = $RegExp,\n    proto = $RegExp.prototype,\n    re1 = /a/g,\n    re2 = /a/g,\n    CORRECT_NEW = new $RegExp(re1) !== re1;\nif (require('./$.descriptors') && (!CORRECT_NEW || require('./$.fails')(function() {\n  re2[require('./$.wks')('match')] = false;\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var piRE = isRegExp(p),\n        fiU = f === undefined;\n    return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p : CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);\n  };\n  $.each.call($.getNames(Base), function(key) {\n    key in $RegExp || $.setDesc($RegExp, key, {\n      configurable: true,\n      get: function() {\n        return Base[key];\n      },\n      set: function(it) {\n        Base[key] = it;\n      }\n    });\n  });\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./$.redefine')(global, 'RegExp', $RegExp);\n}\nrequire('./$.set-species')('RegExp');\n"]}