{"version":3,"sources":["../../../../../jspm_packages/npm/iconv-lite@0.4.19/encodings/dbcs-codec.js"],"names":["Buffer","process","require","exports","_dbcs","DBCSCodec","UNASSIGNED","GB18030_CODE","SEQ_START","NODE_START","UNASSIGNED_NODE","Array","DEF_CHAR","i","codecOptions","iconv","encodingName","Error","table","mappingTable","decodeTables","slice","decodeTableSeq","length","_addDecodeChunk","defaultCharUnicode","encodeTable","encodeTableSeq","skipEncodeChars","encodeSkipVals","val","j","from","to","_fillEncodeTable","encodeAdd","uChar","Object","prototype","hasOwnProperty","call","_setEncodeChar","charCodeAt","defCharSB","defaultCharSingleByte","gb18030","thirdByteNodeIdx","thirdByteNode","fourthByteNodeIdx","fourthByteNode","secondByteNodeIdx","secondByteNode","encoder","DBCSEncoder","decoder","DBCSDecoder","_getDecodeTrieNode","addr","bytes","push","node","toString","chunk","curAddr","parseInt","writeTable","k","part","l","code","codeTrail","len","seq","m","charCode","_getEncodeBucket","uCode","high","undefined","dbcsCode","bucket","low","_setEncodeSequence","oldVal","nodeIdx","prefix","mbCode","options","codec","leadSurrogate","seqObj","write","str","newBuf","nextChar","resCode","subtable","idx","findIdx","uChars","gbChars","Math","floor","end","prevBuf","buf","prevBufOffset","seqStart","concat","curByte","curSeq","ptr","uCodeLead","ret","r","mid"],"mappings":"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","file":"dbcs-codec.js","sourcesContent":["/* */ \n(function(Buffer, process) {\n  \"use strict\";\n  var Buffer = require('buffer').Buffer;\n  exports._dbcs = DBCSCodec;\n  var UNASSIGNED = -1,\n      GB18030_CODE = -2,\n      SEQ_START = -10,\n      NODE_START = -1000,\n      UNASSIGNED_NODE = new Array(0x100),\n      DEF_CHAR = -1;\n  for (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n  function DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n      throw new Error(\"DBCS codec is called without the data.\");\n    if (!codecOptions.table)\n      throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n    var mappingTable = codecOptions.table();\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);\n    this.decodeTableSeq = [];\n    for (var i = 0; i < mappingTable.length; i++)\n      this._addDecodeChunk(mappingTable[i]);\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n    this.encodeTable = [];\n    this.encodeTableSeq = [];\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n      for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n        var val = codecOptions.encodeSkipVals[i];\n        if (typeof val === 'number')\n          skipEncodeChars[val] = true;\n        else\n          for (var j = val.from; j <= val.to; j++)\n            skipEncodeChars[j] = true;\n      }\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n    if (codecOptions.encodeAdd) {\n      for (var uChar in codecOptions.encodeAdd)\n        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED)\n      this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED)\n      this.defCharSB = \"?\".charCodeAt(0);\n    if (typeof codecOptions.gb18030 === 'function') {\n      this.gb18030 = codecOptions.gb18030();\n      var thirdByteNodeIdx = this.decodeTables.length;\n      var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n      var fourthByteNodeIdx = this.decodeTables.length;\n      var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);\n      for (var i = 0x81; i <= 0xFE; i++) {\n        var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];\n        var secondByteNode = this.decodeTables[secondByteNodeIdx];\n        for (var j = 0x30; j <= 0x39; j++)\n          secondByteNode[j] = NODE_START - thirdByteNodeIdx;\n      }\n      for (var i = 0x81; i <= 0xFE; i++)\n        thirdByteNode[i] = NODE_START - fourthByteNodeIdx;\n      for (var i = 0x30; i <= 0x39; i++)\n        fourthByteNode[i] = GB18030_CODE;\n    }\n  }\n  DBCSCodec.prototype.encoder = DBCSEncoder;\n  DBCSCodec.prototype.decoder = DBCSDecoder;\n  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>= 8)\n      bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n      bytes.push(0);\n    var node = this.decodeTables[0];\n    for (var i = bytes.length - 1; i > 0; i--) {\n      var val = node[bytes[i]];\n      if (val == UNASSIGNED) {\n        node[bytes[i]] = NODE_START - this.decodeTables.length;\n        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n      } else if (val <= NODE_START) {\n        node = this.decodeTables[NODE_START - val];\n      } else\n        throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n  };\n  DBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    var curAddr = parseInt(chunk[0], 16);\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n    for (var k = 1; k < chunk.length; k++) {\n      var part = chunk[k];\n      if (typeof part === \"string\") {\n        for (var l = 0; l < part.length; ) {\n          var code = part.charCodeAt(l++);\n          if (0xD800 <= code && code < 0xDC00) {\n            var codeTrail = part.charCodeAt(l++);\n            if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n              writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n            else\n              throw new Error(\"Incorrect surrogate pair in \" + this.encodingName + \" at chunk \" + chunk[0]);\n          } else if (0x0FF0 < code && code <= 0x0FFF) {\n            var len = 0xFFF - code + 2;\n            var seq = [];\n            for (var m = 0; m < len; m++)\n              seq.push(part.charCodeAt(l++));\n            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n            this.decodeTableSeq.push(seq);\n          } else\n            writeTable[curAddr++] = code;\n        }\n      } else if (typeof part === \"number\") {\n        var charCode = writeTable[curAddr - 1] + 1;\n        for (var l = 0; l < part; l++)\n          writeTable[curAddr++] = charCode++;\n      } else\n        throw new Error(\"Incorrect type '\" + typeof part + \"' given in \" + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n      throw new Error(\"Incorrect chunk in \" + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n  };\n  DBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8;\n    if (this.encodeTable[high] === undefined)\n      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);\n    return this.encodeTable[high];\n  };\n  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;\n    else if (bucket[low] == UNASSIGNED)\n      bucket[low] = dbcsCode;\n  };\n  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    var node;\n    if (bucket[low] <= SEQ_START) {\n      node = this.encodeTableSeq[SEQ_START - bucket[low]];\n    } else {\n      node = {};\n      if (bucket[low] !== UNASSIGNED)\n        node[DEF_CHAR] = bucket[low];\n      bucket[low] = SEQ_START - this.encodeTableSeq.length;\n      this.encodeTableSeq.push(node);\n    }\n    for (var j = 1; j < seq.length - 1; j++) {\n      var oldVal = node[uCode];\n      if (typeof oldVal === 'object')\n        node = oldVal;\n      else {\n        node = node[uCode] = {};\n        if (oldVal !== undefined)\n          node[DEF_CHAR] = oldVal;\n      }\n    }\n    uCode = seq[seq.length - 1];\n    node[uCode] = dbcsCode;\n  };\n  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    for (var i = 0; i < 0x100; i++) {\n      var uCode = node[i];\n      var mbCode = prefix + i;\n      if (skipEncodeChars[mbCode])\n        continue;\n      if (uCode >= 0)\n        this._setEncodeChar(uCode, mbCode);\n      else if (uCode <= NODE_START)\n        this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);\n      else if (uCode <= SEQ_START)\n        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n    }\n  };\n  function DBCSEncoder(options, codec) {\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n  }\n  DBCSEncoder.prototype.write = function(str) {\n    var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj,\n        nextChar = -1,\n        i = 0,\n        j = 0;\n    while (true) {\n      if (nextChar === -1) {\n        if (i == str.length)\n          break;\n        var uCode = str.charCodeAt(i++);\n      } else {\n        var uCode = nextChar;\n        nextChar = -1;\n      }\n      if (0xD800 <= uCode && uCode < 0xE000) {\n        if (uCode < 0xDC00) {\n          if (leadSurrogate === -1) {\n            leadSurrogate = uCode;\n            continue;\n          } else {\n            leadSurrogate = uCode;\n            uCode = UNASSIGNED;\n          }\n        } else {\n          if (leadSurrogate !== -1) {\n            uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n            leadSurrogate = -1;\n          } else {\n            uCode = UNASSIGNED;\n          }\n        }\n      } else if (leadSurrogate !== -1) {\n        nextChar = uCode;\n        uCode = UNASSIGNED;\n        leadSurrogate = -1;\n      }\n      var dbcsCode = UNASSIGNED;\n      if (seqObj !== undefined && uCode != UNASSIGNED) {\n        var resCode = seqObj[uCode];\n        if (typeof resCode === 'object') {\n          seqObj = resCode;\n          continue;\n        } else if (typeof resCode == 'number') {\n          dbcsCode = resCode;\n        } else if (resCode == undefined) {\n          resCode = seqObj[DEF_CHAR];\n          if (resCode !== undefined) {\n            dbcsCode = resCode;\n            nextChar = uCode;\n          } else {}\n        }\n        seqObj = undefined;\n      } else if (uCode >= 0) {\n        var subtable = this.encodeTable[uCode >> 8];\n        if (subtable !== undefined)\n          dbcsCode = subtable[uCode & 0xFF];\n        if (dbcsCode <= SEQ_START) {\n          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];\n          continue;\n        }\n        if (dbcsCode == UNASSIGNED && this.gb18030) {\n          var idx = findIdx(this.gb18030.uChars, uCode);\n          if (idx != -1) {\n            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600);\n            dbcsCode = dbcsCode % 12600;\n            newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260);\n            dbcsCode = dbcsCode % 1260;\n            newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10);\n            dbcsCode = dbcsCode % 10;\n            newBuf[j++] = 0x30 + dbcsCode;\n            continue;\n          }\n        }\n      }\n      if (dbcsCode === UNASSIGNED)\n        dbcsCode = this.defaultCharSingleByte;\n      if (dbcsCode < 0x100) {\n        newBuf[j++] = dbcsCode;\n      } else if (dbcsCode < 0x10000) {\n        newBuf[j++] = dbcsCode >> 8;\n        newBuf[j++] = dbcsCode & 0xFF;\n      } else {\n        newBuf[j++] = dbcsCode >> 16;\n        newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n        newBuf[j++] = dbcsCode & 0xFF;\n      }\n    }\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n  };\n  DBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n      return;\n    var newBuf = new Buffer(10),\n        j = 0;\n    if (this.seqObj) {\n      var dbcsCode = this.seqObj[DEF_CHAR];\n      if (dbcsCode !== undefined) {\n        if (dbcsCode < 0x100) {\n          newBuf[j++] = dbcsCode;\n        } else {\n          newBuf[j++] = dbcsCode >> 8;\n          newBuf[j++] = dbcsCode & 0xFF;\n        }\n      } else {}\n      this.seqObj = undefined;\n    }\n    if (this.leadSurrogate !== -1) {\n      newBuf[j++] = this.defaultCharSingleByte;\n      this.leadSurrogate = -1;\n    }\n    return newBuf.slice(0, j);\n  };\n  DBCSEncoder.prototype.findIdx = findIdx;\n  function DBCSDecoder(options, codec) {\n    this.nodeIdx = 0;\n    this.prevBuf = new Buffer(0);\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n  }\n  DBCSDecoder.prototype.write = function(buf) {\n    var newBuf = new Buffer(buf.length * 2),\n        nodeIdx = this.nodeIdx,\n        prevBuf = this.prevBuf,\n        prevBufOffset = this.prevBuf.length,\n        seqStart = -this.prevBuf.length,\n        uCode;\n    if (prevBufOffset > 0)\n      prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);\n    for (var i = 0,\n        j = 0; i < buf.length; i++) {\n      var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];\n      var uCode = this.decodeTables[nodeIdx][curByte];\n      if (uCode >= 0) {} else if (uCode === UNASSIGNED) {\n        i = seqStart;\n        uCode = this.defaultCharUnicode.charCodeAt(0);\n      } else if (uCode === GB18030_CODE) {\n        var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i + 1) : prevBuf.slice(seqStart + prevBufOffset, i + 1 + prevBufOffset);\n        var ptr = (curSeq[0] - 0x81) * 12600 + (curSeq[1] - 0x30) * 1260 + (curSeq[2] - 0x81) * 10 + (curSeq[3] - 0x30);\n        var idx = findIdx(this.gb18030.gbChars, ptr);\n        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n      } else if (uCode <= NODE_START) {\n        nodeIdx = NODE_START - uCode;\n        continue;\n      } else if (uCode <= SEQ_START) {\n        var seq = this.decodeTableSeq[SEQ_START - uCode];\n        for (var k = 0; k < seq.length - 1; k++) {\n          uCode = seq[k];\n          newBuf[j++] = uCode & 0xFF;\n          newBuf[j++] = uCode >> 8;\n        }\n        uCode = seq[seq.length - 1];\n      } else\n        throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n      if (uCode > 0xFFFF) {\n        uCode -= 0x10000;\n        var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);\n        newBuf[j++] = uCodeLead & 0xFF;\n        newBuf[j++] = uCodeLead >> 8;\n        uCode = 0xDC00 + uCode % 0x400;\n      }\n      newBuf[j++] = uCode & 0xFF;\n      newBuf[j++] = uCode >> 8;\n      nodeIdx = 0;\n      seqStart = i + 1;\n    }\n    this.nodeIdx = nodeIdx;\n    this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);\n    return newBuf.slice(0, j).toString('ucs2');\n  };\n  DBCSDecoder.prototype.end = function() {\n    var ret = '';\n    while (this.prevBuf.length > 0) {\n      ret += this.defaultCharUnicode;\n      var buf = this.prevBuf.slice(1);\n      this.prevBuf = new Buffer(0);\n      this.nodeIdx = 0;\n      if (buf.length > 0)\n        ret += this.write(buf);\n    }\n    this.nodeIdx = 0;\n    return ret;\n  };\n  function findIdx(table, val) {\n    if (table[0] > val)\n      return -1;\n    var l = 0,\n        r = table.length;\n    while (l < r - 1) {\n      var mid = l + Math.floor((r - l + 1) / 2);\n      if (table[mid] <= val)\n        l = mid;\n      else\n        r = mid;\n    }\n    return l;\n  }\n})(require('buffer').Buffer, require('process'));\n"]}