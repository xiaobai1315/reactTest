{"version":3,"sources":["../../../../../jspm_packages/npm/iconv-lite@0.4.19/lib/streams.js"],"names":["Buffer","require","Transform","module","exports","iconv","encodeStream","encoding","options","IconvLiteEncoderStream","getEncoder","decodeStream","IconvLiteDecoderStream","getDecoder","supportsStreams","_collect","prototype","collect","conv","decodeStrings","call","Object","create","constructor","value","_transform","chunk","done","Error","res","write","length","push","e","_flush","end","cb","chunks","on","concat","isBuffer"],"mappings":"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","file":"streams.js","sourcesContent":["/* */ \n(function(Buffer) {\n  \"use strict\";\n  var Buffer = require('buffer').Buffer,\n      Transform = require('stream').Transform;\n  module.exports = function(iconv) {\n    iconv.encodeStream = function encodeStream(encoding, options) {\n      return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    };\n    iconv.decodeStream = function decodeStream(encoding, options) {\n      return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    };\n    iconv.supportsStreams = true;\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n  };\n  function IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false;\n    Transform.call(this, options);\n  }\n  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {constructor: {value: IconvLiteEncoderStream}});\n  IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n      return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n      var res = this.conv.write(chunk);\n      if (res && res.length)\n        this.push(res);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n  IconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n      var res = this.conv.end();\n      if (res && res.length)\n        this.push(res);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n  IconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) {\n      chunks.push(chunk);\n    });\n    this.on('end', function() {\n      cb(null, Buffer.concat(chunks));\n    });\n    return this;\n  };\n  function IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8';\n    Transform.call(this, options);\n  }\n  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {constructor: {value: IconvLiteDecoderStream}});\n  IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n      return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n      var res = this.conv.write(chunk);\n      if (res && res.length)\n        this.push(res, this.encoding);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n  IconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n      var res = this.conv.end();\n      if (res && res.length)\n        this.push(res, this.encoding);\n      done();\n    } catch (e) {\n      done(e);\n    }\n  };\n  IconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) {\n      res += chunk;\n    });\n    this.on('end', function() {\n      cb(null, res);\n    });\n    return this;\n  };\n})(require('buffer').Buffer);\n"]}