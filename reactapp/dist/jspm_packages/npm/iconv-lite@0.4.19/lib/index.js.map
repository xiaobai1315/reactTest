{"version":3,"sources":["../../../../../jspm_packages/npm/iconv-lite@0.4.19/lib/index.js"],"names":["Buffer","process","require","bomHandling","iconv","module","exports","encodings","defaultCharUnicode","defaultCharSingleByte","encode","str","encoding","options","encoder","getEncoder","res","write","trail","end","length","concat","decode","buf","skipDecodeWarning","console","error","decoder","getDecoder","encodingExists","enc","getCodec","e","toEncoding","fromEncoding","_codecDataCache","toLowerCase","replace","codecOptions","codec","codecDef","key","encodingName","type","Error","bomAware","addBOM","PrependBOM","stripBOM","StripBOM","nodeVer","versions","node","nodeVerArr","split","map","Number"],"mappings":"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","file":"index.js","sourcesContent":["/* */ \n(function(Buffer, process) {\n  \"use strict\";\n  var Buffer = require('buffer').Buffer;\n  var bomHandling = require('./bom-handling'),\n      iconv = module.exports;\n  iconv.encodings = null;\n  iconv.defaultCharUnicode = '�';\n  iconv.defaultCharSingleByte = '?';\n  iconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\");\n    var encoder = iconv.getEncoder(encoding, options);\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n  };\n  iconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n      if (!iconv.skipDecodeWarning) {\n        console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n        iconv.skipDecodeWarning = true;\n      }\n      buf = new Buffer(\"\" + (buf || \"\"), \"binary\");\n    }\n    var decoder = iconv.getDecoder(encoding, options);\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n    return trail ? (res + trail) : res;\n  };\n  iconv.encodingExists = function encodingExists(enc) {\n    try {\n      iconv.getCodec(enc);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  iconv.toEncoding = iconv.encode;\n  iconv.fromEncoding = iconv.decode;\n  iconv._codecDataCache = {};\n  iconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n      iconv.encodings = require('../encodings/index');\n    var enc = ('' + encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\");\n    var codecOptions = {};\n    while (true) {\n      var codec = iconv._codecDataCache[enc];\n      if (codec)\n        return codec;\n      var codecDef = iconv.encodings[enc];\n      switch (typeof codecDef) {\n        case \"string\":\n          enc = codecDef;\n          break;\n        case \"object\":\n          for (var key in codecDef)\n            codecOptions[key] = codecDef[key];\n          if (!codecOptions.encodingName)\n            codecOptions.encodingName = enc;\n          enc = codecDef.type;\n          break;\n        case \"function\":\n          if (!codecOptions.encodingName)\n            codecOptions.encodingName = enc;\n          codec = new codecDef(codecOptions, iconv);\n          iconv._codecDataCache[codecOptions.encodingName] = codec;\n          return codec;\n        default:\n          throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\" + enc + \"')\");\n      }\n    }\n  };\n  iconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n    if (codec.bomAware && options && options.addBOM)\n      encoder = new bomHandling.PrependBOM(encoder, options);\n    return encoder;\n  };\n  iconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n    if (codec.bomAware && !(options && options.stripBOM === false))\n      decoder = new bomHandling.StripBOM(decoder, options);\n    return decoder;\n  };\n  var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\n  if (nodeVer) {\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n      require('@empty')(iconv);\n    }\n    require('@empty')(iconv);\n  }\n  if (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n  }\n})(require('buffer').Buffer, require('process'));\n"]}