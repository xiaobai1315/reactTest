{"version":3,"sources":["../../../../jspm_packages/npm/string_decoder@0.10.31/index.js"],"names":["Buffer","require","isBufferEncoding","isEncoding","encoding","toLowerCase","assertEncoding","Error","StringDecoder","exports","replace","surrogateSize","detectIncompleteChar","utf16DetectIncompleteChar","base64DetectIncompleteChar","write","passThroughWrite","charBuffer","charReceived","charLength","prototype","buffer","charStr","available","length","copy","slice","toString","charCode","charCodeAt","end","size","substring","i","c","res","cr","buf","enc"],"mappings":"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","file":"index.js","sourcesContent":["/* */ \n(function(Buffer) {\n  var Buffer = require('buffer').Buffer;\n  var isBufferEncoding = Buffer.isEncoding || function(encoding) {\n    switch (encoding && encoding.toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n      case 'raw':\n        return true;\n      default:\n        return false;\n    }\n  };\n  function assertEncoding(encoding) {\n    if (encoding && !isBufferEncoding(encoding)) {\n      throw new Error('Unknown encoding: ' + encoding);\n    }\n  }\n  var StringDecoder = exports.StringDecoder = function(encoding) {\n    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n    assertEncoding(encoding);\n    switch (this.encoding) {\n      case 'utf8':\n        this.surrogateSize = 3;\n        break;\n      case 'ucs2':\n      case 'utf16le':\n        this.surrogateSize = 2;\n        this.detectIncompleteChar = utf16DetectIncompleteChar;\n        break;\n      case 'base64':\n        this.surrogateSize = 3;\n        this.detectIncompleteChar = base64DetectIncompleteChar;\n        break;\n      default:\n        this.write = passThroughWrite;\n        return;\n    }\n    this.charBuffer = new Buffer(6);\n    this.charReceived = 0;\n    this.charLength = 0;\n  };\n  StringDecoder.prototype.write = function(buffer) {\n    var charStr = '';\n    while (this.charLength) {\n      var available = (buffer.length >= this.charLength - this.charReceived) ? this.charLength - this.charReceived : buffer.length;\n      buffer.copy(this.charBuffer, this.charReceived, 0, available);\n      this.charReceived += available;\n      if (this.charReceived < this.charLength) {\n        return '';\n      }\n      buffer = buffer.slice(available, buffer.length);\n      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n      var charCode = charStr.charCodeAt(charStr.length - 1);\n      if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        this.charLength += this.surrogateSize;\n        charStr = '';\n        continue;\n      }\n      this.charReceived = this.charLength = 0;\n      if (buffer.length === 0) {\n        return charStr;\n      }\n      break;\n    }\n    this.detectIncompleteChar(buffer);\n    var end = buffer.length;\n    if (this.charLength) {\n      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n      end -= this.charReceived;\n    }\n    charStr += buffer.toString(this.encoding, 0, end);\n    var end = charStr.length - 1;\n    var charCode = charStr.charCodeAt(end);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      var size = this.surrogateSize;\n      this.charLength += size;\n      this.charReceived += size;\n      this.charBuffer.copy(this.charBuffer, size, 0, size);\n      buffer.copy(this.charBuffer, 0, 0, size);\n      return charStr.substring(0, end);\n    }\n    return charStr;\n  };\n  StringDecoder.prototype.detectIncompleteChar = function(buffer) {\n    var i = (buffer.length >= 3) ? 3 : buffer.length;\n    for (; i > 0; i--) {\n      var c = buffer[buffer.length - i];\n      if (i == 1 && c >> 5 == 0x06) {\n        this.charLength = 2;\n        break;\n      }\n      if (i <= 2 && c >> 4 == 0x0E) {\n        this.charLength = 3;\n        break;\n      }\n      if (i <= 3 && c >> 3 == 0x1E) {\n        this.charLength = 4;\n        break;\n      }\n    }\n    this.charReceived = i;\n  };\n  StringDecoder.prototype.end = function(buffer) {\n    var res = '';\n    if (buffer && buffer.length)\n      res = this.write(buffer);\n    if (this.charReceived) {\n      var cr = this.charReceived;\n      var buf = this.charBuffer;\n      var enc = this.encoding;\n      res += buf.slice(0, cr).toString(enc);\n    }\n    return res;\n  };\n  function passThroughWrite(buffer) {\n    return buffer.toString(this.encoding);\n  }\n  function utf16DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 2;\n    this.charLength = this.charReceived ? 2 : 0;\n  }\n  function base64DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 3;\n    this.charLength = this.charReceived ? 3 : 0;\n  }\n})(require('buffer').Buffer);\n"]}