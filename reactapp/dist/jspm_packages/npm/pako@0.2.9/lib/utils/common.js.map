{"version":3,"sources":["../../../../../../jspm_packages/npm/pako@0.2.9/lib/utils/common.js"],"names":["TYPED_OK","Uint8Array","Uint16Array","Int32Array","exports","assign","obj","sources","Array","prototype","slice","call","arguments","length","source","shift","TypeError","p","hasOwnProperty","shrinkBuf","buf","size","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","i","flattenChunks","chunks","l","pos","chunk","result","fnUntyped","concat","apply","setTyped","on","Buf8","Buf16","Buf32"],"mappings":"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","file":"common.js","sourcesContent":["/* */ \n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n"]}