{"version":3,"sources":["../../../../../../jspm_packages/npm/pako@0.2.9/lib/zlib/inffast.js"],"names":["BAD","TYPE","module","exports","inflate_fast","strm","start","state","_in","last","_out","beg","end","dmax","wsize","whave","wnext","s_window","hold","bits","lcode","dcode","lmask","dmask","here","op","len","dist","from","from_source","input","output","next_in","avail_in","next_out","avail_out","window","lencode","distcode","lenbits","distbits","top","dolen","dodist","msg","mode","sane"],"mappings":"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","file":"inffast.js","sourcesContent":["/* */ \n'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n"]}