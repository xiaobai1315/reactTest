{"version":3,"sources":["../../../../../../jspm_packages/npm/pako@0.2.9/lib/zlib/trees.js"],"names":["process","utils","require","Z_FIXED","Z_BINARY","Z_TEXT","Z_UNKNOWN","zero","buf","len","length","STORED_BLOCK","STATIC_TREES","DYN_TREES","MIN_MATCH","MAX_MATCH","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","Array","static_dtree","_dist_code","_length_code","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","s","w","pending_buf","pending","send_bits","value","bi_valid","bi_buf","send_code","c","tree","bi_reverse","code","res","bi_flush","gen_bitlen","desc","stree","extra","base","h","n","m","bits","xbits","f","overflow","bl_count","heap","heap_max","opt_len","static_len","gen_codes","next_code","tr_static_init","init_block","dyn_ltree","dyn_dtree","bl_tree","last_lit","matches","bi_windup","copy_block","header","arraySet","window","smaller","depth","_n2","_m2","pqdownheap","k","v","j","heap_len","compress_block","ltree","dtree","lc","lx","d_buf","l_buf","build_tree","node","scan_tree","prevlen","curlen","nextlen","count","max_count","min_count","send_tree","build_bl_tree","max_blindex","l_desc","d_desc","bl_desc","send_all_trees","lcodes","dcodes","blcodes","rank","detect_data_type","black_mask","static_init_done","_tr_init","_tr_stored_block","stored_len","last","_tr_align","_tr_flush_block","opt_lenb","static_lenb","level","strm","data_type","strategy","_tr_tally","lit_bufsize","exports"],"mappings":"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","file":"trees.js","sourcesContent":["/* */ \n(function(process) {\n  'use strict';\n  var utils = require('../utils/common');\n  var Z_FIXED = 4;\n  var Z_BINARY = 0;\n  var Z_TEXT = 1;\n  var Z_UNKNOWN = 2;\n  function zero(buf) {\n    var len = buf.length;\n    while (--len >= 0) {\n      buf[len] = 0;\n    }\n  }\n  var STORED_BLOCK = 0;\n  var STATIC_TREES = 1;\n  var DYN_TREES = 2;\n  var MIN_MATCH = 3;\n  var MAX_MATCH = 258;\n  var LENGTH_CODES = 29;\n  var LITERALS = 256;\n  var L_CODES = LITERALS + 1 + LENGTH_CODES;\n  var D_CODES = 30;\n  var BL_CODES = 19;\n  var HEAP_SIZE = 2 * L_CODES + 1;\n  var MAX_BITS = 15;\n  var Buf_size = 16;\n  var MAX_BL_BITS = 7;\n  var END_BLOCK = 256;\n  var REP_3_6 = 16;\n  var REPZ_3_10 = 17;\n  var REPZ_11_138 = 18;\n  var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\n  var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n  var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n  var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  var DIST_CODE_LEN = 512;\n  var static_ltree = new Array((L_CODES + 2) * 2);\n  zero(static_ltree);\n  var static_dtree = new Array(D_CODES * 2);\n  zero(static_dtree);\n  var _dist_code = new Array(DIST_CODE_LEN);\n  zero(_dist_code);\n  var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);\n  zero(_length_code);\n  var base_length = new Array(LENGTH_CODES);\n  zero(base_length);\n  var base_dist = new Array(D_CODES);\n  zero(base_dist);\n  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n    this.static_tree = static_tree;\n    this.extra_bits = extra_bits;\n    this.extra_base = extra_base;\n    this.elems = elems;\n    this.max_length = max_length;\n    this.has_stree = static_tree && static_tree.length;\n  }\n  var static_l_desc;\n  var static_d_desc;\n  var static_bl_desc;\n  function TreeDesc(dyn_tree, stat_desc) {\n    this.dyn_tree = dyn_tree;\n    this.max_code = 0;\n    this.stat_desc = stat_desc;\n  }\n  function d_code(dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n  }\n  function put_short(s, w) {\n    s.pending_buf[s.pending++] = (w) & 0xff;\n    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n  }\n  function send_bits(s, value, length) {\n    if (s.bi_valid > (Buf_size - length)) {\n      s.bi_buf |= (value << s.bi_valid) & 0xffff;\n      put_short(s, s.bi_buf);\n      s.bi_buf = value >> (Buf_size - s.bi_valid);\n      s.bi_valid += length - Buf_size;\n    } else {\n      s.bi_buf |= (value << s.bi_valid) & 0xffff;\n      s.bi_valid += length;\n    }\n  }\n  function send_code(s, c, tree) {\n    send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n  }\n  function bi_reverse(code, len) {\n    var res = 0;\n    do {\n      res |= code & 1;\n      code >>>= 1;\n      res <<= 1;\n    } while (--len > 0);\n    return res >>> 1;\n  }\n  function bi_flush(s) {\n    if (s.bi_valid === 16) {\n      put_short(s, s.bi_buf);\n      s.bi_buf = 0;\n      s.bi_valid = 0;\n    } else if (s.bi_valid >= 8) {\n      s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n      s.bi_buf >>= 8;\n      s.bi_valid -= 8;\n    }\n  }\n  function gen_bitlen(s, desc) {\n    var tree = desc.dyn_tree;\n    var max_code = desc.max_code;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var extra = desc.stat_desc.extra_bits;\n    var base = desc.stat_desc.extra_base;\n    var max_length = desc.stat_desc.max_length;\n    var h;\n    var n,\n        m;\n    var bits;\n    var xbits;\n    var f;\n    var overflow = 0;\n    for (bits = 0; bits <= MAX_BITS; bits++) {\n      s.bl_count[bits] = 0;\n    }\n    tree[s.heap[s.heap_max] * 2 + 1] = 0;\n    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n      n = s.heap[h];\n      bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n      if (bits > max_length) {\n        bits = max_length;\n        overflow++;\n      }\n      tree[n * 2 + 1] = bits;\n      if (n > max_code) {\n        continue;\n      }\n      s.bl_count[bits]++;\n      xbits = 0;\n      if (n >= base) {\n        xbits = extra[n - base];\n      }\n      f = tree[n * 2];\n      s.opt_len += f * (bits + xbits);\n      if (has_stree) {\n        s.static_len += f * (stree[n * 2 + 1] + xbits);\n      }\n    }\n    if (overflow === 0) {\n      return;\n    }\n    do {\n      bits = max_length - 1;\n      while (s.bl_count[bits] === 0) {\n        bits--;\n      }\n      s.bl_count[bits]--;\n      s.bl_count[bits + 1] += 2;\n      s.bl_count[max_length]--;\n      overflow -= 2;\n    } while (overflow > 0);\n    for (bits = max_length; bits !== 0; bits--) {\n      n = s.bl_count[bits];\n      while (n !== 0) {\n        m = s.heap[--h];\n        if (m > max_code) {\n          continue;\n        }\n        if (tree[m * 2 + 1] !== bits) {\n          s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n          tree[m * 2 + 1] = bits;\n        }\n        n--;\n      }\n    }\n  }\n  function gen_codes(tree, max_code, bl_count) {\n    var next_code = new Array(MAX_BITS + 1);\n    var code = 0;\n    var bits;\n    var n;\n    for (bits = 1; bits <= MAX_BITS; bits++) {\n      next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n    }\n    for (n = 0; n <= max_code; n++) {\n      var len = tree[n * 2 + 1];\n      if (len === 0) {\n        continue;\n      }\n      tree[n * 2] = bi_reverse(next_code[len]++, len);\n    }\n  }\n  function tr_static_init() {\n    var n;\n    var bits;\n    var length;\n    var code;\n    var dist;\n    var bl_count = new Array(MAX_BITS + 1);\n    length = 0;\n    for (code = 0; code < LENGTH_CODES - 1; code++) {\n      base_length[code] = length;\n      for (n = 0; n < (1 << extra_lbits[code]); n++) {\n        _length_code[length++] = code;\n      }\n    }\n    _length_code[length - 1] = code;\n    dist = 0;\n    for (code = 0; code < 16; code++) {\n      base_dist[code] = dist;\n      for (n = 0; n < (1 << extra_dbits[code]); n++) {\n        _dist_code[dist++] = code;\n      }\n    }\n    dist >>= 7;\n    for (; code < D_CODES; code++) {\n      base_dist[code] = dist << 7;\n      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n        _dist_code[256 + dist++] = code;\n      }\n    }\n    for (bits = 0; bits <= MAX_BITS; bits++) {\n      bl_count[bits] = 0;\n    }\n    n = 0;\n    while (n <= 143) {\n      static_ltree[n * 2 + 1] = 8;\n      n++;\n      bl_count[8]++;\n    }\n    while (n <= 255) {\n      static_ltree[n * 2 + 1] = 9;\n      n++;\n      bl_count[9]++;\n    }\n    while (n <= 279) {\n      static_ltree[n * 2 + 1] = 7;\n      n++;\n      bl_count[7]++;\n    }\n    while (n <= 287) {\n      static_ltree[n * 2 + 1] = 8;\n      n++;\n      bl_count[8]++;\n    }\n    gen_codes(static_ltree, L_CODES + 1, bl_count);\n    for (n = 0; n < D_CODES; n++) {\n      static_dtree[n * 2 + 1] = 5;\n      static_dtree[n * 2] = bi_reverse(n, 5);\n    }\n    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);\n    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n  }\n  function init_block(s) {\n    var n;\n    for (n = 0; n < L_CODES; n++) {\n      s.dyn_ltree[n * 2] = 0;\n    }\n    for (n = 0; n < D_CODES; n++) {\n      s.dyn_dtree[n * 2] = 0;\n    }\n    for (n = 0; n < BL_CODES; n++) {\n      s.bl_tree[n * 2] = 0;\n    }\n    s.dyn_ltree[END_BLOCK * 2] = 1;\n    s.opt_len = s.static_len = 0;\n    s.last_lit = s.matches = 0;\n  }\n  function bi_windup(s) {\n    if (s.bi_valid > 8) {\n      put_short(s, s.bi_buf);\n    } else if (s.bi_valid > 0) {\n      s.pending_buf[s.pending++] = s.bi_buf;\n    }\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n  }\n  function copy_block(s, buf, len, header) {\n    bi_windup(s);\n    if (header) {\n      put_short(s, len);\n      put_short(s, ~len);\n    }\n    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n    s.pending += len;\n  }\n  function smaller(tree, n, m, depth) {\n    var _n2 = n * 2;\n    var _m2 = m * 2;\n    return (tree[_n2] < tree[_m2] || (tree[_n2] === tree[_m2] && depth[n] <= depth[m]));\n  }\n  function pqdownheap(s, tree, k) {\n    var v = s.heap[k];\n    var j = k << 1;\n    while (j <= s.heap_len) {\n      if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n        j++;\n      }\n      if (smaller(tree, v, s.heap[j], s.depth)) {\n        break;\n      }\n      s.heap[k] = s.heap[j];\n      k = j;\n      j <<= 1;\n    }\n    s.heap[k] = v;\n  }\n  function compress_block(s, ltree, dtree) {\n    var dist;\n    var lc;\n    var lx = 0;\n    var code;\n    var extra;\n    if (s.last_lit !== 0) {\n      do {\n        dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n        lc = s.pending_buf[s.l_buf + lx];\n        lx++;\n        if (dist === 0) {\n          send_code(s, lc, ltree);\n        } else {\n          code = _length_code[lc];\n          send_code(s, code + LITERALS + 1, ltree);\n          extra = extra_lbits[code];\n          if (extra !== 0) {\n            lc -= base_length[code];\n            send_bits(s, lc, extra);\n          }\n          dist--;\n          code = d_code(dist);\n          send_code(s, code, dtree);\n          extra = extra_dbits[code];\n          if (extra !== 0) {\n            dist -= base_dist[code];\n            send_bits(s, dist, extra);\n          }\n        }\n      } while (lx < s.last_lit);\n    }\n    send_code(s, END_BLOCK, ltree);\n  }\n  function build_tree(s, desc) {\n    var tree = desc.dyn_tree;\n    var stree = desc.stat_desc.static_tree;\n    var has_stree = desc.stat_desc.has_stree;\n    var elems = desc.stat_desc.elems;\n    var n,\n        m;\n    var max_code = -1;\n    var node;\n    s.heap_len = 0;\n    s.heap_max = HEAP_SIZE;\n    for (n = 0; n < elems; n++) {\n      if (tree[n * 2] !== 0) {\n        s.heap[++s.heap_len] = max_code = n;\n        s.depth[n] = 0;\n      } else {\n        tree[n * 2 + 1] = 0;\n      }\n    }\n    while (s.heap_len < 2) {\n      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n      tree[node * 2] = 1;\n      s.depth[node] = 0;\n      s.opt_len--;\n      if (has_stree) {\n        s.static_len -= stree[node * 2 + 1];\n      }\n    }\n    desc.max_code = max_code;\n    for (n = (s.heap_len >> 1); n >= 1; n--) {\n      pqdownheap(s, tree, n);\n    }\n    node = elems;\n    do {\n      n = s.heap[1];\n      s.heap[1] = s.heap[s.heap_len--];\n      pqdownheap(s, tree, 1);\n      m = s.heap[1];\n      s.heap[--s.heap_max] = n;\n      s.heap[--s.heap_max] = m;\n      tree[node * 2] = tree[n * 2] + tree[m * 2];\n      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n      tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n      s.heap[1] = node++;\n      pqdownheap(s, tree, 1);\n    } while (s.heap_len >= 2);\n    s.heap[--s.heap_max] = s.heap[1];\n    gen_bitlen(s, desc);\n    gen_codes(tree, max_code, s.bl_count);\n  }\n  function scan_tree(s, tree, max_code) {\n    var n;\n    var prevlen = -1;\n    var curlen;\n    var nextlen = tree[0 * 2 + 1];\n    var count = 0;\n    var max_count = 7;\n    var min_count = 4;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    tree[(max_code + 1) * 2 + 1] = 0xffff;\n    for (n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[(n + 1) * 2 + 1];\n      if (++count < max_count && curlen === nextlen) {\n        continue;\n      } else if (count < min_count) {\n        s.bl_tree[curlen * 2] += count;\n      } else if (curlen !== 0) {\n        if (curlen !== prevlen) {\n          s.bl_tree[curlen * 2]++;\n        }\n        s.bl_tree[REP_3_6 * 2]++;\n      } else if (count <= 10) {\n        s.bl_tree[REPZ_3_10 * 2]++;\n      } else {\n        s.bl_tree[REPZ_11_138 * 2]++;\n      }\n      count = 0;\n      prevlen = curlen;\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen === nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n  function send_tree(s, tree, max_code) {\n    var n;\n    var prevlen = -1;\n    var curlen;\n    var nextlen = tree[0 * 2 + 1];\n    var count = 0;\n    var max_count = 7;\n    var min_count = 4;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    for (n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[(n + 1) * 2 + 1];\n      if (++count < max_count && curlen === nextlen) {\n        continue;\n      } else if (count < min_count) {\n        do {\n          send_code(s, curlen, s.bl_tree);\n        } while (--count !== 0);\n      } else if (curlen !== 0) {\n        if (curlen !== prevlen) {\n          send_code(s, curlen, s.bl_tree);\n          count--;\n        }\n        send_code(s, REP_3_6, s.bl_tree);\n        send_bits(s, count - 3, 2);\n      } else if (count <= 10) {\n        send_code(s, REPZ_3_10, s.bl_tree);\n        send_bits(s, count - 3, 3);\n      } else {\n        send_code(s, REPZ_11_138, s.bl_tree);\n        send_bits(s, count - 11, 7);\n      }\n      count = 0;\n      prevlen = curlen;\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen === nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n  function build_bl_tree(s) {\n    var max_blindex;\n    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n    build_tree(s, s.bl_desc);\n    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n      if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {\n        break;\n      }\n    }\n    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    return max_blindex;\n  }\n  function send_all_trees(s, lcodes, dcodes, blcodes) {\n    var rank;\n    send_bits(s, lcodes - 257, 5);\n    send_bits(s, dcodes - 1, 5);\n    send_bits(s, blcodes - 4, 4);\n    for (rank = 0; rank < blcodes; rank++) {\n      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);\n    }\n    send_tree(s, s.dyn_ltree, lcodes - 1);\n    send_tree(s, s.dyn_dtree, dcodes - 1);\n  }\n  function detect_data_type(s) {\n    var black_mask = 0xf3ffc07f;\n    var n;\n    for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n      if ((black_mask & 1) && (s.dyn_ltree[n * 2] !== 0)) {\n        return Z_BINARY;\n      }\n    }\n    if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {\n      return Z_TEXT;\n    }\n    for (n = 32; n < LITERALS; n++) {\n      if (s.dyn_ltree[n * 2] !== 0) {\n        return Z_TEXT;\n      }\n    }\n    return Z_BINARY;\n  }\n  var static_init_done = false;\n  function _tr_init(s) {\n    if (!static_init_done) {\n      tr_static_init();\n      static_init_done = true;\n    }\n    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n    init_block(s);\n  }\n  function _tr_stored_block(s, buf, stored_len, last) {\n    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);\n    copy_block(s, buf, stored_len, true);\n  }\n  function _tr_align(s) {\n    send_bits(s, STATIC_TREES << 1, 3);\n    send_code(s, END_BLOCK, static_ltree);\n    bi_flush(s);\n  }\n  function _tr_flush_block(s, buf, stored_len, last) {\n    var opt_lenb,\n        static_lenb;\n    var max_blindex = 0;\n    if (s.level > 0) {\n      if (s.strm.data_type === Z_UNKNOWN) {\n        s.strm.data_type = detect_data_type(s);\n      }\n      build_tree(s, s.l_desc);\n      build_tree(s, s.d_desc);\n      max_blindex = build_bl_tree(s);\n      opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n      static_lenb = (s.static_len + 3 + 7) >>> 3;\n      if (static_lenb <= opt_lenb) {\n        opt_lenb = static_lenb;\n      }\n    } else {\n      opt_lenb = static_lenb = stored_len + 5;\n    }\n    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n      _tr_stored_block(s, buf, stored_len, last);\n    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n      compress_block(s, static_ltree, static_dtree);\n    } else {\n      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n      compress_block(s, s.dyn_ltree, s.dyn_dtree);\n    }\n    init_block(s);\n    if (last) {\n      bi_windup(s);\n    }\n  }\n  function _tr_tally(s, dist, lc) {\n    s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;\n    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n    s.last_lit++;\n    if (dist === 0) {\n      s.dyn_ltree[lc * 2]++;\n    } else {\n      s.matches++;\n      dist--;\n      s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;\n      s.dyn_dtree[d_code(dist) * 2]++;\n    }\n    return (s.last_lit === s.lit_bufsize - 1);\n  }\n  exports._tr_init = _tr_init;\n  exports._tr_stored_block = _tr_stored_block;\n  exports._tr_flush_block = _tr_flush_block;\n  exports._tr_tally = _tr_tally;\n  exports._tr_align = _tr_align;\n})(require('process'));\n"]}