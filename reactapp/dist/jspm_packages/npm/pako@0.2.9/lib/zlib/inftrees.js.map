{"version":3,"sources":["../../../../../../jspm_packages/npm/pako@0.2.9/lib/zlib/inftrees.js"],"names":["process","utils","require","MAXBITS","ENOUGH_LENS","ENOUGH_DISTS","CODES","LENS","DISTS","lbase","lext","dbase","dext","module","exports","inflate_table","type","lens","lens_index","codes","table","table_index","work","opts","bits","len","sym","min","max","root","curr","drop","left","used","huff","incr","fill","low","mask","next","base","base_index","end","count","Buf16","offs","extra","extra_index","here_bits","here_op","here_val","i"],"mappings":"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","file":"inftrees.js","sourcesContent":["/* */ \n(function(process) {\n  'use strict';\n  var utils = require('../utils/common');\n  var MAXBITS = 15;\n  var ENOUGH_LENS = 852;\n  var ENOUGH_DISTS = 592;\n  var CODES = 0;\n  var LENS = 1;\n  var DISTS = 2;\n  var lbase = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];\n  var lext = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];\n  var dbase = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];\n  var dext = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];\n  module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {\n    var bits = opts.bits;\n    var len = 0;\n    var sym = 0;\n    var min = 0,\n        max = 0;\n    var root = 0;\n    var curr = 0;\n    var drop = 0;\n    var left = 0;\n    var used = 0;\n    var huff = 0;\n    var incr;\n    var fill;\n    var low;\n    var mask;\n    var next;\n    var base = null;\n    var base_index = 0;\n    var end;\n    var count = new utils.Buf16(MAXBITS + 1);\n    var offs = new utils.Buf16(MAXBITS + 1);\n    var extra = null;\n    var extra_index = 0;\n    var here_bits,\n        here_op,\n        here_val;\n    for (len = 0; len <= MAXBITS; len++) {\n      count[len] = 0;\n    }\n    for (sym = 0; sym < codes; sym++) {\n      count[lens[lens_index + sym]]++;\n    }\n    root = bits;\n    for (max = MAXBITS; max >= 1; max--) {\n      if (count[max] !== 0) {\n        break;\n      }\n    }\n    if (root > max) {\n      root = max;\n    }\n    if (max === 0) {\n      table[table_index++] = (1 << 24) | (64 << 16) | 0;\n      table[table_index++] = (1 << 24) | (64 << 16) | 0;\n      opts.bits = 1;\n      return 0;\n    }\n    for (min = 1; min < max; min++) {\n      if (count[min] !== 0) {\n        break;\n      }\n    }\n    if (root < min) {\n      root = min;\n    }\n    left = 1;\n    for (len = 1; len <= MAXBITS; len++) {\n      left <<= 1;\n      left -= count[len];\n      if (left < 0) {\n        return -1;\n      }\n    }\n    if (left > 0 && (type === CODES || max !== 1)) {\n      return -1;\n    }\n    offs[1] = 0;\n    for (len = 1; len < MAXBITS; len++) {\n      offs[len + 1] = offs[len] + count[len];\n    }\n    for (sym = 0; sym < codes; sym++) {\n      if (lens[lens_index + sym] !== 0) {\n        work[offs[lens[lens_index + sym]]++] = sym;\n      }\n    }\n    if (type === CODES) {\n      base = extra = work;\n      end = 19;\n    } else if (type === LENS) {\n      base = lbase;\n      base_index -= 257;\n      extra = lext;\n      extra_index -= 257;\n      end = 256;\n    } else {\n      base = dbase;\n      extra = dext;\n      end = -1;\n    }\n    huff = 0;\n    sym = 0;\n    len = min;\n    next = table_index;\n    curr = root;\n    drop = 0;\n    low = -1;\n    used = 1 << root;\n    mask = used - 1;\n    if ((type === LENS && used > ENOUGH_LENS) || (type === DISTS && used > ENOUGH_DISTS)) {\n      return 1;\n    }\n    var i = 0;\n    for (; ; ) {\n      i++;\n      here_bits = len - drop;\n      if (work[sym] < end) {\n        here_op = 0;\n        here_val = work[sym];\n      } else if (work[sym] > end) {\n        here_op = extra[extra_index + work[sym]];\n        here_val = base[base_index + work[sym]];\n      } else {\n        here_op = 32 + 64;\n        here_val = 0;\n      }\n      incr = 1 << (len - drop);\n      fill = 1 << curr;\n      min = fill;\n      do {\n        fill -= incr;\n        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;\n      } while (fill !== 0);\n      incr = 1 << (len - 1);\n      while (huff & incr) {\n        incr >>= 1;\n      }\n      if (incr !== 0) {\n        huff &= incr - 1;\n        huff += incr;\n      } else {\n        huff = 0;\n      }\n      sym++;\n      if (--count[len] === 0) {\n        if (len === max) {\n          break;\n        }\n        len = lens[lens_index + work[sym]];\n      }\n      if (len > root && (huff & mask) !== low) {\n        if (drop === 0) {\n          drop = root;\n        }\n        next += min;\n        curr = len - drop;\n        left = 1 << curr;\n        while (curr + drop < max) {\n          left -= count[curr + drop];\n          if (left <= 0) {\n            break;\n          }\n          curr++;\n          left <<= 1;\n        }\n        used += 1 << curr;\n        if ((type === LENS && used > ENOUGH_LENS) || (type === DISTS && used > ENOUGH_DISTS)) {\n          return 1;\n        }\n        low = huff & mask;\n        table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;\n      }\n    }\n    if (huff !== 0) {\n      table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;\n    }\n    opts.bits = root;\n    return 0;\n  };\n})(require('process'));\n"]}