{"version":3,"sources":["../../../../../jspm_packages/npm/fbjs@0.8.15/lib/fetchWithRetries.js"],"names":["process","Promise","require","_objectWithoutProperties","obj","keys","target","i","indexOf","Object","prototype","hasOwnProperty","call","ExecutionEnvironment","sprintf","fetch","warning","DEFAULT_TIMEOUT","DEFAULT_RETRIES","fetchWithRetries","uri","initWithRetries","_ref","fetchTimeout","retryDelays","init","_fetchTimeout","_retryDelays","requestsAttempted","requestStartTime","resolve","reject","sendTimedRequest","Date","now","isRequestAlive","request","requestTimeout","setTimeout","shouldRetry","env","NODE_ENV","retryRequest","Error","then","response","clearTimeout","status","error","retryDelay","retryStartTime","attempt","canUseDOM","length","module","exports"],"mappings":"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","file":"fetchWithRetries.js","sourcesContent":["/* */ \n(function(process) {\n  'use strict';\n  var Promise = require('./Promise');\n  function _objectWithoutProperties(obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0)\n        continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i))\n        continue;\n      target[i] = obj[i];\n    }\n    return target;\n  }\n  var ExecutionEnvironment = require('./ExecutionEnvironment');\n  var sprintf = require('./sprintf');\n  var fetch = require('./fetch');\n  var warning = require('./warning');\n  var DEFAULT_TIMEOUT = 15000;\n  var DEFAULT_RETRIES = [1000, 3000];\n  function fetchWithRetries(uri, initWithRetries) {\n    var _ref = initWithRetries || {},\n        fetchTimeout = _ref.fetchTimeout,\n        retryDelays = _ref.retryDelays,\n        init = _objectWithoutProperties(_ref, ['fetchTimeout', 'retryDelays']);\n    var _fetchTimeout = fetchTimeout != null ? fetchTimeout : DEFAULT_TIMEOUT;\n    var _retryDelays = retryDelays != null ? retryDelays : DEFAULT_RETRIES;\n    var requestsAttempted = 0;\n    var requestStartTime = 0;\n    return new Promise(function(resolve, reject) {\n      function sendTimedRequest() {\n        requestsAttempted++;\n        requestStartTime = Date.now();\n        var isRequestAlive = true;\n        var request = fetch(uri, init);\n        var requestTimeout = setTimeout(function() {\n          isRequestAlive = false;\n          if (shouldRetry(requestsAttempted)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'fetchWithRetries: HTTP timeout, retrying.') : void 0;\n            retryRequest();\n          } else {\n            reject(new Error(sprintf('fetchWithRetries(): Failed to get response from server, ' + 'tried %s times.', requestsAttempted)));\n          }\n        }, _fetchTimeout);\n        request.then(function(response) {\n          clearTimeout(requestTimeout);\n          if (isRequestAlive) {\n            if (response.status >= 200 && response.status < 300) {\n              resolve(response);\n            } else if (shouldRetry(requestsAttempted)) {\n              process.env.NODE_ENV !== 'production' ? warning(false, 'fetchWithRetries: HTTP error, retrying.') : void 0, retryRequest();\n            } else {\n              var error = new Error(sprintf('fetchWithRetries(): Still no successful response after ' + '%s retries, giving up.', requestsAttempted));\n              error.response = response;\n              reject(error);\n            }\n          }\n        })['catch'](function(error) {\n          clearTimeout(requestTimeout);\n          if (shouldRetry(requestsAttempted)) {\n            retryRequest();\n          } else {\n            reject(error);\n          }\n        });\n      }\n      function retryRequest() {\n        var retryDelay = _retryDelays[requestsAttempted - 1];\n        var retryStartTime = requestStartTime + retryDelay;\n        setTimeout(sendTimedRequest, retryStartTime - Date.now());\n      }\n      function shouldRetry(attempt) {\n        return ExecutionEnvironment.canUseDOM && attempt <= _retryDelays.length;\n      }\n      sendTimedRequest();\n    });\n  }\n  module.exports = fetchWithRetries;\n})(require('process'));\n"]}