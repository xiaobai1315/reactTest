{"version":3,"sources":["../../../../../jspm_packages/npm/fbjs@0.8.15/lib/EventListener.js"],"names":["process","emptyFunction","require","EventListener","listen","target","eventType","callback","addEventListener","remove","removeEventListener","attachEvent","detachEvent","capture","env","NODE_ENV","console","error","registerDefault","module","exports"],"mappings":";;AAAA;AACA,CAAC,UAASA,OAAT,EAAkB;AACjB;;AACA,MAAIC,gBAAgBC,QAAQ,iBAAR,CAApB;AACA,MAAIC,gBAAgB;AAClBC,YAAQ,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;AACnD,UAAIF,OAAOG,gBAAX,EAA6B;AAC3BH,eAAOG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,KAA7C;AACA,eAAO,EAACE,QAAQ,SAASA,MAAT,GAAkB;AAC9BJ,mBAAOK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,KAAhD;AACD,WAFI,EAAP;AAGD,OALD,MAKO,IAAIF,OAAOM,WAAX,EAAwB;AAC7BN,eAAOM,WAAP,CAAmB,OAAOL,SAA1B,EAAqCC,QAArC;AACA,eAAO,EAACE,QAAQ,SAASA,MAAT,GAAkB;AAC9BJ,mBAAOO,WAAP,CAAmB,OAAON,SAA1B,EAAqCC,QAArC;AACD,WAFI,EAAP;AAGD;AACF,KAbiB;AAclBM,aAAS,SAASA,OAAT,CAAiBR,MAAjB,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;AACrD,UAAIF,OAAOG,gBAAX,EAA6B;AAC3BH,eAAOG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,IAA7C;AACA,eAAO,EAACE,QAAQ,SAASA,MAAT,GAAkB;AAC9BJ,mBAAOK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,IAAhD;AACD,WAFI,EAAP;AAGD,OALD,MAKO;AACL,YAAIP,QAAQc,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,kBAAQC,KAAR,CAAc,iEAAiE,oEAAjE,GAAwI,+BAAtJ;AACD;AACD,eAAO,EAACR,QAAQR,aAAT,EAAP;AACD;AACF,KA1BiB;AA2BlBiB,qBAAiB,SAASA,eAAT,GAA2B,CAAE;AA3B5B,GAApB;AA6BAC,SAAOC,OAAP,GAAiBjB,aAAjB;AACD,CAjCD,EAiCGD,QAAQ,SAAR,CAjCH","file":"EventListener.js","sourcesContent":["/* */ \n(function(process) {\n  'use strict';\n  var emptyFunction = require('./emptyFunction');\n  var EventListener = {\n    listen: function listen(target, eventType, callback) {\n      if (target.addEventListener) {\n        target.addEventListener(eventType, callback, false);\n        return {remove: function remove() {\n            target.removeEventListener(eventType, callback, false);\n          }};\n      } else if (target.attachEvent) {\n        target.attachEvent('on' + eventType, callback);\n        return {remove: function remove() {\n            target.detachEvent('on' + eventType, callback);\n          }};\n      }\n    },\n    capture: function capture(target, eventType, callback) {\n      if (target.addEventListener) {\n        target.addEventListener(eventType, callback, true);\n        return {remove: function remove() {\n            target.removeEventListener(eventType, callback, true);\n          }};\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n        }\n        return {remove: emptyFunction};\n      }\n    },\n    registerDefault: function registerDefault() {}\n  };\n  module.exports = EventListener;\n})(require('process'));\n"]}