{"version":3,"sources":["../../../../../jspm_packages/npm/browserify-zlib@0.1.4/test/test-zlib-convenience-methods.js"],"names":["Buffer","tape","require","zlib","expect","opts","level","chunkSize","forEach","method","join","t","plan","err","result","deepEqual"],"mappings":";;AAAA;AACA,CAAC,UAASA,MAAT,EAAiB;AAChB,MAAIC,OAAOC,QAAQ,MAAR,CAAX;AACA,MAAIC,OAAOD,QAAQ,cAAR,CAAX;AACA,MAAIE,SAAS,0BAAb;AACA,MAAIC,OAAO;AACTC,WAAO,CADE;AAETC,eAAW;AAFF,GAAX;AAIA,GAAC,CAAC,MAAD,EAAS,QAAT,CAAD,EAAqB,CAAC,MAAD,EAAS,OAAT,CAArB,EAAwC,CAAC,SAAD,EAAY,SAAZ,CAAxC,EAAgE,CAAC,YAAD,EAAe,YAAf,CAAhE,EAA8FC,OAA9F,CAAsG,UAASC,MAAT,EAAiB;AACrHR,SAAKQ,OAAOC,IAAP,CAAY,GAAZ,CAAL,EAAuB,UAASC,CAAT,EAAY;AACjCA,QAAEC,IAAF,CAAO,CAAP;AACAT,WAAKM,OAAO,CAAP,CAAL,EAAgBL,MAAhB,EAAwBC,IAAxB,EAA8B,UAASQ,GAAT,EAAcC,MAAd,EAAsB;AAClDX,aAAKM,OAAO,CAAP,CAAL,EAAgBK,MAAhB,EAAwBT,IAAxB,EAA8B,UAASQ,GAAT,EAAcC,MAAd,EAAsB;AAClDH,YAAEI,SAAF,CAAYD,MAAZ,EAAoB,IAAId,MAAJ,CAAWI,MAAX,CAApB,EAAwC,sCAAsCK,OAAO,CAAP,CAAtC,GAAkD,GAAlD,GAAwDA,OAAO,CAAP,CAAxD,GAAoE,gBAA5G;AACD,SAFD;AAGD,OAJD;AAKAN,WAAKM,OAAO,CAAP,CAAL,EAAgBL,MAAhB,EAAwB,UAASS,GAAT,EAAcC,MAAd,EAAsB;AAC5CX,aAAKM,OAAO,CAAP,CAAL,EAAgBK,MAAhB,EAAwB,UAASD,GAAT,EAAcC,MAAd,EAAsB;AAC5CH,YAAEI,SAAF,CAAYD,MAAZ,EAAoB,IAAId,MAAJ,CAAWI,MAAX,CAApB,EAAwC,sCAAsCK,OAAO,CAAP,CAAtC,GAAkD,GAAlD,GAAwDA,OAAO,CAAP,CAAxD,GAAoE,mBAA5G;AACD,SAFD;AAGD,OAJD;AAKA,UAAIK,SAASX,KAAKM,OAAO,CAAP,IAAY,MAAjB,EAAyBL,MAAzB,EAAiCC,IAAjC,CAAb;AACAS,eAASX,KAAKM,OAAO,CAAP,IAAY,MAAjB,EAAyBK,MAAzB,EAAiCT,IAAjC,CAAT;AACAM,QAAEI,SAAF,CAAYD,MAAZ,EAAoB,IAAId,MAAJ,CAAWI,MAAX,CAApB,EAAwC,sCAAsCK,OAAO,CAAP,CAAtC,GAAkD,GAAlD,GAAwDA,OAAO,CAAP,CAAxD,GAAoE,gBAA5G;AACAK,eAASX,KAAKM,OAAO,CAAP,IAAY,MAAjB,EAAyBL,MAAzB,CAAT;AACAU,eAASX,KAAKM,OAAO,CAAP,IAAY,MAAjB,EAAyBK,MAAzB,CAAT;AACAH,QAAEI,SAAF,CAAYD,MAAZ,EAAoB,IAAId,MAAJ,CAAWI,MAAX,CAApB,EAAwC,sCAAsCK,OAAO,CAAP,CAAtC,GAAkD,GAAlD,GAAwDA,OAAO,CAAP,CAAxD,GAAoE,mBAA5G;AACD,KAlBD;AAmBD,GApBD;AAqBD,CA7BD,EA6BGP,QAAQ,QAAR,EAAkBF,MA7BrB","file":"test-zlib-convenience-methods.js","sourcesContent":["/* */ \n(function(Buffer) {\n  var tape = require('tape');\n  var zlib = require('../src/index');\n  var expect = 'blahblahblahblahblahblah';\n  var opts = {\n    level: 9,\n    chunkSize: 1024\n  };\n  [['gzip', 'gunzip'], ['gzip', 'unzip'], ['deflate', 'inflate'], ['deflateRaw', 'inflateRaw']].forEach(function(method) {\n    tape(method.join(' '), function(t) {\n      t.plan(4);\n      zlib[method[0]](expect, opts, function(err, result) {\n        zlib[method[1]](result, opts, function(err, result) {\n          t.deepEqual(result, new Buffer(expect), 'Should get original string after ' + method[0] + '/' + method[1] + ' with options.');\n        });\n      });\n      zlib[method[0]](expect, function(err, result) {\n        zlib[method[1]](result, function(err, result) {\n          t.deepEqual(result, new Buffer(expect), 'Should get original string after ' + method[0] + '/' + method[1] + ' without options.');\n        });\n      });\n      var result = zlib[method[0] + 'Sync'](expect, opts);\n      result = zlib[method[1] + 'Sync'](result, opts);\n      t.deepEqual(result, new Buffer(expect), 'Should get original string after ' + method[0] + '/' + method[1] + ' with options.');\n      result = zlib[method[0] + 'Sync'](expect);\n      result = zlib[method[1] + 'Sync'](result);\n      t.deepEqual(result, new Buffer(expect), 'Should get original string after ' + method[0] + '/' + method[1] + ' without options.');\n    });\n  });\n})(require('buffer').Buffer);\n"]}