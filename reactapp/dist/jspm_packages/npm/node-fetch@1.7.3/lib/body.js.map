{"version":3,"sources":["../../../../../jspm_packages/npm/node-fetch@1.7.3/lib/body.js"],"names":["Buffer","convert","require","bodyStream","PassThrough","FetchError","module","exports","Body","body","opts","bodyUsed","size","timeout","_raw","_abort","prototype","json","self","_decode","then","buffer","JSON","parse","toString","err","Promise","reject","url","message","text","Error","_bytes","resolve","resTimeout","length","_convert","setTimeout","on","chunk","push","clearTimeout","encoding","ct","headers","get","charset","res","str","test","concat","exec","i","substr","pop","_clone","instance","p1","p2","getBoundary","pipe","global"],"mappings":"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","file":"body.js","sourcesContent":["/* */ \n(function(Buffer) {\n  var convert = require('encoding').convert;\n  var bodyStream = require('is-stream');\n  var PassThrough = require('stream').PassThrough;\n  var FetchError = require('./fetch-error');\n  module.exports = Body;\n  function Body(body, opts) {\n    opts = opts || {};\n    this.body = body;\n    this.bodyUsed = false;\n    this.size = opts.size || 0;\n    this.timeout = opts.timeout || 0;\n    this._raw = [];\n    this._abort = false;\n  }\n  Body.prototype.json = function() {\n    var self = this;\n    return this._decode().then(function(buffer) {\n      try {\n        return JSON.parse(buffer.toString());\n      } catch (err) {\n        return Body.Promise.reject(new FetchError('invalid json response body at ' + self.url + ' reason: ' + err.message, 'invalid-json'));\n      }\n    });\n  };\n  Body.prototype.text = function() {\n    return this._decode().then(function(buffer) {\n      return buffer.toString();\n    });\n  };\n  Body.prototype.buffer = function() {\n    return this._decode();\n  };\n  Body.prototype._decode = function() {\n    var self = this;\n    if (this.bodyUsed) {\n      return Body.Promise.reject(new Error('body used already for: ' + this.url));\n    }\n    this.bodyUsed = true;\n    this._bytes = 0;\n    this._abort = false;\n    this._raw = [];\n    return new Body.Promise(function(resolve, reject) {\n      var resTimeout;\n      if (typeof self.body === 'string') {\n        self._bytes = self.body.length;\n        self._raw = [new Buffer(self.body)];\n        return resolve(self._convert());\n      }\n      if (self.body instanceof Buffer) {\n        self._bytes = self.body.length;\n        self._raw = [self.body];\n        return resolve(self._convert());\n      }\n      if (self.timeout) {\n        resTimeout = setTimeout(function() {\n          self._abort = true;\n          reject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));\n        }, self.timeout);\n      }\n      self.body.on('error', function(err) {\n        reject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));\n      });\n      self.body.on('data', function(chunk) {\n        if (self._abort || chunk === null) {\n          return;\n        }\n        if (self.size && self._bytes + chunk.length > self.size) {\n          self._abort = true;\n          reject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));\n          return;\n        }\n        self._bytes += chunk.length;\n        self._raw.push(chunk);\n      });\n      self.body.on('end', function() {\n        if (self._abort) {\n          return;\n        }\n        clearTimeout(resTimeout);\n        resolve(self._convert());\n      });\n    });\n  };\n  Body.prototype._convert = function(encoding) {\n    encoding = encoding || 'utf-8';\n    var ct = this.headers.get('content-type');\n    var charset = 'utf-8';\n    var res,\n        str;\n    if (ct) {\n      if (!/text\\/html|text\\/plain|\\+xml|\\/xml/i.test(ct)) {\n        return Buffer.concat(this._raw);\n      }\n      res = /charset=([^;]*)/i.exec(ct);\n    }\n    if (!res && this._raw.length > 0) {\n      for (var i = 0; i < this._raw.length; i++) {\n        str += this._raw[i].toString();\n        if (str.length > 1024) {\n          break;\n        }\n      }\n      str = str.substr(0, 1024);\n    }\n    if (!res && str) {\n      res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n    }\n    if (!res && str) {\n      res = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n      if (res) {\n        res = /charset=(.*)/i.exec(res.pop());\n      }\n    }\n    if (!res && str) {\n      res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n    }\n    if (res) {\n      charset = res.pop();\n      if (charset === 'gb2312' || charset === 'gbk') {\n        charset = 'gb18030';\n      }\n    }\n    return convert(Buffer.concat(this._raw), encoding, charset);\n  };\n  Body.prototype._clone = function(instance) {\n    var p1,\n        p2;\n    var body = instance.body;\n    if (instance.bodyUsed) {\n      throw new Error('cannot clone body after it is used');\n    }\n    if (bodyStream(body) && typeof body.getBoundary !== 'function') {\n      p1 = new PassThrough();\n      p2 = new PassThrough();\n      body.pipe(p1);\n      body.pipe(p2);\n      instance.body = p1;\n      body = p2;\n    }\n    return body;\n  };\n  Body.Promise = global.Promise;\n})(require('buffer').Buffer);\n"]}