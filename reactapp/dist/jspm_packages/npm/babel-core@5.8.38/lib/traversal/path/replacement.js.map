{"version":3,"sources":["../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/traversal/path/replacement.js"],"names":["exports","__esModule","replaceWithMultiple","replaceWithSourceString","replaceWith","replaceExpressionWithStatements","replaceInline","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_interopRequireDefault","_helpersCodeFrame","require","_helpersCodeFrame2","_index","_index2","_index3","_index4","_helpersParse","_helpersParse2","_types","t","hoistVariablesVisitor","Function","skip","VariableDeclaration","node","parent","scope","kind","bindings","getBindingIdentifiers","push","id","exprs","_arr","declarations","_i","length","declar","init","expressionStatement","assignmentExpression","nodes","resync","_verifyNodeList","inheritLeadingComments","inheritTrailingComments","container","insertAfter","dangerouslyRemove","replacement","err","loc","message","line","column","program","body","expression","removeProperties","whateverAllowed","removed","Error","isProgram","Array","isArray","isNodeType","isExpression","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","isStatement","oldNode","inheritsComments","type","setScope","toSequenceExpression","functionExpression","blockStatement","shadow","callExpression","traverse","last","get","getCompletionRecords","_arr2","_i2","lastNode","isExpressionStatement","loop","findParent","path","isLoop","uid","generateDeclaredUidIdentifier","pushContainer","returnStatement","_containerInsertAfter"],"mappings":"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","file":"replacement.js","sourcesContent":["/* */ \n\"format cjs\";\n\"use strict\";\n\nexports.__esModule = true;\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _helpersCodeFrame = require(\"../../helpers/code-frame\");\n\nvar _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _helpersParse = require(\"../../helpers/parse\");\n\nvar _helpersParse2 = _interopRequireDefault(_helpersParse);\n\nvar _types = require(\"../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * [Please add a description.]\n */\n\nvar hoistVariablesVisitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  Function: function Function() {\n    this.skip();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  VariableDeclaration: function VariableDeclaration(node, parent, scope) {\n    if (node.kind !== \"var\") return;\n\n    var bindings = this.getBindingIdentifiers();\n    for (var key in bindings) {\n      scope.push({ id: bindings[key] });\n    }\n\n    var exprs = [];\n\n    var _arr = node.declarations;\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var declar = _arr[_i];\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    return exprs;\n  }\n};\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n  if (!this.node) this.dangerouslyRemove();\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = _helpersParse2[\"default\"](replacement);\n  } catch (err) {\n    var loc = err.loc;\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + _helpersCodeFrame2[\"default\"](replacement, loc.line, loc.column + 1);\n    }\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n  _index2[\"default\"].removeProperties(replacement);\n  return this.replaceWith(replacement);\n}\n\n/**\n * Replace the current node with another.\n */\n\nfunction replaceWith(replacement, whateverAllowed) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4[\"default\"]) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.dangerouslyRemove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  // normalise inserting an entire AST\n  if (t.isProgram(replacement) && !this.isProgram()) {\n    replacement = replacement.body;\n    whateverAllowed = true;\n  }\n\n  if (Array.isArray(replacement)) {\n    if (whateverAllowed) {\n      return this.replaceWithMultiple(replacement);\n    } else {\n      throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n    }\n  }\n\n  if (typeof replacement === \"string\") {\n    // triggers an error\n    return this.replaceWithSourceString();\n  }\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = t.expressionStatement(replacement);\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canSwapBetweenExpressionAndStatement(replacement)) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n  if (oldNode) t.inheritsComments(replacement, oldNode);\n\n  // replace the node\n  this.node = this.container[this.key] = replacement;\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n\n    // add implicit returns to all ending expression statements\n    var last = this.get(\"callee\").getCompletionRecords();\n    var _arr2 = last;\n    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n      var lastNode = _arr2[_i2];\n      if (!lastNode.isExpressionStatement()) continue;\n\n      var loop = lastNode.findParent(function (path) {\n        return path.isLoop();\n      });\n      if (loop) {\n        var uid = this.get(\"callee\").scope.generateDeclaredUidIdentifier(\"ret\");\n        this.get(\"callee.body\").pushContainer(\"body\", t.returnStatement(uid));\n        lastNode.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, lastNode.node.expression));\n      } else {\n        lastNode.replaceWith(t.returnStatement(lastNode.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      this._containerInsertAfter(nodes);\n      return this.dangerouslyRemove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]}