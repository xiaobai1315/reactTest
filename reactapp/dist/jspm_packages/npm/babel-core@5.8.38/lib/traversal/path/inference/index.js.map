{"version":3,"sources":["../../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/traversal/path/inference/index.js"],"names":["exports","__esModule","getTypeAnnotation","_getTypeAnnotation","isBaseType","couldBeBaseType","baseTypeStrictlyMatches","isGenericType","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_inferers","require","inferers","_types","t","typeAnnotation","type","anyTypeAnnotation","isTypeAnnotation","node","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","stringTypeAnnotation","isForOfStatement","voidTypeAnnotation","inferer","validParent","baseName","soft","_isBaseType","isStringTypeAnnotation","isNumberTypeAnnotation","isBooleanTypeAnnotation","isAnyTypeAnnotation","isMixedTypeAnnotation","isVoidTypeAnnotation","Error","name","isUnionTypeAnnotation","_arr","types","_i","length","type2","right","left","isFlowBaseAnnotation","genericName","isGenericTypeAnnotation","isIdentifier","id"],"mappings":"AAAA;AACA;AACA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,iBAAR,GAA4BA,iBAA5B;AACAF,QAAQG,kBAAR,GAA6BA,kBAA7B;AACAH,QAAQI,UAAR,GAAqBA,UAArB;AACAJ,QAAQK,eAAR,GAA0BA,eAA1B;AACAL,QAAQM,uBAAR,GAAkCA,uBAAlC;AACAN,QAAQO,aAAR,GAAwBA,aAAxB;AACA;;AAEA,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIR,UAAf,EAA2B;AAAE,WAAOQ,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIC,SAAS,EAAb,CAAiB,IAAID,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AAAE,YAAIG,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,GAA1C,CAAJ,EAAoDD,OAAOC,GAAP,IAAcF,IAAIE,GAAJ,CAAd;AAAyB;AAAE,KAACD,OAAO,SAAP,IAAoBD,GAApB,CAAyB,OAAOC,MAAP;AAAgB;AAAE;;AAEhR,IAAIM,YAAYC,QAAQ,YAAR,CAAhB;;AAEA,IAAIC,WAAWV,wBAAwBQ,SAAxB,CAAf;;AAEA,IAAIG,SAASF,QAAQ,gBAAR,CAAb;;AAEA,IAAIG,IAAIZ,wBAAwBW,MAAxB,CAAR;;AAEA;;;;AAIA,SAASjB,iBAAT,GAA6B;AAC3B,MAAI,KAAKmB,cAAT,EAAyB,OAAO,KAAKA,cAAZ;;AAEzB,MAAIC,OAAO,KAAKnB,kBAAL,MAA6BiB,EAAEG,iBAAF,EAAxC;AACA,MAAIH,EAAEI,gBAAF,CAAmBF,IAAnB,CAAJ,EAA8BA,OAAOA,KAAKD,cAAZ;AAC9B,SAAO,KAAKA,cAAL,GAAsBC,IAA7B;AACD;;AAED;;;;AAIA,SAASnB,kBAAT,GAA8B;AAC5B,MAAIsB,OAAO,KAAKA,IAAhB;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT;AACA,QAAI,KAAKd,GAAL,KAAa,MAAb,IAAuB,KAAKe,UAAL,CAAgBC,oBAAhB,EAA3B,EAAmE;AACjE,UAAIC,SAAS,KAAKF,UAAL,CAAgBA,UAA7B;AACA,UAAIG,eAAeD,OAAOF,UAA1B;;AAEA;AACA,UAAIE,OAAOjB,GAAP,KAAe,MAAf,IAAyBkB,aAAaC,gBAAb,EAA7B,EAA8D;AAC5D,eAAOV,EAAEW,oBAAF,EAAP;AACD;;AAED;AACA,UAAIH,OAAOjB,GAAP,KAAe,MAAf,IAAyBkB,aAAaG,gBAAb,EAA7B,EAA8D;AAC5D,eAAOZ,EAAEG,iBAAF,EAAP;AACD;;AAED,aAAOH,EAAEa,kBAAF,EAAP;AACD,KAfD,MAeO;AACL;AACD;AACF;;AAED,MAAIR,KAAKJ,cAAT,EAAyB;AACvB,WAAOI,KAAKJ,cAAZ;AACD;;AAED,MAAIa,UAAUhB,SAASO,KAAKH,IAAd,CAAd;AACA,MAAIY,OAAJ,EAAa;AACX,WAAOA,QAAQnB,IAAR,CAAa,IAAb,EAAmBU,IAAnB,CAAP;AACD;;AAEDS,YAAUhB,SAAS,KAAKQ,UAAL,CAAgBJ,IAAzB,CAAV;AACA,MAAIY,WAAWA,QAAQC,WAAvB,EAAoC;AAClC,WAAO,KAAKT,UAAL,CAAgBxB,iBAAhB,EAAP;AACD;AACF;;AAED;;;;AAIA,SAASE,UAAT,CAAoBgC,QAApB,EAA8BC,IAA9B,EAAoC;AAClC,SAAOC,YAAYF,QAAZ,EAAsB,KAAKlC,iBAAL,EAAtB,EAAgDmC,IAAhD,CAAP;AACD;;AAED;;;;AAIA,SAASC,WAAT,CAAqBF,QAArB,EAA+Bd,IAA/B,EAAqCe,IAArC,EAA2C;AACzC,MAAID,aAAa,QAAjB,EAA2B;AACzB,WAAOhB,EAAEmB,sBAAF,CAAyBjB,IAAzB,CAAP;AACD,GAFD,MAEO,IAAIc,aAAa,QAAjB,EAA2B;AAChC,WAAOhB,EAAEoB,sBAAF,CAAyBlB,IAAzB,CAAP;AACD,GAFM,MAEA,IAAIc,aAAa,SAAjB,EAA4B;AACjC,WAAOhB,EAAEqB,uBAAF,CAA0BnB,IAA1B,CAAP;AACD,GAFM,MAEA,IAAIc,aAAa,KAAjB,EAAwB;AAC7B,WAAOhB,EAAEsB,mBAAF,CAAsBpB,IAAtB,CAAP;AACD,GAFM,MAEA,IAAIc,aAAa,OAAjB,EAA0B;AAC/B,WAAOhB,EAAEuB,qBAAF,CAAwBrB,IAAxB,CAAP;AACD,GAFM,MAEA,IAAIc,aAAa,MAAjB,EAAyB;AAC9B,WAAOhB,EAAEwB,oBAAF,CAAuBtB,IAAvB,CAAP;AACD,GAFM,MAEA;AACL,QAAIe,IAAJ,EAAU;AACR,aAAO,KAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIQ,KAAJ,CAAU,uBAAuBT,QAAjC,CAAN;AACD;AACF;AACF;;AAED;;;;AAIA,SAAS/B,eAAT,CAAyByC,IAAzB,EAA+B;AAC7B,MAAIxB,OAAO,KAAKpB,iBAAL,EAAX;AACA,MAAIkB,EAAEsB,mBAAF,CAAsBpB,IAAtB,CAAJ,EAAiC,OAAO,IAAP;;AAEjC,MAAIF,EAAE2B,qBAAF,CAAwBzB,IAAxB,CAAJ,EAAmC;AACjC,QAAI0B,OAAO1B,KAAK2B,KAAhB;;AAEA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKF,KAAKG,MAA3B,EAAmCD,IAAnC,EAAyC;AACvC,UAAIE,QAAQJ,KAAKE,EAAL,CAAZ;AACA,UAAI9B,EAAEsB,mBAAF,CAAsBU,KAAtB,KAAgCd,YAAYQ,IAAZ,EAAkBM,KAAlB,EAAyB,IAAzB,CAApC,EAAoE;AAClE,eAAO,IAAP;AACD;AACF;AACD,WAAO,KAAP;AACD,GAVD,MAUO;AACL,WAAOd,YAAYQ,IAAZ,EAAkBxB,IAAlB,EAAwB,IAAxB,CAAP;AACD;AACF;;AAED;;;;AAIA,SAAShB,uBAAT,CAAiC+C,KAAjC,EAAwC;AACtC,MAAIC,OAAO,KAAKpD,iBAAL,EAAX;AACAmD,UAAQA,MAAMnD,iBAAN,EAAR;;AAEA,MAAI,CAACkB,EAAEsB,mBAAF,EAAD,IAA4BtB,EAAEmC,oBAAF,CAAuBD,IAAvB,CAAhC,EAA8D;AAC5D,WAAOD,MAAM/B,IAAN,KAAegC,KAAKhC,IAA3B;AACD;AACF;;AAED;;;;AAIA,SAASf,aAAT,CAAuBiD,WAAvB,EAAoC;AAClC,MAAIlC,OAAO,KAAKpB,iBAAL,EAAX;AACA,SAAOkB,EAAEqC,uBAAF,CAA0BnC,IAA1B,KAAmCF,EAAEsC,YAAF,CAAepC,KAAKqC,EAApB,EAAwB,EAAEb,MAAMU,WAAR,EAAxB,CAA1C;AACD","file":"index.js","sourcesContent":["/* */ \n\"format cjs\";\n\"use strict\";\n\nexports.__esModule = true;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _inferers = require(\"./inferers\");\n\nvar inferers = _interopRequireWildcard(_inferers);\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * Infer the type of the current `NodePath`.\n */\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n\n  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\n/**\n * todo: split up this method\n */\n\nfunction _getTypeAnnotation() {\n  var node = this.node;\n\n  if (!node) {\n    // handle initializerless variables, add in checks for loop initializers too\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      var declar = this.parentPath.parentPath;\n      var declarParent = declar.parentPath;\n\n      // for (var NODE in bar) {}\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      // for (var NODE of bar) {}\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  var inferer = inferers[node.type];\n  if (inferer) {\n    return inferer.call(this, node);\n  }\n\n  inferer = inferers[this.parentPath.type];\n  if (inferer && inferer.validParent) {\n    return this.parentPath.getTypeAnnotation();\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(\"Unknown base type \" + baseName);\n    }\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction couldBeBaseType(name) {\n  var type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    var _arr = type.types;\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var type2 = _arr[_i];\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction baseTypeStrictlyMatches(right) {\n  var left = this.getTypeAnnotation();\n  right = right.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation() && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isGenericType(genericName) {\n  var type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });\n}"]}