{"version":3,"sources":["../../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/traversal/path/lib/removal-hooks.js"],"names":["exports","__esModule","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_types","require","t","pre","self","isBlockStatement","isClassBody","node","body","parent","replace","isArrowFunctionExpression","isThrowStatement","replaceWith","identifier","post","removeParent","isWhile","isSwitchCase","isExportDeclaration","isLabeledStatement","listKey","isVariableDeclaration","declarations","length","isExpressionStatement","isIfStatement","dangerouslyRemove","isSequenceExpression","expressions","isBinary","right","left"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACA;;AAEA,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIF,UAAf,EAA2B;AAAE,WAAOE,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIC,SAAS,EAAb,CAAiB,IAAID,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AAAE,YAAIG,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,GAA1C,CAAJ,EAAoDD,OAAOC,GAAP,IAAcF,IAAIE,GAAJ,CAAd;AAAyB;AAAE,KAACD,OAAO,SAAP,IAAoBD,GAApB,CAAyB,OAAOC,MAAP;AAAgB;AAAE;;AAEhR,IAAIM,SAASC,QAAQ,gBAAR,CAAb;;AAEA,IAAIC,IAAIV,wBAAwBQ,MAAxB,CAAR;;AAEA;;;;AAIA,IAAIG,MAAM;;AAEV;;;;AAIA,UAAUC,IAAV,EAAgB;AACd,MAAIA,KAAKT,GAAL,KAAa,MAAb,KAAwBS,KAAKC,gBAAL,MAA2BD,KAAKE,WAAL,EAAnD,CAAJ,EAA4E;AAC1E;AACA;AACA;AACA;AACAF,SAAKG,IAAL,CAAUC,IAAV,GAAiB,EAAjB;AACA,WAAO,IAAP;AACD;AACF,CAfS;;AAiBV;;;;AAIA,UAAUJ,IAAV,EAAgBK,MAAhB,EAAwB;AACtB,MAAIC,UAAU,KAAd;;AAEA;AACA;AACAA,YAAUA,WAAWN,KAAKT,GAAL,KAAa,MAAb,IAAuBc,OAAOE,yBAAP,EAA5C;;AAEA;AACA;AACAD,YAAUA,WAAWN,KAAKT,GAAL,KAAa,UAAb,IAA2Bc,OAAOG,gBAAP,EAAhD;;AAEA,MAAIF,OAAJ,EAAa;AACXN,SAAKS,WAAL,CAAiBX,EAAEY,UAAF,CAAa,WAAb,CAAjB;AACA,WAAO,IAAP;AACD;AACF,CApCS,CAAV;;AAsCAxB,QAAQa,GAAR,GAAcA,GAAd;AACA;;;;AAIA,IAAIY,OAAO;;AAEX;;;;AAIA,UAAUX,IAAV,EAAgBK,MAAhB,EAAwB;AACtB,MAAIO,eAAe,KAAnB;;AAEA;AACA;AACA;AACAA,iBAAeA,gBAAgBZ,KAAKT,GAAL,KAAa,MAAb,KAAwBc,OAAOQ,OAAP,MAAoBR,OAAOS,YAAP,EAA5C,CAA/B;;AAEA;AACA;AACAF,iBAAeA,gBAAgBZ,KAAKT,GAAL,KAAa,aAAb,IAA8Bc,OAAOU,mBAAP,EAA7D;;AAEA;AACA;AACAH,iBAAeA,gBAAgBZ,KAAKT,GAAL,KAAa,MAAb,IAAuBc,OAAOW,kBAAP,EAAtD;;AAEA;AACA;AACAJ,iBAAeA,gBAAgBZ,KAAKiB,OAAL,KAAiB,cAAjB,IAAmCZ,OAAOa,qBAAP,EAAnC,IAAqEb,OAAOF,IAAP,CAAYgB,YAAZ,CAAyBC,MAAzB,KAAoC,CAAxI;;AAEA;AACA;AACAR,iBAAeA,gBAAgBZ,KAAKT,GAAL,KAAa,YAAb,IAA6Bc,OAAOgB,qBAAP,EAA5D;;AAEA;AACA;AACA;AACAT,iBAAeA,gBAAgBZ,KAAKT,GAAL,KAAa,MAAb,IAAuBc,OAAOiB,aAAP,EAAtD;;AAEA,MAAIV,YAAJ,EAAkB;AAChBP,WAAOkB,iBAAP;AACA,WAAO,IAAP;AACD;AACF,CAvCU;;AAyCX;;;;AAIA,UAAUvB,IAAV,EAAgBK,MAAhB,EAAwB;AACtB,MAAIA,OAAOmB,oBAAP,MAAiCnB,OAAOF,IAAP,CAAYsB,WAAZ,CAAwBL,MAAxB,KAAmC,CAAxE,EAA2E;AACzE;AACA;AACA;AACAf,WAAOI,WAAP,CAAmBJ,OAAOF,IAAP,CAAYsB,WAAZ,CAAwB,CAAxB,CAAnB;AACA,WAAO,IAAP;AACD;AACF,CArDU;;AAuDX;;;;AAIA,UAAUzB,IAAV,EAAgBK,MAAhB,EAAwB;AACtB,MAAIA,OAAOqB,QAAP,EAAJ,EAAuB;AACrB;AACA;AACA;AACA,QAAI1B,KAAKT,GAAL,KAAa,MAAjB,EAAyB;AACvBc,aAAOI,WAAP,CAAmBJ,OAAOF,IAAP,CAAYwB,KAA/B;AACD,KAFD,MAEO;AACL;AACAtB,aAAOI,WAAP,CAAmBJ,OAAOF,IAAP,CAAYyB,IAA/B;AACD;AACD,WAAO,IAAP;AACD;AACF,CAxEU,CAAX;AAyEA1C,QAAQyB,IAAR,GAAeA,IAAf","file":"removal-hooks.js","sourcesContent":["/* */ \n\"format cjs\";\n// this file contains hooks that handle ancestry cleanup of parent nodes when removing children\n\n\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * Pre hooks should be used for either rejecting removal or delegating removal\n */\n\nvar pre = [\n\n/**\n * [Please add a description.]\n */\n\nfunction (self) {\n  if (self.key === \"body\" && (self.isBlockStatement() || self.isClassBody())) {\n    // function () NODE\n    // class NODE\n    // attempting to remove a block statement that's someones body so let's just clear all the inner\n    // statements instead\n    self.node.body = [];\n    return true;\n  }\n},\n\n/**\n * [Please add a description.]\n */\n\nfunction (self, parent) {\n  var replace = false;\n\n  // () => NODE;\n  // removing the body of an arrow function\n  replace = replace || self.key === \"body\" && parent.isArrowFunctionExpression();\n\n  // throw NODE;\n  // removing a throw statement argument\n  replace = replace || self.key === \"argument\" && parent.isThrowStatement();\n\n  if (replace) {\n    self.replaceWith(t.identifier(\"undefined\"));\n    return true;\n  }\n}];\n\nexports.pre = pre;\n/**\n * Post hooks should be used for cleaning up parents\n */\n\nvar post = [\n\n/**\n * [Please add a description.]\n */\n\nfunction (self, parent) {\n  var removeParent = false;\n\n  // while (NODE);\n  // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`\n  // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion\n  removeParent = removeParent || self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase());\n\n  // export NODE;\n  // just remove a declaration for an export as this is no longer valid\n  removeParent = removeParent || self.key === \"declaration\" && parent.isExportDeclaration();\n\n  // label: NODE\n  // stray labeled statement with no body\n  removeParent = removeParent || self.key === \"body\" && parent.isLabeledStatement();\n\n  // var NODE;\n  // remove an entire declaration if there are no declarators left\n  removeParent = removeParent || self.listKey === \"declarations\" && parent.isVariableDeclaration() && parent.node.declarations.length === 0;\n\n  // NODE;\n  // remove the entire expression statement if there's no expression\n  removeParent = removeParent || self.key === \"expression\" && parent.isExpressionStatement();\n\n  // if (NODE);\n  // remove the entire if since the consequent is never going to be hit, if there's an alternate then it's already been\n  // handled with the `pre` hook\n  removeParent = removeParent || self.key === \"test\" && parent.isIfStatement();\n\n  if (removeParent) {\n    parent.dangerouslyRemove();\n    return true;\n  }\n},\n\n/**\n * [Please add a description.]\n */\n\nfunction (self, parent) {\n  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n    // (node, NODE);\n    // we've just removed the second element of a sequence expression so let's turn that sequence\n    // expression into a regular expression\n    parent.replaceWith(parent.node.expressions[0]);\n    return true;\n  }\n},\n\n/**\n * [Please add a description.]\n */\n\nfunction (self, parent) {\n  if (parent.isBinary()) {\n    // left + NODE;\n    // NODE + right;\n    // we're in a binary expression, better remove it and replace it with the last expression\n    if (self.key === \"left\") {\n      parent.replaceWith(parent.node.right);\n    } else {\n      // key === \"right\"\n      parent.replaceWith(parent.node.left);\n    }\n    return true;\n  }\n}];\nexports.post = post;"]}