{"version":3,"sources":["../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/generation/generators/statements.js"],"names":["exports","__esModule","WithStatement","IfStatement","ForStatement","WhileStatement","DoWhileStatement","LabeledStatement","TryStatement","CatchClause","SwitchStatement","SwitchCase","DebuggerStatement","VariableDeclaration","VariableDeclarator","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_interopRequireDefault","_repeating","require","_repeating2","_types","t","node","print","keyword","push","plain","object","block","body","test","space","indentOnComments","consequent","alternate","isLast","_inForStatementInit","init","update","buildForXStatement","op","left","right","ForInStatement","ForOfStatement","buildLabelStatement","prefix","arguments","length","undefined","label","terminatorState","startTerminatorless","endTerminatorless","semicolon","ContinueStatement","ReturnStatement","BreakStatement","ThrowStatement","handlers","handler","finalizer","param","discriminant","sequence","cases","indent","addNewlines","leading","cas","newline","parent","kind","hasInits","isFor","_arr","declarations","_i","declar","sep","format","compact","concise","retainLines","list","separator","id","typeAnnotation"],"mappings":"AAAA;AACA;AACA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,aAAR,GAAwBA,aAAxB;AACAF,QAAQG,WAAR,GAAsBA,WAAtB;AACAH,QAAQI,YAAR,GAAuBA,YAAvB;AACAJ,QAAQK,cAAR,GAAyBA,cAAzB;AACAL,QAAQM,gBAAR,GAA2BA,gBAA3B;AACAN,QAAQO,gBAAR,GAA2BA,gBAA3B;AACAP,QAAQQ,YAAR,GAAuBA,YAAvB;AACAR,QAAQS,WAAR,GAAsBA,WAAtB;AACAT,QAAQU,eAAR,GAA0BA,eAA1B;AACAV,QAAQW,UAAR,GAAqBA,UAArB;AACAX,QAAQY,iBAAR,GAA4BA,iBAA5B;AACAZ,QAAQa,mBAAR,GAA8BA,mBAA9B;AACAb,QAAQc,kBAAR,GAA6BA,kBAA7B;AACA;;AAEA,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIf,UAAf,EAA2B;AAAE,WAAOe,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIC,SAAS,EAAb,CAAiB,IAAID,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AAAE,YAAIG,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,GAA1C,CAAJ,EAAoDD,OAAOC,GAAP,IAAcF,IAAIE,GAAJ,CAAd;AAAyB;AAAE,KAACD,OAAO,SAAP,IAAoBD,GAApB,CAAyB,OAAOC,MAAP;AAAgB;AAAE;;AAEhR;;AAEA,SAASM,sBAAT,CAAgCP,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIf,UAAX,GAAwBe,GAAxB,GAA8B,EAAE,WAAWA,GAAb,EAArC;AAA0D;;AAEjG,IAAIQ,aAAaC,QAAQ,WAAR,CAAjB;;AAEA,IAAIC,cAAcH,uBAAuBC,UAAvB,CAAlB;;AAEA,IAAIG,SAASF,QAAQ,aAAR,CAAb;;AAEA,IAAIG,IAAIb,wBAAwBY,MAAxB,CAAR;;AAEA;;;;AAIA,SAASzB,aAAT,CAAuB2B,IAAvB,EAA6BC,KAA7B,EAAoC;AAClC,OAAKC,OAAL,CAAa,MAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKK,MAAjB;AACA,OAAKF,IAAL,CAAU,GAAV;AACAF,QAAMK,KAAN,CAAYN,KAAKO,IAAjB;AACD;;AAED;;;;AAIA,SAASjC,WAAT,CAAqB0B,IAArB,EAA2BC,KAA3B,EAAkC;AAChC,OAAKC,OAAL,CAAa,IAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKQ,IAAjB;AACA,OAAKL,IAAL,CAAU,GAAV;AACA,OAAKM,KAAL;;AAEAR,QAAMS,gBAAN,CAAuBV,KAAKW,UAA5B;;AAEA,MAAIX,KAAKY,SAAT,EAAoB;AAClB,QAAI,KAAKC,MAAL,CAAY,GAAZ,CAAJ,EAAsB,KAAKJ,KAAL;AACtB,SAAKN,IAAL,CAAU,OAAV;AACAF,UAAMS,gBAAN,CAAuBV,KAAKY,SAA5B;AACD;AACF;;AAED;;;;AAIA,SAASrC,YAAT,CAAsByB,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,OAAKC,OAAL,CAAa,KAAb;AACA,OAAKC,IAAL,CAAU,GAAV;;AAEA,OAAKW,mBAAL,GAA2B,IAA3B;AACAb,QAAMG,KAAN,CAAYJ,KAAKe,IAAjB;AACA,OAAKD,mBAAL,GAA2B,KAA3B;AACA,OAAKX,IAAL,CAAU,GAAV;;AAEA,MAAIH,KAAKQ,IAAT,EAAe;AACb,SAAKC,KAAL;AACAR,UAAMG,KAAN,CAAYJ,KAAKQ,IAAjB;AACD;AACD,OAAKL,IAAL,CAAU,GAAV;;AAEA,MAAIH,KAAKgB,MAAT,EAAiB;AACf,SAAKP,KAAL;AACAR,UAAMG,KAAN,CAAYJ,KAAKgB,MAAjB;AACD;;AAED,OAAKb,IAAL,CAAU,GAAV;AACAF,QAAMK,KAAN,CAAYN,KAAKO,IAAjB;AACD;;AAED;;;;AAIA,SAAS/B,cAAT,CAAwBwB,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,OAAKC,OAAL,CAAa,OAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKQ,IAAjB;AACA,OAAKL,IAAL,CAAU,GAAV;AACAF,QAAMK,KAAN,CAAYN,KAAKO,IAAjB;AACD;;AAED;;;;;AAKA,IAAIU,qBAAqB,SAASA,kBAAT,CAA4BC,EAA5B,EAAgC;AACvD,SAAO,UAAUlB,IAAV,EAAgBC,KAAhB,EAAuB;AAC5B,SAAKC,OAAL,CAAa,KAAb;AACA,SAAKC,IAAL,CAAU,GAAV;AACAF,UAAMG,KAAN,CAAYJ,KAAKmB,IAAjB;AACA,SAAKhB,IAAL,CAAU,MAAMe,EAAN,GAAW,GAArB;AACAjB,UAAMG,KAAN,CAAYJ,KAAKoB,KAAjB;AACA,SAAKjB,IAAL,CAAU,GAAV;AACAF,UAAMK,KAAN,CAAYN,KAAKO,IAAjB;AACD,GARD;AASD,CAVD;;AAYA;;;;AAIA,IAAIc,iBAAiBJ,mBAAmB,IAAnB,CAArB;AACA9C,QAAQkD,cAAR,GAAyBA,cAAzB;AACA,IAAIC,iBAAiBL,mBAAmB,IAAnB,CAArB;;AAEA9C,QAAQmD,cAAR,GAAyBA,cAAzB;AACA;;;;AAIA,SAAS7C,gBAAT,CAA0BuB,IAA1B,EAAgCC,KAAhC,EAAuC;AACrC,OAAKE,IAAL,CAAU,KAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKO,IAAjB;AACA,OAAKE,KAAL;AACA,OAAKP,OAAL,CAAa,OAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKQ,IAAjB;AACA,OAAKL,IAAL,CAAU,IAAV;AACD;;AAED;;;;;AAKA,IAAIoB,sBAAsB,SAASA,mBAAT,CAA6BC,MAA7B,EAAqC;AAC7D,MAAInC,MAAMoC,UAAUC,MAAV,IAAoB,CAApB,IAAyBD,UAAU,CAAV,MAAiBE,SAA1C,GAAsD,OAAtD,GAAgEF,UAAU,CAAV,CAA1E;;AAEA,SAAO,UAAUzB,IAAV,EAAgBC,KAAhB,EAAuB;AAC5B,SAAKE,IAAL,CAAUqB,MAAV;;AAEA,QAAII,QAAQ5B,KAAKX,GAAL,CAAZ;AACA,QAAIuC,KAAJ,EAAW;AACT,WAAKzB,IAAL,CAAU,GAAV;AACA,UAAI0B,kBAAkB,KAAKC,mBAAL,EAAtB;AACA7B,YAAMG,KAAN,CAAYwB,KAAZ;AACA,WAAKG,iBAAL,CAAuBF,eAAvB;AACD;;AAED,SAAKG,SAAL;AACD,GAZD;AAaD,CAhBD;;AAkBA;;;;AAIA,IAAIC,oBAAoBV,oBAAoB,UAApB,CAAxB;AACApD,QAAQ8D,iBAAR,GAA4BA,iBAA5B;AACA,IAAIC,kBAAkBX,oBAAoB,QAApB,EAA8B,UAA9B,CAAtB;AACApD,QAAQ+D,eAAR,GAA0BA,eAA1B;AACA,IAAIC,iBAAiBZ,oBAAoB,OAApB,CAArB;AACApD,QAAQgE,cAAR,GAAyBA,cAAzB;AACA,IAAIC,iBAAiBb,oBAAoB,OAApB,EAA6B,UAA7B,CAArB;;AAEApD,QAAQiE,cAAR,GAAyBA,cAAzB;AACA;;;;AAIA,SAAS1D,gBAAT,CAA0BsB,IAA1B,EAAgCC,KAAhC,EAAuC;AACrCA,QAAMG,KAAN,CAAYJ,KAAK4B,KAAjB;AACA,OAAKzB,IAAL,CAAU,IAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKO,IAAjB;AACD;;AAED;;;;AAIA,SAAS5B,YAAT,CAAsBqB,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,OAAKC,OAAL,CAAa,KAAb;AACAD,QAAMG,KAAN,CAAYJ,KAAKM,KAAjB;AACA,OAAKG,KAAL;;AAEA;AACA;AACA;AACA,MAAIT,KAAKqC,QAAT,EAAmB;AACjBpC,UAAMG,KAAN,CAAYJ,KAAKqC,QAAL,CAAc,CAAd,CAAZ;AACD,GAFD,MAEO;AACLpC,UAAMG,KAAN,CAAYJ,KAAKsC,OAAjB;AACD;;AAED,MAAItC,KAAKuC,SAAT,EAAoB;AAClB,SAAK9B,KAAL;AACA,SAAKN,IAAL,CAAU,UAAV;AACAF,UAAMG,KAAN,CAAYJ,KAAKuC,SAAjB;AACD;AACF;;AAED;;;;AAIA,SAAS3D,WAAT,CAAqBoB,IAArB,EAA2BC,KAA3B,EAAkC;AAChC,OAAKC,OAAL,CAAa,OAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKwC,KAAjB;AACA,OAAKrC,IAAL,CAAU,IAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKO,IAAjB;AACD;;AAED;;;;AAIA,SAAS1B,eAAT,CAAyBmB,IAAzB,EAA+BC,KAA/B,EAAsC;AACpC,OAAKC,OAAL,CAAa,QAAb;AACA,OAAKC,IAAL,CAAU,GAAV;AACAF,QAAMG,KAAN,CAAYJ,KAAKyC,YAAjB;AACA,OAAKtC,IAAL,CAAU,GAAV;AACA,OAAKM,KAAL;AACA,OAAKN,IAAL,CAAU,GAAV;;AAEAF,QAAMyC,QAAN,CAAe1C,KAAK2C,KAApB,EAA2B;AACzBC,YAAQ,IADiB;AAEzBC,iBAAa,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmC;AAC9C,UAAI,CAACD,OAAD,IAAY9C,KAAK2C,KAAL,CAAW3C,KAAK2C,KAAL,CAAWjB,MAAX,GAAoB,CAA/B,MAAsCqB,GAAtD,EAA2D,OAAO,CAAC,CAAR;AAC5D;AAJwB,GAA3B;;AAOA,OAAK5C,IAAL,CAAU,GAAV;AACD;;AAED;;;;AAIA,SAASrB,UAAT,CAAoBkB,IAApB,EAA0BC,KAA1B,EAAiC;AAC/B,MAAID,KAAKQ,IAAT,EAAe;AACb,SAAKL,IAAL,CAAU,OAAV;AACAF,UAAMG,KAAN,CAAYJ,KAAKQ,IAAjB;AACA,SAAKL,IAAL,CAAU,GAAV;AACD,GAJD,MAIO;AACL,SAAKA,IAAL,CAAU,UAAV;AACD;;AAED,MAAIH,KAAKW,UAAL,CAAgBe,MAApB,EAA4B;AAC1B,SAAKsB,OAAL;AACA/C,UAAMyC,QAAN,CAAe1C,KAAKW,UAApB,EAAgC,EAAEiC,QAAQ,IAAV,EAAhC;AACD;AACF;;AAED;;;;AAIA,SAAS7D,iBAAT,GAA6B;AAC3B,OAAKoB,IAAL,CAAU,WAAV;AACD;;AAED;;;;AAIA,SAASnB,mBAAT,CAA6BgB,IAA7B,EAAmCC,KAAnC,EAA0CgD,MAA1C,EAAkD;AAChD,OAAK9C,IAAL,CAAUH,KAAKkD,IAAL,GAAY,GAAtB;;AAEA,MAAIC,WAAW,KAAf;AACA;AACA,MAAI,CAACpD,EAAEqD,KAAF,CAAQH,MAAR,CAAL,EAAsB;AACpB,QAAII,OAAOrD,KAAKsD,YAAhB;;AAEA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKF,KAAK3B,MAA3B,EAAmC6B,IAAnC,EAAyC;AACvC,UAAIC,SAASH,KAAKE,EAAL,CAAb;AACA,UAAIC,OAAOzC,IAAX,EAAiB;AACf;AACAoC,mBAAW,IAAX;AACD;AACF;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIM,GAAJ;AACA,MAAI,CAAC,KAAKC,MAAL,CAAYC,OAAb,IAAwB,CAAC,KAAKD,MAAL,CAAYE,OAArC,IAAgDT,QAAhD,IAA4D,CAAC,KAAKO,MAAL,CAAYG,WAA7E,EAA0F;AACxFJ,UAAM,QAAQ5D,YAAY,SAAZ,EAAuB,GAAvB,EAA4BG,KAAKkD,IAAL,CAAUxB,MAAV,GAAmB,CAA/C,CAAd;AACD;;AAED;;AAEAzB,QAAM6D,IAAN,CAAW9D,KAAKsD,YAAhB,EAA8B,EAAES,WAAWN,GAAb,EAA9B;;AAEA,MAAI1D,EAAEqD,KAAF,CAAQH,MAAR,CAAJ,EAAqB;AACnB;AACA,QAAIA,OAAO9B,IAAP,KAAgBnB,IAAhB,IAAwBiD,OAAOlC,IAAP,KAAgBf,IAA5C,EAAkD;AACnD;;AAED,OAAKgC,SAAL;AACD;;AAED;;;;AAIA,SAAS/C,kBAAT,CAA4Be,IAA5B,EAAkCC,KAAlC,EAAyC;AACvCA,QAAMG,KAAN,CAAYJ,KAAKgE,EAAjB;AACA/D,QAAMG,KAAN,CAAYJ,KAAKgE,EAAL,CAAQC,cAApB;AACA,MAAIjE,KAAKe,IAAT,EAAe;AACb,SAAKN,KAAL;AACA,SAAKN,IAAL,CAAU,GAAV;AACA,SAAKM,KAAL;AACAR,UAAMG,KAAN,CAAYJ,KAAKe,IAAjB;AACD;AACF","file":"statements.js","sourcesContent":["/* */ \n\"format cjs\";\n\"use strict\";\n\nexports.__esModule = true;\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _repeating = require(\"repeating\");\n\nvar _repeating2 = _interopRequireDefault(_repeating);\n\nvar _types = require(\"../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\n/**\n * Prints WithStatement, prints object and body.\n */\n\nfunction WithStatement(node, print) {\n  this.keyword(\"with\");\n  this.push(\"(\");\n  print.plain(node.object);\n  this.push(\")\");\n  print.block(node.body);\n}\n\n/**\n * Prints IfStatement, prints test, consequent, and alternate.\n */\n\nfunction IfStatement(node, print) {\n  this.keyword(\"if\");\n  this.push(\"(\");\n  print.plain(node.test);\n  this.push(\")\");\n  this.space();\n\n  print.indentOnComments(node.consequent);\n\n  if (node.alternate) {\n    if (this.isLast(\"}\")) this.space();\n    this.push(\"else \");\n    print.indentOnComments(node.alternate);\n  }\n}\n\n/**\n * Prints ForStatement, prints init, test, update, and body.\n */\n\nfunction ForStatement(node, print) {\n  this.keyword(\"for\");\n  this.push(\"(\");\n\n  this._inForStatementInit = true;\n  print.plain(node.init);\n  this._inForStatementInit = false;\n  this.push(\";\");\n\n  if (node.test) {\n    this.space();\n    print.plain(node.test);\n  }\n  this.push(\";\");\n\n  if (node.update) {\n    this.space();\n    print.plain(node.update);\n  }\n\n  this.push(\")\");\n  print.block(node.body);\n}\n\n/**\n * Prints WhileStatement, prints test and body.\n */\n\nfunction WhileStatement(node, print) {\n  this.keyword(\"while\");\n  this.push(\"(\");\n  print.plain(node.test);\n  this.push(\")\");\n  print.block(node.body);\n}\n\n/**\n * Builds ForIn or ForOf statement printers.\n * Prints left, right, and body.\n */\n\nvar buildForXStatement = function buildForXStatement(op) {\n  return function (node, print) {\n    this.keyword(\"for\");\n    this.push(\"(\");\n    print.plain(node.left);\n    this.push(\" \" + op + \" \");\n    print.plain(node.right);\n    this.push(\")\");\n    print.block(node.body);\n  };\n};\n\n/**\n * Create ForInStatement and ForOfStatement printers.\n */\n\nvar ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nvar ForOfStatement = buildForXStatement(\"of\");\n\nexports.ForOfStatement = ForOfStatement;\n/**\n * Prints DoWhileStatement, prints body and test.\n */\n\nfunction DoWhileStatement(node, print) {\n  this.push(\"do \");\n  print.plain(node.body);\n  this.space();\n  this.keyword(\"while\");\n  this.push(\"(\");\n  print.plain(node.test);\n  this.push(\");\");\n}\n\n/**\n * Builds continue, return, or break statement printers.\n * Prints label (or key).\n */\n\nvar buildLabelStatement = function buildLabelStatement(prefix) {\n  var key = arguments.length <= 1 || arguments[1] === undefined ? \"label\" : arguments[1];\n\n  return function (node, print) {\n    this.push(prefix);\n\n    var label = node[key];\n    if (label) {\n      this.push(\" \");\n      var terminatorState = this.startTerminatorless();\n      print.plain(label);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n};\n\n/**\n * Create ContinueStatement, ReturnStatement, and BreakStatement printers.\n */\n\nvar ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nvar ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nvar BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nvar ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\n\nexports.ThrowStatement = ThrowStatement;\n/**\n * Prints LabeledStatement, prints label and body.\n */\n\nfunction LabeledStatement(node, print) {\n  print.plain(node.label);\n  this.push(\": \");\n  print.plain(node.body);\n}\n\n/**\n * Prints TryStatement, prints block, handlers, and finalizer.\n */\n\nfunction TryStatement(node, print) {\n  this.keyword(\"try\");\n  print.plain(node.block);\n  this.space();\n\n  // Esprima bug puts the catch clause in a `handlers` array.\n  // see https://code.google.com/p/esprima/issues/detail?id=433\n  // We run into this from regenerator generated ast.\n  if (node.handlers) {\n    print.plain(node.handlers[0]);\n  } else {\n    print.plain(node.handler);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.push(\"finally \");\n    print.plain(node.finalizer);\n  }\n}\n\n/**\n * Prints CatchClause, prints param and body.\n */\n\nfunction CatchClause(node, print) {\n  this.keyword(\"catch\");\n  this.push(\"(\");\n  print.plain(node.param);\n  this.push(\") \");\n  print.plain(node.body);\n}\n\n/**\n * Prints SwitchStatement, prints discriminant and cases.\n */\n\nfunction SwitchStatement(node, print) {\n  this.keyword(\"switch\");\n  this.push(\"(\");\n  print.plain(node.discriminant);\n  this.push(\")\");\n  this.space();\n  this.push(\"{\");\n\n  print.sequence(node.cases, {\n    indent: true,\n    addNewlines: function addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n  });\n\n  this.push(\"}\");\n}\n\n/**\n * Prints SwitchCase, prints test and consequent.\n */\n\nfunction SwitchCase(node, print) {\n  if (node.test) {\n    this.push(\"case \");\n    print.plain(node.test);\n    this.push(\":\");\n  } else {\n    this.push(\"default:\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    print.sequence(node.consequent, { indent: true });\n  }\n}\n\n/**\n * Prints DebuggerStatement.\n */\n\nfunction DebuggerStatement() {\n  this.push(\"debugger;\");\n}\n\n/**\n * Prints VariableDeclaration, prints declarations, handles kind and format.\n */\n\nfunction VariableDeclaration(node, print, parent) {\n  this.push(node.kind + \" \");\n\n  var hasInits = false;\n  // don't add whitespace to loop heads\n  if (!t.isFor(parent)) {\n    var _arr = node.declarations;\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var declar = _arr[_i];\n      if (declar.init) {\n        // has an init so let's split it up over multiple lines\n        hasInits = true;\n      }\n    }\n  }\n\n  //\n  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on\n  // this will format declarations like:\n  //\n  //   var foo = \"bar\", bar = \"foo\";\n  //\n  // into\n  //\n  //   var foo = \"bar\",\n  //       bar = \"foo\";\n  //\n\n  var sep;\n  if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {\n    sep = \",\\n\" + _repeating2[\"default\"](\" \", node.kind.length + 1);\n  }\n\n  //\n\n  print.list(node.declarations, { separator: sep });\n\n  if (t.isFor(parent)) {\n    // don't give semicolons to these nodes since they'll be inserted in the parent generator\n    if (parent.left === node || parent.init === node) return;\n  }\n\n  this.semicolon();\n}\n\n/**\n * Prints VariableDeclarator, handles id, id.typeAnnotation, and init.\n */\n\nfunction VariableDeclarator(node, print) {\n  print.plain(node.id);\n  print.plain(node.id.typeAnnotation);\n  if (node.init) {\n    this.space();\n    this.push(\"=\");\n    this.space();\n    print.plain(node.init);\n  }\n}"]}