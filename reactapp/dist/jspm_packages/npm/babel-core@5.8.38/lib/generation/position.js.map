{"version":3,"sources":["../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/generation/position.js"],"names":["exports","__esModule","_classCallCheck","instance","Constructor","TypeError","Position","line","column","prototype","push","str","i","length","unshift","module"],"mappings":"AAAA;AACA;AACA;;;;AAIA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACA;;AAEA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,oBAAoBC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,WAAY,YAAY;AAC1B,WAASA,QAAT,GAAoB;AAClBJ,oBAAgB,IAAhB,EAAsBI,QAAtB;;AAEA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,MAAL,GAAc,CAAd;AACD;;AAED;;;;AAIAF,WAASG,SAAT,CAAmBC,IAAnB,GAA0B,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAC3C,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,IAAIE,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,UAAID,IAAIC,CAAJ,MAAW,IAAf,EAAqB;AACnB,aAAKL,IAAL;AACA,aAAKC,MAAL,GAAc,CAAd;AACD,OAHD,MAGO;AACL,aAAKA,MAAL;AACD;AACF;AACF,GATD;;AAWA;;;;AAIAF,WAASG,SAAT,CAAmBK,OAAnB,GAA6B,SAASA,OAAT,CAAiBH,GAAjB,EAAsB;AACjD,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,IAAIE,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,UAAID,IAAIC,CAAJ,MAAW,IAAf,EAAqB;AACnB,aAAKL,IAAL;AACD,OAFD,MAEO;AACL,aAAKC,MAAL;AACD;AACF;AACF,GARD;;AAUA,SAAOF,QAAP;AACD,CAtCc,EAAf;;AAwCAN,QAAQ,SAAR,IAAqBM,QAArB;AACAS,OAAOf,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"position.js","sourcesContent":["/* */ \n\"format cjs\";\n/**\n * Track current position in code generation.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Position = (function () {\n  function Position() {\n    _classCallCheck(this, Position);\n\n    this.line = 1;\n    this.column = 0;\n  }\n\n  /**\n   * Push a string to the current position, mantaining the current line and column.\n   */\n\n  Position.prototype.push = function push(str) {\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] === \"\\n\") {\n        this.line++;\n        this.column = 0;\n      } else {\n        this.column++;\n      }\n    }\n  };\n\n  /**\n   * Unshift a string from the current position, mantaining the current line and column.\n   */\n\n  Position.prototype.unshift = function unshift(str) {\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] === \"\\n\") {\n        this.line--;\n      } else {\n        this.column--;\n      }\n    }\n  };\n\n  return Position;\n})();\n\nexports[\"default\"] = Position;\nmodule.exports = exports[\"default\"];"]}