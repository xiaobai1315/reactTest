{"version":3,"sources":["../../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/transformation/transformers/es6/spec.symbols.js"],"names":["exports","__esModule","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_types","require","t","metadata","optional","visitor","UnaryExpression","node","parent","scope","file","_ignoreSpecSymbols","parentPath","isBinaryExpression","EQUALITY_BINARY_OPERATORS","indexOf","operator","opposite","getOpposite","isLiteral","value","callExpression","addHelper","argument","get","isIdentifier","undefLiteral","literal","unary","unaryExpression","conditionalExpression","binaryExpression","BinaryExpression","left","right","VariableDeclarationFunctionDeclaration","_generated","skip"],"mappings":"AAAA;AACA;AACA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACA;;AAEA,SAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,OAAOA,IAAIF,UAAf,EAA2B;AAAE,WAAOE,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIC,SAAS,EAAb,CAAiB,IAAID,OAAO,IAAX,EAAiB;AAAE,WAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AAAE,YAAIG,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,GAA1C,CAAJ,EAAoDD,OAAOC,GAAP,IAAcF,IAAIE,GAAJ,CAAd;AAAyB;AAAE,KAACD,OAAO,SAAP,IAAoBD,GAApB,CAAyB,OAAOC,MAAP;AAAgB;AAAE;;AAEhR,IAAIM,SAASC,QAAQ,gBAAR,CAAb;;AAEA,IAAIC,IAAIV,wBAAwBQ,MAAxB,CAAR;;AAEA,IAAIG,WAAW;AACbC,YAAU;AADG,CAAf;;AAIAd,QAAQa,QAAR,GAAmBA,QAAnB;AACA;;;;AAIA,IAAIE,UAAU;;AAEZ;;;;AAIAC,mBAAiB,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,IAA9C,EAAoD;AACnE,QAAIH,KAAKI,kBAAT,EAA6B;;AAE7B,QAAI,KAAKC,UAAL,CAAgBC,kBAAhB,MAAwCX,EAAEY,yBAAF,CAA4BC,OAA5B,CAAoCP,OAAOQ,QAA3C,KAAwD,CAApG,EAAuG;AACrG;AACA,UAAIC,WAAW,KAAKC,WAAL,EAAf;AACA,UAAID,SAASE,SAAT,MAAwBF,SAASV,IAAT,CAAca,KAAd,KAAwB,QAAhD,IAA4DH,SAASV,IAAT,CAAca,KAAd,KAAwB,QAAxF,EAAkG;AACnG;;AAED,QAAIb,KAAKS,QAAL,KAAkB,QAAtB,EAAgC;AAC9B,UAAIjB,OAAOG,EAAEmB,cAAF,CAAiBX,KAAKY,SAAL,CAAe,QAAf,CAAjB,EAA2C,CAACf,KAAKgB,QAAN,CAA3C,CAAX;AACA,UAAI,KAAKC,GAAL,CAAS,UAAT,EAAqBC,YAArB,EAAJ,EAAyC;AACvC,YAAIC,eAAexB,EAAEyB,OAAF,CAAU,WAAV,CAAnB;AACA,YAAIC,QAAQ1B,EAAE2B,eAAF,CAAkB,QAAlB,EAA4BtB,KAAKgB,QAAjC,CAAZ;AACAK,cAAMjB,kBAAN,GAA2B,IAA3B;AACA,eAAOT,EAAE4B,qBAAF,CAAwB5B,EAAE6B,gBAAF,CAAmB,KAAnB,EAA0BH,KAA1B,EAAiCF,YAAjC,CAAxB,EAAwEA,YAAxE,EAAsF3B,IAAtF,CAAP;AACD,OALD,MAKO;AACL,eAAOA,IAAP;AACD;AACF;AACF,GA1BW;;AA4BZ;;;;AAIAiC,oBAAkB,SAASA,gBAAT,CAA0BzB,IAA1B,EAAgCC,MAAhC,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AACrE,QAAIH,KAAKS,QAAL,KAAkB,YAAtB,EAAoC;AAClC,aAAOd,EAAEmB,cAAF,CAAiBX,KAAKY,SAAL,CAAe,YAAf,CAAjB,EAA+C,CAACf,KAAK0B,IAAN,EAAY1B,KAAK2B,KAAjB,CAA/C,CAAP;AACD;AACF,GApCW;;AAsCZ;;;;AAIA,6CAA2C,SAASC,sCAAT,CAAgD5B,IAAhD,EAAsD;AAC/F,QAAIA,KAAK6B,UAAT,EAAqB,KAAKC,IAAL;AACtB;AA5CW,CAAd;AA8CA/C,QAAQe,OAAR,GAAkBA,OAAlB","file":"spec.symbols.js","sourcesContent":["/* */ \n\"format cjs\";\n\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar metadata = {\n  optional: true\n};\n\nexports.metadata = metadata;\n/**\n * [Please add a description.]\n */\n\nvar visitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  UnaryExpression: function UnaryExpression(node, parent, scope, file) {\n    if (node._ignoreSpecSymbols) return;\n\n    if (this.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {\n      // optimise `typeof foo === \"string\"` since we can determine that they'll never need to handle symbols\n      var opposite = this.getOpposite();\n      if (opposite.isLiteral() && opposite.node.value !== \"symbol\" && opposite.node.value !== \"object\") return;\n    }\n\n    if (node.operator === \"typeof\") {\n      var call = t.callExpression(file.addHelper(\"typeof\"), [node.argument]);\n      if (this.get(\"argument\").isIdentifier()) {\n        var undefLiteral = t.literal(\"undefined\");\n        var unary = t.unaryExpression(\"typeof\", node.argument);\n        unary._ignoreSpecSymbols = true;\n        return t.conditionalExpression(t.binaryExpression(\"===\", unary, undefLiteral), undefLiteral, call);\n      } else {\n        return call;\n      }\n    }\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  BinaryExpression: function BinaryExpression(node, parent, scope, file) {\n    if (node.operator === \"instanceof\") {\n      return t.callExpression(file.addHelper(\"instanceof\"), [node.left, node.right]);\n    }\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  \"VariableDeclaration|FunctionDeclaration\": function VariableDeclarationFunctionDeclaration(node) {\n    if (node._generated) this.skip();\n  }\n};\nexports.visitor = visitor;"]}