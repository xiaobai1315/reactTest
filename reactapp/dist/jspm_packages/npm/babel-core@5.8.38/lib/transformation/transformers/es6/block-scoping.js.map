{"version":3,"sources":["../../../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/transformation/transformers/es6/block-scoping.js"],"names":["exports","__esModule","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","_interopRequireDefault","_classCallCheck","instance","Constructor","TypeError","_traversal","require","_traversal2","_helpersObject","_helpersObject2","_util","util","_types","t","_lodashObjectValues","_lodashObjectValues2","_lodashObjectExtend","_lodashObjectExtend2","isLet","node","parent","isVariableDeclaration","_let","kind","isLetInitable","i","declarations","length","declar","init","identifier","isFor","left","isVar","standardizeLets","declars","_arr","_i","metadata","group","visitor","VariableDeclaration","scope","file","transformers","canTransform","nodes","decl","assign","assignmentExpression","id","_ignoreBlockScopingTDZ","push","expressionStatement","addHelper","_blockHoist","Loop","ensureBlock","body","_letDeclarators","blockScoping","BlockScoping","get","run","BlockStatementProgram","block","isLoop","replace","remaps","remap","name","ownBinding","getBindingIdentifier","binding","uid","skip","replaceVisitor","ReferencedIdentifier","AssignmentExpression","ids","getBindingIdentifiers","traverseReplace","isIdentifier","isAssignmentExpression","traverse","letReferenceBlockVisitor","Function","state","letReferenceFunctionVisitor","ref","letReferences","localBinding","closurify","hoistVarDeclarationsVisitor","enter","self","isForStatement","pushDeclar","sequenceExpression","map","isFunction","loopLabelVisitor","LabeledStatement","innerLabels","label","continuationVisitor","isUpdateExpression","bindings","outsideReferences","reassignments","loopNodeTo","isBreakStatement","isContinueStatement","loopVisitor","oldIgnoreLabeless","ignoreLabeless","SwitchCase","oldInSwitchCase","inSwitchCase","loopText","indexOf","isSwitchCase","hasBreakContinue","literal","isReturnStatement","hasReturn","objectExpression","property","argument","returnStatement","inherits","loopPath","blockPath","outsideLetReferences","hasLetReferences","_letReferences","loopParent","loopLabel","isLabeledStatement","loop","_letDone","needsClosure","getLetReferences","isProgram","wrapClosure","labeledStatement","hasRemaps","letRefs","parentHasBinding","hasGlobal","generateUidIdentifier","right","test","update","outsideRefs","rename","has","checkLoop","hoistVarDeclarations","params","args","fn","functionExpression","blockStatement","shadow","addContinuations","insertBefore","variableDeclaration","variableDeclarator","callExpression","ret","hasYield","hasType","FUNCTION_TYPES","generator","yieldExpression","hasAsync","async","awaitExpression","buildClosure","buildHas","param","newParam","declarators","concat","keys","names","expr","retCheck","cases","template","RETURN","switchCase","single","attachAuxiliaryComment","ifStatement","binaryExpression","consequent","caseConsequent","switchStatement"],"mappings":"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","file":"block-scoping.js","sourcesContent":["/* */ \n\"format cjs\";\n\"use strict\";\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj[\"default\"] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// istanbul ignore next\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _traversal = require(\"../../../traversal\");\n\nvar _traversal2 = _interopRequireDefault(_traversal);\n\nvar _helpersObject = require(\"../../../helpers/object\");\n\nvar _helpersObject2 = _interopRequireDefault(_helpersObject);\n\nvar _util = require(\"../../../util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _types = require(\"../../../types\");\n\nvar t = _interopRequireWildcard(_types);\n\nvar _lodashObjectValues = require(\"lodash/object/values\");\n\nvar _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);\n\nvar _lodashObjectExtend = require(\"lodash/object/extend\");\n\nvar _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);\n\n/**\n * [Please add a description.]\n */\n\nfunction isLet(node, parent) {\n  if (!t.isVariableDeclaration(node)) return false;\n  if (node._let) return true;\n  if (node.kind !== \"let\") return false;\n\n  // https://github.com/babel/babel/issues/255\n  if (isLetInitable(node, parent)) {\n    for (var i = 0; i < node.declarations.length; i++) {\n      var declar = node.declarations[i];\n      declar.init = declar.init || t.identifier(\"undefined\");\n    }\n  }\n\n  node._let = true;\n  node.kind = \"var\";\n  return true;\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isLetInitable(node, parent) {\n  return !t.isFor(parent) || !t.isFor(parent, { left: node });\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction isVar(node, parent) {\n  return t.isVariableDeclaration(node, { kind: \"var\" }) && !isLet(node, parent);\n}\n\n/**\n * [Please add a description.]\n */\n\nfunction standardizeLets(declars) {\n  var _arr = declars;\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var declar = _arr[_i];\n    delete declar._let;\n  }\n}\n\nvar metadata = {\n  group: \"builtin-advanced\"\n};\n\nexports.metadata = metadata;\n/**\n * [Please add a description.]\n */\n\nvar visitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  VariableDeclaration: function VariableDeclaration(node, parent, scope, file) {\n    if (!isLet(node, parent)) return;\n\n    if (isLetInitable(node) && file.transformers[\"es6.spec.blockScoping\"].canTransform()) {\n      var nodes = [node];\n\n      for (var i = 0; i < node.declarations.length; i++) {\n        var decl = node.declarations[i];\n        if (decl.init) {\n          var assign = t.assignmentExpression(\"=\", decl.id, decl.init);\n          assign._ignoreBlockScopingTDZ = true;\n          nodes.push(t.expressionStatement(assign));\n        }\n        decl.init = file.addHelper(\"temporal-undefined\");\n      }\n\n      node._blockHoist = 2;\n\n      return nodes;\n    }\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  Loop: function Loop(node, parent, scope, file) {\n    var init = node.left || node.init;\n    if (isLet(init, node)) {\n      t.ensureBlock(node);\n      node.body._letDeclarators = [init];\n    }\n\n    var blockScoping = new BlockScoping(this, this.get(\"body\"), parent, scope, file);\n    return blockScoping.run();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  \"BlockStatement|Program\": function BlockStatementProgram(block, parent, scope, file) {\n    if (!t.isLoop(parent)) {\n      var blockScoping = new BlockScoping(null, this, parent, scope, file);\n      blockScoping.run();\n    }\n  }\n};\n\nexports.visitor = visitor;\n/**\n * [Please add a description.]\n */\n\nfunction replace(node, parent, scope, remaps) {\n  var remap = remaps[node.name];\n  if (!remap) return;\n\n  var ownBinding = scope.getBindingIdentifier(node.name);\n  if (ownBinding === remap.binding) {\n    node.name = remap.uid;\n  } else {\n    // scope already has it's own binding that doesn't\n    // match the one we have a stored replacement for\n    if (this) this.skip();\n  }\n}\n\n/**\n * [Please add a description.]\n */\n\nvar replaceVisitor = {\n  ReferencedIdentifier: replace,\n\n  /**\n   * [Please add a description.]\n   */\n\n  AssignmentExpression: function AssignmentExpression(node, parent, scope, remaps) {\n    var ids = this.getBindingIdentifiers();\n    for (var name in ids) {\n      replace(ids[name], node, scope, remaps);\n    }\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nfunction traverseReplace(node, parent, scope, remaps) {\n  if (t.isIdentifier(node)) {\n    replace(node, parent, scope, remaps);\n  }\n\n  if (t.isAssignmentExpression(node)) {\n    var ids = t.getBindingIdentifiers(node);\n    for (var name in ids) {\n      replace(ids[name], parent, scope, remaps);\n    }\n  }\n\n  scope.traverse(node, replaceVisitor, remaps);\n}\n\n/**\n * [Please add a description.]\n */\n\nvar letReferenceBlockVisitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  Function: function Function(node, parent, scope, state) {\n    this.traverse(letReferenceFunctionVisitor, state);\n    return this.skip();\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar letReferenceFunctionVisitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {\n    var ref = state.letReferences[node.name];\n\n    // not a part of our scope\n    if (!ref) return;\n\n    // this scope has a variable with the same name so it couldn't belong\n    // to our let scope\n    var localBinding = scope.getBindingIdentifier(node.name);\n    if (localBinding && localBinding !== ref) return;\n\n    state.closurify = true;\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar hoistVarDeclarationsVisitor = {\n  enter: function enter(node, parent, scope, self) {\n    if (this.isForStatement()) {\n      if (isVar(node.init, node)) {\n        var nodes = self.pushDeclar(node.init);\n        if (nodes.length === 1) {\n          node.init = nodes[0];\n        } else {\n          node.init = t.sequenceExpression(nodes);\n        }\n      }\n    } else if (this.isFor()) {\n      if (isVar(node.left, node)) {\n        self.pushDeclar(node.left);\n        node.left = node.left.declarations[0].id;\n      }\n    } else if (isVar(node, parent)) {\n      return self.pushDeclar(node).map(t.expressionStatement);\n    } else if (this.isFunction()) {\n      return this.skip();\n    }\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar loopLabelVisitor = {\n  LabeledStatement: function LabeledStatement(node, parent, scope, state) {\n    state.innerLabels.push(node.label.name);\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar continuationVisitor = {\n  enter: function enter(node, parent, scope, state) {\n    if (this.isAssignmentExpression() || this.isUpdateExpression()) {\n      var bindings = this.getBindingIdentifiers();\n      for (var name in bindings) {\n        if (state.outsideReferences[name] !== scope.getBindingIdentifier(name)) continue;\n        state.reassignments[name] = true;\n      }\n    }\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar loopNodeTo = function loopNodeTo(node) {\n  if (t.isBreakStatement(node)) {\n    return \"break\";\n  } else if (t.isContinueStatement(node)) {\n    return \"continue\";\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar loopVisitor = {\n\n  /**\n   * [Please add a description.]\n   */\n\n  Loop: function Loop(node, parent, scope, state) {\n    var oldIgnoreLabeless = state.ignoreLabeless;\n    state.ignoreLabeless = true;\n    this.traverse(loopVisitor, state);\n    state.ignoreLabeless = oldIgnoreLabeless;\n    this.skip();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  Function: function Function() {\n    this.skip();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  SwitchCase: function SwitchCase(node, parent, scope, state) {\n    var oldInSwitchCase = state.inSwitchCase;\n    state.inSwitchCase = true;\n    this.traverse(loopVisitor, state);\n    state.inSwitchCase = oldInSwitchCase;\n    this.skip();\n  },\n\n  /**\n   * [Please add a description.]\n   */\n\n  enter: function enter(node, parent, scope, state) {\n    var replace;\n    var loopText = loopNodeTo(node);\n\n    if (loopText) {\n      if (node.label) {\n        // we shouldn't be transforming this because it exists somewhere inside\n        if (state.innerLabels.indexOf(node.label.name) >= 0) {\n          return;\n        }\n\n        loopText = loopText + \"|\" + node.label.name;\n      } else {\n        // we shouldn't be transforming these statements because\n        // they don't refer to the actual loop we're scopifying\n        if (state.ignoreLabeless) return;\n\n        //\n        if (state.inSwitchCase) return;\n\n        // break statements mean something different in this context\n        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;\n      }\n\n      state.hasBreakContinue = true;\n      state.map[loopText] = node;\n      replace = t.literal(loopText);\n    }\n\n    if (this.isReturnStatement()) {\n      state.hasReturn = true;\n      replace = t.objectExpression([t.property(\"init\", t.identifier(\"v\"), node.argument || t.identifier(\"undefined\"))]);\n    }\n\n    if (replace) {\n      replace = t.returnStatement(replace);\n      this.skip();\n      return t.inherits(replace, node);\n    }\n  }\n};\n\n/**\n * [Please add a description.]\n */\n\nvar BlockScoping = (function () {\n  function BlockScoping(loopPath, blockPath, parent, scope, file) {\n    _classCallCheck(this, BlockScoping);\n\n    this.parent = parent;\n    this.scope = scope;\n    this.file = file;\n\n    this.blockPath = blockPath;\n    this.block = blockPath.node;\n\n    this.outsideLetReferences = _helpersObject2[\"default\"]();\n    this.hasLetReferences = false;\n    this.letReferences = this.block._letReferences = _helpersObject2[\"default\"]();\n    this.body = [];\n\n    if (loopPath) {\n      this.loopParent = loopPath.parent;\n      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;\n      this.loopPath = loopPath;\n      this.loop = loopPath.node;\n    }\n  }\n\n  /**\n   * Start the ball rolling.\n   */\n\n  BlockScoping.prototype.run = function run() {\n    var block = this.block;\n    if (block._letDone) return;\n    block._letDone = true;\n\n    var needsClosure = this.getLetReferences();\n\n    // this is a block within a `Function/Program` so we can safely leave it be\n    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;\n\n    // we can skip everything\n    if (!this.hasLetReferences) return;\n\n    if (needsClosure) {\n      this.wrapClosure();\n    } else {\n      this.remap();\n    }\n\n    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {\n      return t.labeledStatement(this.loopLabel, this.loop);\n    }\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  BlockScoping.prototype.remap = function remap() {\n    var hasRemaps = false;\n    var letRefs = this.letReferences;\n    var scope = this.scope;\n\n    // alright, so since we aren't wrapping this block in a closure\n    // we have to check if any of our let variables collide with\n    // those in upper scopes and then if they do, generate a uid\n    // for them and replace all references with it\n    var remaps = _helpersObject2[\"default\"]();\n\n    for (var key in letRefs) {\n      // just an Identifier node we collected in `getLetReferences`\n      // this is the defining identifier of a declaration\n      var ref = letRefs[key];\n\n      // todo: could skip this if the colliding binding is in another function\n      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {\n        var uid = scope.generateUidIdentifier(ref.name).name;\n        ref.name = uid;\n\n        hasRemaps = true;\n        remaps[key] = remaps[uid] = {\n          binding: ref,\n          uid: uid\n        };\n      }\n    }\n\n    if (!hasRemaps) return;\n\n    //\n\n    var loop = this.loop;\n    if (loop) {\n      traverseReplace(loop.right, loop, scope, remaps);\n      traverseReplace(loop.test, loop, scope, remaps);\n      traverseReplace(loop.update, loop, scope, remaps);\n    }\n\n    this.blockPath.traverse(replaceVisitor, remaps);\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  BlockScoping.prototype.wrapClosure = function wrapClosure() {\n    var block = this.block;\n\n    var outsideRefs = this.outsideLetReferences;\n\n    // remap loop heads with colliding variables\n    if (this.loop) {\n      for (var name in outsideRefs) {\n        var id = outsideRefs[name];\n\n        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {\n          delete outsideRefs[id.name];\n          delete this.letReferences[id.name];\n\n          this.scope.rename(id.name);\n\n          this.letReferences[id.name] = id;\n          outsideRefs[id.name] = id;\n        }\n      }\n    }\n\n    // if we're inside of a for loop then we search to see if there are any\n    // `break`s, `continue`s, `return`s etc\n    this.has = this.checkLoop();\n\n    // hoist var references to retain scope\n    this.hoistVarDeclarations();\n\n    // turn outsideLetReferences into an array\n    var params = _lodashObjectValues2[\"default\"](outsideRefs);\n    var args = _lodashObjectValues2[\"default\"](outsideRefs);\n\n    // build the closure that we're going to wrap the block with\n    var fn = t.functionExpression(null, params, t.blockStatement(block.body));\n    fn.shadow = true;\n\n    // continuation\n    this.addContinuations(fn);\n\n    // replace the current block body with the one we're going to build\n    block.body = this.body;\n\n    var ref = fn;\n\n    if (this.loop) {\n      ref = this.scope.generateUidIdentifier(\"loop\");\n      this.loopPath.insertBefore(t.variableDeclaration(\"var\", [t.variableDeclarator(ref, fn)]));\n    }\n\n    // build a call and a unique id that we can assign the return value to\n    var call = t.callExpression(ref, args);\n    var ret = this.scope.generateUidIdentifier(\"ret\");\n\n    // handle generators\n    var hasYield = _traversal2[\"default\"].hasType(fn.body, this.scope, \"YieldExpression\", t.FUNCTION_TYPES);\n    if (hasYield) {\n      fn.generator = true;\n      call = t.yieldExpression(call, true);\n    }\n\n    // handlers async functions\n    var hasAsync = _traversal2[\"default\"].hasType(fn.body, this.scope, \"AwaitExpression\", t.FUNCTION_TYPES);\n    if (hasAsync) {\n      fn.async = true;\n      call = t.awaitExpression(call);\n    }\n\n    this.buildClosure(ret, call);\n  };\n\n  /**\n   * Push the closure to the body.\n   */\n\n  BlockScoping.prototype.buildClosure = function buildClosure(ret, call) {\n    var has = this.has;\n    if (has.hasReturn || has.hasBreakContinue) {\n      this.buildHas(ret, call);\n    } else {\n      this.body.push(t.expressionStatement(call));\n    }\n  };\n\n  /**\n   * If any of the outer let variables are reassigned then we need to rename them in\n   * the closure so we can get direct access to the outer variable to continue the\n   * iteration with bindings based on each iteration.\n   *\n   * Reference: https://github.com/babel/babel/issues/1078\n   */\n\n  BlockScoping.prototype.addContinuations = function addContinuations(fn) {\n    var state = {\n      reassignments: {},\n      outsideReferences: this.outsideLetReferences\n    };\n\n    this.scope.traverse(fn, continuationVisitor, state);\n\n    for (var i = 0; i < fn.params.length; i++) {\n      var param = fn.params[i];\n      if (!state.reassignments[param.name]) continue;\n\n      var newParam = this.scope.generateUidIdentifier(param.name);\n      fn.params[i] = newParam;\n\n      this.scope.rename(param.name, newParam.name, fn);\n\n      // assign outer reference as it's been modified internally and needs to be retained\n      fn.body.body.push(t.expressionStatement(t.assignmentExpression(\"=\", param, newParam)));\n    }\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  BlockScoping.prototype.getLetReferences = function getLetReferences() {\n    var block = this.block;\n\n    var declarators = block._letDeclarators || [];\n\n    //\n    for (var i = 0; i < declarators.length; i++) {\n      var declar = declarators[i];\n      _lodashObjectExtend2[\"default\"](this.outsideLetReferences, t.getBindingIdentifiers(declar));\n    }\n\n    //\n    if (block.body) {\n      for (var i = 0; i < block.body.length; i++) {\n        var declar = block.body[i];\n        if (isLet(declar, block)) {\n          declarators = declarators.concat(declar.declarations);\n        }\n      }\n    }\n\n    //\n    for (var i = 0; i < declarators.length; i++) {\n      var declar = declarators[i];\n      var keys = t.getBindingIdentifiers(declar);\n      _lodashObjectExtend2[\"default\"](this.letReferences, keys);\n      this.hasLetReferences = true;\n    }\n\n    // no let references so we can just quit\n    if (!this.hasLetReferences) return;\n\n    // set let references to plain var references\n    standardizeLets(declarators);\n\n    var state = {\n      letReferences: this.letReferences,\n      closurify: false\n    };\n\n    // traverse through this block, stopping on functions and checking if they\n    // contain any local let references\n    this.blockPath.traverse(letReferenceBlockVisitor, state);\n\n    return state.closurify;\n  };\n\n  /**\n   * If we're inside of a loop then traverse it and check if it has one of\n   * the following node types `ReturnStatement`, `BreakStatement`,\n   * `ContinueStatement` and replace it with a return value that we can track\n   * later on.\n   *\n   * @returns {Object}\n   */\n\n  BlockScoping.prototype.checkLoop = function checkLoop() {\n    var state = {\n      hasBreakContinue: false,\n      ignoreLabeless: false,\n      inSwitchCase: false,\n      innerLabels: [],\n      hasReturn: false,\n      isLoop: !!this.loop,\n      map: {}\n    };\n\n    this.blockPath.traverse(loopLabelVisitor, state);\n    this.blockPath.traverse(loopVisitor, state);\n\n    return state;\n  };\n\n  /**\n   * Hoist all var declarations in this block to before it so they retain scope\n   * once we wrap everything in a closure.\n   */\n\n  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {\n    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);\n  };\n\n  /**\n   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with\n   * their declarations hoisted to before the closure wrapper.\n   */\n\n  BlockScoping.prototype.pushDeclar = function pushDeclar(node) {\n    var declars = [];\n    var names = t.getBindingIdentifiers(node);\n    for (var name in names) {\n      declars.push(t.variableDeclarator(names[name]));\n    }\n\n    this.body.push(t.variableDeclaration(node.kind, declars));\n\n    var replace = [];\n\n    for (var i = 0; i < node.declarations.length; i++) {\n      var declar = node.declarations[i];\n      if (!declar.init) continue;\n\n      var expr = t.assignmentExpression(\"=\", declar.id, declar.init);\n      replace.push(t.inherits(expr, declar));\n    }\n\n    return replace;\n  };\n\n  /**\n   * [Please add a description.]\n   */\n\n  BlockScoping.prototype.buildHas = function buildHas(ret, call) {\n    var body = this.body;\n\n    body.push(t.variableDeclaration(\"var\", [t.variableDeclarator(ret, call)]));\n\n    var retCheck;\n    var has = this.has;\n    var cases = [];\n\n    if (has.hasReturn) {\n      // typeof ret === \"object\"\n      retCheck = util.template(\"let-scoping-return\", {\n        RETURN: ret\n      });\n    }\n\n    if (has.hasBreakContinue) {\n      for (var key in has.map) {\n        cases.push(t.switchCase(t.literal(key), [has.map[key]]));\n      }\n\n      if (has.hasReturn) {\n        cases.push(t.switchCase(null, [retCheck]));\n      }\n\n      if (cases.length === 1) {\n        var single = cases[0];\n        body.push(this.file.attachAuxiliaryComment(t.ifStatement(t.binaryExpression(\"===\", ret, single.test), single.consequent[0])));\n      } else {\n        // https://github.com/babel/babel/issues/998\n        for (var i = 0; i < cases.length; i++) {\n          var caseConsequent = cases[i].consequent[0];\n          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {\n            caseConsequent.label = this.loopLabel = this.loopLabel || this.file.scope.generateUidIdentifier(\"loop\");\n          }\n        }\n\n        body.push(this.file.attachAuxiliaryComment(t.switchStatement(ret, cases)));\n      }\n    } else {\n      if (has.hasReturn) {\n        body.push(this.file.attachAuxiliaryComment(retCheck));\n      }\n    }\n  };\n\n  return BlockScoping;\n})();"]}