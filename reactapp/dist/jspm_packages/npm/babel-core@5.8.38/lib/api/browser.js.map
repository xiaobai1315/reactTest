{"version":3,"sources":["../../../../../../jspm_packages/npm/babel-core@5.8.38/lib/api/browser.js"],"names":["require","transform","module","exports","options","version","run","code","opts","arguments","length","undefined","sourceMaps","Function","load","url","callback","hold","filename","xhr","global","ActiveXObject","XMLHttpRequest","open","overrideMimeType","onreadystatechange","readyState","status","param","responseText","apply","Error","send","runScripts","scripts","types","index","exec","Array","script","i","src","innerHTML","_scripts","document","getElementsByTagName","_script","indexOf","type","push","addEventListener","attachEvent"],"mappings":"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","file":"browser.js","sourcesContent":["/* */ \n\"format cjs\";\n/* eslint no-new-func: 0 */\n\n\"use strict\";\n\nrequire(\"./node\");\nvar transform = module.exports = require(\"../transformation\");\n\n/**\n * Add `options` and `version` to `babel` global.\n */\n\ntransform.options = require(\"../transformation/file/options\");\ntransform.version = require(\"../../package\").version;\n\n/**\n * Add `transform` api to `babel` global.\n */\n\ntransform.transform = transform;\n\n/**\n * Tranform and execute script, adding in inline sourcemaps.\n */\n\ntransform.run = function (code) {\n  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  opts.sourceMaps = \"inline\";\n  return new Function(transform(code, opts).code)();\n};\n\n/**\n * Load scripts via xhr, and `transform` when complete (optional).\n */\n\ntransform.load = function (url, callback, opts, hold) {\n  if (opts === undefined) opts = {};\n\n  opts.filename = opts.filename || url;\n\n  var xhr = global.ActiveXObject ? new global.ActiveXObject(\"Microsoft.XMLHTTP\") : new global.XMLHttpRequest();\n  xhr.open(\"GET\", url, true);\n  if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain\");\n\n  /**\n   * When successfully loaded, transform (optional), and call `callback`.\n   */\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState !== 4) return;\n\n    var status = xhr.status;\n    if (status === 0 || status === 200) {\n      var param = [xhr.responseText, opts];\n      if (!hold) transform.run.apply(transform, param);\n      if (callback) callback(param);\n    } else {\n      throw new Error(\"Could not load \" + url);\n    }\n  };\n\n  xhr.send(null);\n};\n\n/**\n * Load and transform all scripts of `types`.\n *\n * @example\n * <script type=\"module\"></script>\n */\n\nvar runScripts = function runScripts() {\n  var scripts = [];\n  var types = [\"text/ecmascript-6\", \"text/6to5\", \"text/babel\", \"module\"];\n  var index = 0;\n\n  /**\n   * Transform and execute script. Ensures correct load order.\n   */\n\n  var exec = function exec() {\n    var param = scripts[index];\n    if (param instanceof Array) {\n      transform.run.apply(transform, param);\n      index++;\n      exec();\n    }\n  };\n\n  /**\n   * Load, transform, and execute all scripts.\n   */\n\n  var run = function run(script, i) {\n    var opts = {};\n\n    if (script.src) {\n      transform.load(script.src, function (param) {\n        scripts[i] = param;\n        exec();\n      }, opts, true);\n    } else {\n      opts.filename = \"embedded\";\n      scripts[i] = [script.innerHTML, opts];\n    }\n  };\n\n  // Collect scripts with Babel `types`.\n\n  var _scripts = global.document.getElementsByTagName(\"script\");\n\n  for (var i = 0; i < _scripts.length; ++i) {\n    var _script = _scripts[i];\n    if (types.indexOf(_script.type) >= 0) scripts.push(_script);\n  }\n\n  for (i in scripts) {\n    run(scripts[i], i);\n  }\n\n  exec();\n};\n\n/**\n * Register load event to transform and execute scripts.\n */\n\nif (global.addEventListener) {\n  global.addEventListener(\"DOMContentLoaded\", runScripts, false);\n} else if (global.attachEvent) {\n  global.attachEvent(\"onload\", runScripts);\n}"]}