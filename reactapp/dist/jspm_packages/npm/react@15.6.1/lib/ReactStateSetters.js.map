{"version":3,"sources":["../../../../../jspm_packages/npm/react@15.6.1/lib/ReactStateSetters.js"],"names":["ReactStateSetters","createStateSetter","component","funcReturningState","a","b","c","d","e","f","partialState","call","setState","createStateKeySetter","key","cache","__keySetters","stateKeySetter","value","Mixin","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,oBAAoB;AACtB;;;;;;;;;;AAUAC,qBAAmB,2BAAUC,SAAV,EAAqBC,kBAArB,EAAyC;AAC1D,WAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,UAAIC,eAAeP,mBAAmBQ,IAAnB,CAAwBT,SAAxB,EAAmCE,CAAnC,EAAsCC,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,CAAnB;AACA,UAAIC,YAAJ,EAAkB;AAChBR,kBAAUU,QAAV,CAAmBF,YAAnB;AACD;AACF,KALD;AAMD,GAlBqB;;AAoBtB;;;;;;;;;;;AAWAG,wBAAsB,8BAAUX,SAAV,EAAqBY,GAArB,EAA0B;AAC9C;AACA,QAAIC,QAAQb,UAAUc,YAAV,KAA2Bd,UAAUc,YAAV,GAAyB,EAApD,CAAZ;AACA,WAAOD,MAAMD,GAAN,MAAeC,MAAMD,GAAN,IAAaD,sBAAqBX,SAArB,EAAgCY,GAAhC,CAA5B,CAAP;AACD;AAnCqB,CAAxB;;AAsCA,SAASD,qBAAT,CAA8BX,SAA9B,EAAyCY,GAAzC,EAA8C;AAC5C;AACA;AACA;AACA,MAAIJ,eAAe,EAAnB;AACA,SAAO,SAASO,cAAT,CAAwBC,KAAxB,EAA+B;AACpCR,iBAAaI,GAAb,IAAoBI,KAApB;AACAhB,cAAUU,QAAV,CAAmBF,YAAnB;AACD,GAHD;AAID;;AAEDV,kBAAkBmB,KAAlB,GAA0B;AACxB;;;;;;;;;;;;;;;;AAgBAlB,qBAAmB,2BAAUE,kBAAV,EAA8B;AAC/C,WAAOH,kBAAkBC,iBAAlB,CAAoC,IAApC,EAA0CE,kBAA1C,CAAP;AACD,GAnBuB;;AAqBxB;;;;;;;;;;;;;;;AAeAU,wBAAsB,8BAAUC,GAAV,EAAe;AACnC,WAAOd,kBAAkBa,oBAAlB,CAAuC,IAAvC,EAA6CC,GAA7C,CAAP;AACD;AAtCuB,CAA1B;;AAyCAM,OAAOC,OAAP,GAAiBrB,iBAAjB","file":"ReactStateSetters.js","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (component, funcReturningState) {\n    return function (a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\n\nmodule.exports = ReactStateSetters;"]}