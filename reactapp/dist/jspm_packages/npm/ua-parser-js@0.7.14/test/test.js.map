{"version":3,"sources":["../../../../../jspm_packages/npm/ua-parser-js@0.7.14/test/test.js"],"names":["assert","require","requirejs","UAParser","browsers","cpus","devices","engines","os","parser","methods","title","label","list","properties","describe","ua","deepEqual","setUA","getResult","i","j","desc","expect","result","forEach","m","it","equal","undefined","uaString","myOwnBrowser","BROWSER","NAME","VERSION","MAJOR","parser1","browser","getBrowser","name","version","major","parser2","done","config","baseUrl","paths"],"mappings":"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","file":"test.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar requirejs = require('requirejs');\nvar UAParser = require('../src/ua-parser');\nvar browsers = require('./browser-test.json!systemjs-json');\nvar cpus = require('./cpu-test.json!systemjs-json');\nvar devices = require('./device-test.json!systemjs-json');\nvar engines = require('./engine-test.json!systemjs-json');\nvar os = require('./os-test.json!systemjs-json');\nvar parser = new UAParser();\nvar methods = [{\n  title: 'getBrowser',\n  label: 'browser',\n  list: browsers,\n  properties: ['name', 'major', 'version']\n}, {\n  title: 'getCPU',\n  label: 'cpu',\n  list: cpus,\n  properties: ['architecture']\n}, {\n  title: 'getDevice',\n  label: 'device',\n  list: devices,\n  properties: ['model', 'type', 'vendor']\n}, {\n  title: 'getEngine',\n  label: 'engine',\n  list: engines,\n  properties: ['name', 'version']\n}, {\n  title: 'getOS',\n  label: 'os',\n  list: os,\n  properties: ['name', 'version']\n}];\ndescribe('UAParser()', function() {\n  var ua = 'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6';\n  assert.deepEqual(UAParser(ua), new UAParser().setUA(ua).getResult());\n});\nfor (var i in methods) {\n  describe(methods[i]['title'], function() {\n    for (var j in methods[i]['list']) {\n      if (!!methods[i]['list'][j].ua) {\n        describe('[' + methods[i]['list'][j].desc + ']', function() {\n          describe('\"' + methods[i]['list'][j].ua + '\"', function() {\n            var expect = methods[i]['list'][j].expect;\n            var result = parser.setUA(methods[i]['list'][j].ua).getResult()[methods[i]['label']];\n            methods[i]['properties'].forEach(function(m) {\n              it('should return ' + methods[i]['label'] + ' ' + m + ': ' + expect[m], function() {\n                assert.equal(result[m], expect[m] != 'undefined' ? expect[m] : undefined);\n              });\n            });\n          });\n        });\n      }\n    }\n  });\n}\ndescribe('Extending Regex', function() {\n  var uaString = 'Mozilla/5.0 MyOwnBrowser/1.3';\n  var myOwnBrowser = [[/(myownbrowser)\\/((\\d+)?[\\w\\.]+)/i], [UAParser.BROWSER.NAME, UAParser.BROWSER.VERSION, UAParser.BROWSER.MAJOR]];\n  var parser1 = new UAParser(uaString, {browser: myOwnBrowser});\n  assert.equal(parser1.getBrowser().name, 'MyOwnBrowser');\n  assert.equal(parser1.getBrowser().version, '1.3');\n  assert.equal(parser1.getBrowser().major, '1');\n  var parser2 = new UAParser({browser: myOwnBrowser});\n  assert.equal(parser2.getBrowser().name, undefined);\n  parser2.setUA(uaString);\n  assert.equal(parser2.getBrowser().name, 'MyOwnBrowser');\n  assert.equal(parser1.getBrowser().version, '1.3');\n});\ndescribe('Using Require.js', function() {\n  it('should loaded automatically', function(done) {\n    requirejs.config({\n      baseUrl: 'dist',\n      paths: {'ua-parser-js': 'ua-parser.min'}\n    });\n    requirejs(['ua-parser-js'], function(ua) {\n      var parser = new ua('Dillo/1.0');\n      assert.deepEqual(parser.getBrowser().name, 'Dillo');\n      done();\n    });\n  });\n});\n"]}