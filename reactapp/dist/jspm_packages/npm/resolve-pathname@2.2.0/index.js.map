{"version":3,"sources":["../../../../jspm_packages/npm/resolve-pathname@2.2.0/index.js"],"names":["isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","resolvePathname","to","from","arguments","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"mappings":";AAAA;AACA;;;;;AACA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,SAAOA,SAASC,MAAT,CAAgB,CAAhB,MAAuB,GAA9B;AACD;;AAED;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,OAAK,IAAIC,IAAID,KAAR,EAAeE,IAAID,IAAI,CAAvB,EAA0BE,IAAIJ,KAAKK,MAAxC,EAAgDF,IAAIC,CAApD,EAAuDF,KAAK,CAAL,EAAQC,KAAK,CAApE,EAAuE;AACrEH,SAAKE,CAAL,IAAUF,KAAKG,CAAL,CAAV;AACD;;AAEDH,OAAKM,GAAL;AACD;;AAED;AACA,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAC3B,MAAIC,OAAOC,UAAUL,MAAV,GAAmB,CAAnB,IAAwBK,UAAU,CAAV,MAAiBC,SAAzC,GAAqDD,UAAU,CAAV,CAArD,GAAoE,EAA/E;;AAEA,MAAIE,UAAUJ,MAAMA,GAAGK,KAAH,CAAS,GAAT,CAAN,IAAuB,EAArC;AACA,MAAIC,YAAYL,QAAQA,KAAKI,KAAL,CAAW,GAAX,CAAR,IAA2B,EAA3C;;AAEA,MAAIE,UAAUP,MAAMZ,WAAWY,EAAX,CAApB;AACA,MAAIQ,YAAYP,QAAQb,WAAWa,IAAX,CAAxB;AACA,MAAIQ,aAAaF,WAAWC,SAA5B;;AAEA,MAAIR,MAAMZ,WAAWY,EAAX,CAAV,EAA0B;AACxB;AACAM,gBAAYF,OAAZ;AACD,GAHD,MAGO,IAAIA,QAAQP,MAAZ,EAAoB;AACzB;AACAS,cAAUR,GAAV;AACAQ,gBAAYA,UAAUI,MAAV,CAAiBN,OAAjB,CAAZ;AACD;;AAED,MAAI,CAACE,UAAUT,MAAf,EAAuB,OAAO,GAAP;;AAEvB,MAAIc,mBAAmB,KAAK,CAA5B;AACA,MAAIL,UAAUT,MAAd,EAAsB;AACpB,QAAIe,OAAON,UAAUA,UAAUT,MAAV,GAAmB,CAA7B,CAAX;AACAc,uBAAmBC,SAAS,GAAT,IAAgBA,SAAS,IAAzB,IAAiCA,SAAS,EAA7D;AACD,GAHD,MAGO;AACLD,uBAAmB,KAAnB;AACD;;AAED,MAAIE,KAAK,CAAT;AACA,OAAK,IAAInB,IAAIY,UAAUT,MAAvB,EAA+BH,KAAK,CAApC,EAAuCA,GAAvC,EAA4C;AAC1C,QAAIoB,OAAOR,UAAUZ,CAAV,CAAX;;AAEA,QAAIoB,SAAS,GAAb,EAAkB;AAChBvB,gBAAUe,SAAV,EAAqBZ,CAArB;AACD,KAFD,MAEO,IAAIoB,SAAS,IAAb,EAAmB;AACxBvB,gBAAUe,SAAV,EAAqBZ,CAArB;AACAmB;AACD,KAHM,MAGA,IAAIA,EAAJ,EAAQ;AACbtB,gBAAUe,SAAV,EAAqBZ,CAArB;AACAmB;AACD;AACF;;AAED,MAAI,CAACJ,UAAL,EAAiB,OAAOI,IAAP,EAAaA,EAAb,EAAiB;AAChCP,cAAUS,OAAV,CAAkB,IAAlB;AACD,OAAIN,cAAcH,UAAU,CAAV,MAAiB,EAA/B,KAAsC,CAACA,UAAU,CAAV,CAAD,IAAiB,CAAClB,WAAWkB,UAAU,CAAV,CAAX,CAAxD,CAAJ,EAAuFA,UAAUS,OAAV,CAAkB,EAAlB;;AAExF,MAAIC,SAASV,UAAUW,IAAV,CAAe,GAAf,CAAb;;AAEA,MAAIN,oBAAoBK,OAAOE,MAAP,CAAc,CAAC,CAAf,MAAsB,GAA9C,EAAmDF,UAAU,GAAV;;AAEnD,SAAOA,MAAP;AACD;;kBAEcjB,e","file":"index.js","sourcesContent":["/* */ \n\"format cjs\";\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash = void 0;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;"]}