{"version":3,"sources":["../../../../../../jspm_packages/npm/buffer@5.0.7/test/node/test-buffer-bytelength.js"],"names":["Buffer","require","assert","SlowBuffer","equal","byteLength","NaN","buff","ArrayBuffer","isView","slowbuff","incomplete","from","ascii","buffer","int8","Int8Array","uint8","Uint8Array","uintc8","Uint8ClampedArray","int16","Int16Array","uint16","Uint16Array","int32","Int32Array","uint32","Uint32Array","float32","Float32Array","float64","Float64Array","dv","DataView","forEach","encoding"],"mappings":"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","file":"test-buffer-bytelength.js","sourcesContent":["/* */ \n'use strict';\nvar Buffer = require('../../index').Buffer;\nvar assert = require('assert');\nvar Buffer = require('../../index').Buffer;\nvar SlowBuffer = require('../../index').SlowBuffer;\nassert.equal(Buffer.byteLength(32, 'latin1'), 2);\nassert.equal(Buffer.byteLength(NaN, 'utf8'), 3);\nassert.equal(Buffer.byteLength({}, 'latin1'), 15);\nassert.equal(Buffer.byteLength(), 9);\nvar buff = new Buffer(10);\nassert(ArrayBuffer.isView(buff));\nvar slowbuff = new SlowBuffer(10);\nassert(ArrayBuffer.isView(slowbuff));\nvar incomplete = Buffer.from([0xe4, 0xb8, 0xad, 0xe6, 0x96]);\nassert.equal(Buffer.byteLength(incomplete), 5);\nvar ascii = Buffer.from('abc');\nassert.equal(Buffer.byteLength(ascii), 3);\nvar buffer = new ArrayBuffer(8);\nassert.equal(Buffer.byteLength(buffer), 8);\nvar int8 = new Int8Array(8);\nassert.equal(Buffer.byteLength(int8), 8);\nvar uint8 = new Uint8Array(8);\nassert.equal(Buffer.byteLength(uint8), 8);\nvar uintc8 = new Uint8ClampedArray(2);\nassert.equal(Buffer.byteLength(uintc8), 2);\nvar int16 = new Int16Array(8);\nassert.equal(Buffer.byteLength(int16), 16);\nvar uint16 = new Uint16Array(8);\nassert.equal(Buffer.byteLength(uint16), 16);\nvar int32 = new Int32Array(8);\nassert.equal(Buffer.byteLength(int32), 32);\nvar uint32 = new Uint32Array(8);\nassert.equal(Buffer.byteLength(uint32), 32);\nvar float32 = new Float32Array(8);\nassert.equal(Buffer.byteLength(float32), 32);\nvar float64 = new Float64Array(8);\nassert.equal(Buffer.byteLength(float64), 64);\nvar dv = new DataView(new ArrayBuffer(2));\nassert.equal(Buffer.byteLength(dv), 2);\nassert.equal(Buffer.byteLength('', 'ascii'), 0);\nassert.equal(Buffer.byteLength('', 'HeX'), 0);\nassert.equal(Buffer.byteLength('∑éllö wørl∂!', 'utf-8'), 19);\nassert.equal(Buffer.byteLength('κλμνξο', 'utf8'), 12);\nassert.equal(Buffer.byteLength('挵挶挷挸挹', 'utf-8'), 15);\nassert.equal(Buffer.byteLength('𠝹𠱓𠱸', 'UTF8'), 12);\nassert.equal(Buffer.byteLength('hey there'), 9);\nassert.equal(Buffer.byteLength('𠱸挶νξ#xx :)'), 17);\nassert.equal(Buffer.byteLength('hello world', ''), 11);\nassert.equal(Buffer.byteLength('hello world', 'abc'), 11);\nassert.equal(Buffer.byteLength('ßœ∑≈', 'unkn0wn enc0ding'), 10);\nassert.equal(Buffer.byteLength('aGVsbG8gd29ybGQ=', 'base64'), 11);\nassert.equal(Buffer.byteLength('bm9kZS5qcyByb2NrcyE=', 'base64'), 14);\nassert.equal(Buffer.byteLength('aGkk', 'base64'), 3);\nassert.equal(Buffer.byteLength('bHNrZGZsa3NqZmtsc2xrZmFqc2RsZmtqcw==', 'base64'), 25);\nassert.equal(Buffer.byteLength('aaa=', 'base64'), 2);\nassert.equal(Buffer.byteLength('aaaa==', 'base64'), 3);\nassert.equal(Buffer.byteLength('Il était tué'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'utf8'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'ascii'), 12);\nassert.equal(Buffer.byteLength('Il était tué', 'latin1'), 12);\nassert.equal(Buffer.byteLength('Il était tué', 'binary'), 12);\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  assert.equal(24, Buffer.byteLength('Il était tué', encoding));\n});\n"]}