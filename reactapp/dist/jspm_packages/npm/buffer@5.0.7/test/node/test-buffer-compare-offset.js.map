{"version":3,"sources":["../../../../../../jspm_packages/npm/buffer@5.0.7/test/node/test-buffer-compare-offset.js"],"names":["Buffer","require","assert","a","from","b","equal","compare","undefined","valueOf","Infinity","oor","throws"],"mappings":"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","file":"test-buffer-compare-offset.js","sourcesContent":["/* */ \n'use strict';\nvar Buffer = require('../../index').Buffer;\nvar assert = require('assert');\nvar a = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\nvar b = Buffer.from([5, 6, 7, 8, 9, 0, 1, 2, 3, 4]);\nassert.equal(-1, a.compare(b));\nassert.equal(-1, a.compare(b, 0));\nassert.equal(-1, a.compare(b, '0'));\nassert.equal(-1, a.compare(b, 0, undefined, 0));\nassert.equal(1, a.compare(b, 0, 0, 0));\nassert.equal(1, a.compare(b, '0', '0', '0'));\nassert.equal(1, a.compare(b, 6, 10));\nassert.equal(-1, a.compare(b, 6, 10, 0, 0));\nassert.equal(1, a.compare(b, 0, 5, 4));\nassert.equal(1, a.compare(b, 5, undefined, 1));\nassert.equal(-1, a.compare(b, 2, 4, 2));\nassert.equal(-1, a.compare(b, 0, 7, 4));\nassert.equal(-1, a.compare(b, 0, 7, 4, 6));\nassert.equal(1, a.compare(b, 0, null));\nassert.equal(-1, a.compare(b, 0, {valueOf: () => 5}));\nassert.equal(1, a.compare(b, Infinity, -Infinity));\nassert.equal(1, a.compare(b, '0xff'));\nvar oor = /out of range index/;\nassert.throws(() => a.compare(b, 0, 100, 0), oor);\nassert.throws(() => a.compare(b, 0, 1, 0, 100), oor);\nassert.throws(() => a.compare(b, -1), oor);\nassert.throws(() => a.compare(b, 0, '0xff'), oor);\nassert.throws(() => a.compare(b, 0, Infinity), oor);\nassert.throws(() => a.compare(b, -Infinity, Infinity), oor);\nassert.throws(() => a.compare(), /Argument must be a Buffer/);\n"]}