{"version":3,"sources":["../../../../../../jspm_packages/npm/buffer@5.0.7/test/node/test-buffer-badhex.js"],"names":["Buffer","require","assert","buf1","alloc","strictEqual","length","deepStrictEqual","write","toString","buf2","from","buf3","buf4","buf5","i","hex","badHex","slice"],"mappings":"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","file":"test-buffer-badhex.js","sourcesContent":["/* */ \n'use strict';\nvar Buffer = require('../../index').Buffer;\nvar assert = require('assert');\nvar Buffer = require('../../index').Buffer;\n{\n  var buf1 = Buffer.alloc(4);\n  assert.strictEqual(buf1.length, 4);\n  assert.deepStrictEqual(buf1, new Buffer([0, 0, 0, 0]));\n  assert.strictEqual(buf1.write('abcdxx', 0, 'hex'), 2);\n  assert.deepStrictEqual(buf1, new Buffer([0xab, 0xcd, 0x00, 0x00]));\n  assert.strictEqual(buf1.toString('hex'), 'abcd0000');\n  assert.strictEqual(buf1.write('abcdef01', 0, 'hex'), 4);\n  assert.deepStrictEqual(buf1, new Buffer([0xab, 0xcd, 0xef, 0x01]));\n  assert.strictEqual(buf1.toString('hex'), 'abcdef01');\n  var buf2 = Buffer.from(buf1.toString('hex'), 'hex');\n  assert.strictEqual(buf1.toString('hex'), buf2.toString('hex'));\n  var buf3 = Buffer.alloc(5);\n  assert.strictEqual(buf3.write('abcdxx', 1, 'hex'), 2);\n  assert.strictEqual(buf3.toString('hex'), '00abcd0000');\n  var buf4 = Buffer.alloc(4);\n  assert.deepStrictEqual(buf4, new Buffer([0, 0, 0, 0]));\n  assert.strictEqual(buf4.write('xxabcd', 0, 'hex'), 0);\n  assert.deepStrictEqual(buf4, new Buffer([0, 0, 0, 0]));\n  assert.strictEqual(buf4.write('xxab', 1, 'hex'), 0);\n  assert.deepStrictEqual(buf4, new Buffer([0, 0, 0, 0]));\n  assert.strictEqual(buf4.write('cdxxab', 0, 'hex'), 1);\n  assert.deepStrictEqual(buf4, new Buffer([0xcd, 0, 0, 0]));\n  var buf5 = Buffer.alloc(256);\n  for (var i = 0; i < 256; i++)\n    buf5[i] = i;\n  var hex = buf5.toString('hex');\n  assert.deepStrictEqual(Buffer.from(hex, 'hex'), buf5);\n  var badHex = hex.slice(0, 256) + 'xx' + hex.slice(256, 510);\n  assert.deepStrictEqual(Buffer.from(badHex, 'hex'), buf5.slice(0, 128));\n}\n"]}