{"version":3,"sources":["../../../../../../jspm_packages/npm/buffer@5.0.7/test/node/test-buffer-slow.js"],"names":["Buffer","require","assert","buffer","SlowBuffer","ones","sb","strictEqual","length","fill","entries","key","value","deepStrictEqual","byteLength","kMaxLength","e","equal","message","NaN","throws","Infinity"],"mappings":"AAAA;AACA;;;;AACA,IAAIA,SAASC,QAAQ,aAAR,EAAuBD,MAApC;AACA,IAAIE,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,SAASF,QAAQ,aAAR,CAAb;AACA,IAAID,SAASG,OAAOH,MAApB;AACA,IAAII,aAAaD,OAAOC,UAAxB;AACA,IAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAX;AACA,IAAIC,KAAKF,WAAW,CAAX,CAAT;AACAF,OAAOI,cAAcN,MAArB;AACAE,OAAOK,WAAP,CAAmBD,GAAGE,MAAtB,EAA8B,CAA9B;AACAF,GAAGG,IAAH,CAAQ,CAAR;;;;;;AACA,uBAAyBH,GAAGI,OAAH,EAAzB,8HAAuC;AAAA;;AAAA;;AAAA,QAA7BC,GAA6B;AAAA,QAAxBC,KAAwB;;AACrCV,WAAOW,eAAP,CAAuBD,KAAvB,EAA8BP,KAAKM,GAAL,CAA9B;AACD;;;;;;;;;;;;;;;;AACDT,OAAOK,WAAP,CAAmBD,GAAGH,MAAH,CAAUW,UAA7B,EAAyC,CAAzC;AACAR,KAAKF,WAAW,CAAX,CAAL;AACAF,OAAOI,cAAcN,MAArB;AACAE,OAAOK,WAAP,CAAmBD,GAAGE,MAAtB,EAA8B,CAA9B;AACAF,GAAGG,IAAH,CAAQ,CAAR;;;;;;AACA,wBAAyBH,GAAGI,OAAH,EAAzB,mIAAuC;AAAA;;AAAA;;AAAA,QAA7BC,GAA6B;AAAA,QAAxBC,KAAwB;;AACrCV,WAAOW,eAAP,CAAuBD,KAAvB,EAA8BP,KAAKM,GAAL,CAA9B;AACD;;;;;;;;;;;;;;;;AACDT,OAAOK,WAAP,CAAmBH,WAAW,CAAX,EAAcI,MAAjC,EAAyC,CAAzC;AACA,IAAI;AACFN,SAAOK,WAAP,CAAmBH,WAAWD,OAAOY,UAAlB,EAA8BP,MAAjD,EAAyDL,OAAOY,UAAhE;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU;AACVd,SAAOe,KAAP,CAAaD,EAAEE,OAAf,EAAwB,gCAAxB;AACD;AACDhB,OAAOK,WAAP,CAAmBH,WAAW,GAAX,EAAgBI,MAAnC,EAA2C,CAA3C;AACAN,OAAOK,WAAP,CAAmBH,WAAW,IAAX,EAAiBI,MAApC,EAA4C,CAA5C;AACAN,OAAOK,WAAP,CAAmBH,aAAaI,MAAhC,EAAwC,CAAxC;AACAN,OAAOK,WAAP,CAAmBH,WAAWe,GAAX,EAAgBX,MAAnC,EAA2C,CAA3C;AACAN,OAAOK,WAAP,CAAmBH,WAAW,EAAX,EAAeI,MAAlC,EAA0C,CAA1C;AACAN,OAAOK,WAAP,CAAmBH,WAAW,QAAX,EAAqBI,MAAxC,EAAgD,CAAhD;AACAN,OAAOkB,MAAP,CAAc,YAAW;AACvBhB,aAAWiB,QAAX;AACD,CAFD,EAEG,uBAFH;AAGAnB,OAAOkB,MAAP,CAAc,YAAW;AACvBhB,aAAW,CAAC,CAAZ;AACD,CAFD,EAEG,uBAFH;AAGAF,OAAOkB,MAAP,CAAc,YAAW;AACvBhB,aAAWD,OAAOY,UAAP,GAAoB,CAA/B;AACD,CAFD,EAEG,uBAFH","file":"test-buffer-slow.js","sourcesContent":["/* */ \n'use strict';\nvar Buffer = require('../../index').Buffer;\nvar assert = require('assert');\nvar buffer = require('../../index');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar ones = [1, 1, 1, 1];\nvar sb = SlowBuffer(4);\nassert(sb instanceof Buffer);\nassert.strictEqual(sb.length, 4);\nsb.fill(1);\nfor (var [key, value] of sb.entries()) {\n  assert.deepStrictEqual(value, ones[key]);\n}\nassert.strictEqual(sb.buffer.byteLength, 4);\nsb = SlowBuffer(4);\nassert(sb instanceof Buffer);\nassert.strictEqual(sb.length, 4);\nsb.fill(1);\nfor (var [key, value] of sb.entries()) {\n  assert.deepStrictEqual(value, ones[key]);\n}\nassert.strictEqual(SlowBuffer(0).length, 0);\ntry {\n  assert.strictEqual(SlowBuffer(buffer.kMaxLength).length, buffer.kMaxLength);\n} catch (e) {\n  assert.equal(e.message, 'Array buffer allocation failed');\n}\nassert.strictEqual(SlowBuffer('6').length, 6);\nassert.strictEqual(SlowBuffer(true).length, 1);\nassert.strictEqual(SlowBuffer().length, 0);\nassert.strictEqual(SlowBuffer(NaN).length, 0);\nassert.strictEqual(SlowBuffer({}).length, 0);\nassert.strictEqual(SlowBuffer('string').length, 0);\nassert.throws(function() {\n  SlowBuffer(Infinity);\n}, 'invalid Buffer length');\nassert.throws(function() {\n  SlowBuffer(-1);\n}, 'invalid Buffer length');\nassert.throws(function() {\n  SlowBuffer(buffer.kMaxLength + 1);\n}, 'invalid Buffer length');\n"]}