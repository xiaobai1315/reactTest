{"version":3,"sources":["../../../../../../jspm_packages/npm/buffer@5.0.7/test/node/test-buffer-arraybuffer.js"],"names":["Buffer","require","assert","LENGTH","ab","ArrayBuffer","dv","DataView","ui","Uint8Array","buf","from","ok","equal","parent","undefined","buffer","length","byteLength","fill","i","writeUInt32LE","writeUInt32BE","writeDoubleLE","getUint32","getFloat64","throws","AB","Object","setPrototypeOf","prototype","TypeError","b","allocUnsafe","writeFloatLE","writeFloatBE","writeDoubleBE","err","RangeError","test","message"],"mappings":"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","file":"test-buffer-arraybuffer.js","sourcesContent":["/* */ \n'use strict';\nvar Buffer = require('../../index').Buffer;\nvar assert = require('assert');\nvar Buffer = require('../../index').Buffer;\nvar LENGTH = 16;\nvar ab = new ArrayBuffer(LENGTH);\nvar dv = new DataView(ab);\nvar ui = new Uint8Array(ab);\nvar buf = Buffer.from(ab);\nassert.ok(buf instanceof Buffer);\nassert.equal(buf.parent, undefined);\nassert.equal(buf.buffer, ab);\nassert.equal(buf.length, ab.byteLength);\nbuf.fill(0xC);\nfor (var i = 0; i < LENGTH; i++) {\n  assert.equal(ui[i], 0xC);\n  ui[i] = 0xF;\n  assert.equal(buf[i], 0xF);\n}\nbuf.writeUInt32LE(0xF00, 0);\nbuf.writeUInt32BE(0xB47, 4);\nbuf.writeDoubleLE(3.1415, 8);\nassert.equal(dv.getUint32(0, true), 0xF00);\nassert.equal(dv.getUint32(4), 0xB47);\nassert.equal(dv.getFloat64(8, true), 3.1415);\nassert.throws(function() {\n  function AB() {}\n  Object.setPrototypeOf(AB, ArrayBuffer);\n  Object.setPrototypeOf(AB.prototype, ArrayBuffer.prototype);\n  Buffer.from(new AB());\n}, TypeError);\nvar b = Buffer.allocUnsafe(1);\nb.writeFloatLE(11.11, 0, true);\nb.writeFloatBE(11.11, 0, true);\nb.writeDoubleLE(11.11, 0, true);\nb.writeDoubleBE(11.11, 0, true);\n{\n  var ab = new Uint8Array(5);\n  ab[0] = 1;\n  ab[1] = 2;\n  ab[2] = 3;\n  ab[3] = 4;\n  ab[4] = 5;\n  var buf = Buffer.from(ab.buffer, 1, 3);\n  assert.equal(buf.length, 3);\n  assert.equal(buf[0], 2);\n  assert.equal(buf[1], 3);\n  assert.equal(buf[2], 4);\n  buf[0] = 9;\n  assert.equal(ab[1], 9);\n  assert.throws(() => Buffer.from(ab.buffer, 6), (err) => {\n    assert(err instanceof RangeError);\n    assert(/'offset' is out of bounds/.test(err.message));\n    return true;\n  });\n  assert.throws(() => Buffer.from(ab.buffer, 3, 6), (err) => {\n    assert(err instanceof RangeError);\n    assert(/'length' is out of bounds/.test(err.message));\n    return true;\n  });\n}\n{\n  var ab = new Uint8Array(5);\n  ab[0] = 1;\n  ab[1] = 2;\n  ab[2] = 3;\n  ab[3] = 4;\n  ab[4] = 5;\n  var buf = Buffer(ab.buffer, 1, 3);\n  assert.equal(buf.length, 3);\n  assert.equal(buf[0], 2);\n  assert.equal(buf[1], 3);\n  assert.equal(buf[2], 4);\n  buf[0] = 9;\n  assert.equal(ab[1], 9);\n  assert.throws(() => Buffer(ab.buffer, 6), (err) => {\n    assert(err instanceof RangeError);\n    assert(/'offset' is out of bounds/.test(err.message));\n    return true;\n  });\n  assert.throws(() => Buffer(ab.buffer, 3, 6), (err) => {\n    assert(err instanceof RangeError);\n    assert(/'length' is out of bounds/.test(err.message));\n    return true;\n  });\n}\n"]}