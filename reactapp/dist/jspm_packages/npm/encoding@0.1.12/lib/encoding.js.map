{"version":3,"sources":["../../../../../jspm_packages/npm/encoding@0.1.12/lib/encoding.js"],"names":["Buffer","iconvLite","require","Iconv","module","exports","convert","str","to","from","useLite","checkEncoding","result","convertIconv","E","console","error","convertIconvLite","response","iconv","slice","length","decode","encode","name","toString","trim","replace","toUpperCase"],"mappings":"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","file":"encoding.js","sourcesContent":["/* */ \n(function(Buffer) {\n  'use strict';\n  var iconvLite = require('iconv-lite');\n  var Iconv = require('./iconv-loader');\n  module.exports.convert = convert;\n  function convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n    var result;\n    if (from !== 'UTF-8' && typeof str === 'string') {\n      str = new Buffer(str, 'binary');\n    }\n    if (from === to) {\n      if (typeof str === 'string') {\n        result = new Buffer(str);\n      } else {\n        result = str;\n      }\n    } else if (Iconv && !useLite) {\n      try {\n        result = convertIconv(str, to, from);\n      } catch (E) {\n        console.error(E);\n        try {\n          result = convertIconvLite(str, to, from);\n        } catch (E) {\n          console.error(E);\n          result = str;\n        }\n      }\n    } else {\n      try {\n        result = convertIconvLite(str, to, from);\n      } catch (E) {\n        console.error(E);\n        result = str;\n      }\n    }\n    if (typeof result === 'string') {\n      result = new Buffer(result, 'utf-8');\n    }\n    return result;\n  }\n  function convertIconv(str, to, from) {\n    var response,\n        iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n  }\n  function convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n      return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n      return iconvLite.encode(str, to);\n    } else {\n      return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n  }\n  function checkEncoding(name) {\n    return (name || '').toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\\-1987$/i, 'CP949').replace(/^us[\\-_]?ascii$/i, 'ASCII').toUpperCase();\n  }\n})(require('buffer').Buffer);\n"]}