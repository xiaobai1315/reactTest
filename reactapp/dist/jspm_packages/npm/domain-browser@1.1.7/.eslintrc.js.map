{"version":3,"sources":["../../../../jspm_packages/npm/domain-browser@1.1.7/.eslintrc.js"],"names":["IGNORE","WARN","ERROR","MAX_PARAMS","module","exports","ecmaFeatures","arrowFunctions","binaryLiterals","blockBindings","classes","defaultParams","destructuring","forOf","generators","modules","objectLiteralComputedProperties","objectLiteralDuplicateProperties","objectLiteralShorthandMethods","objectLiteralShorthandProperties","octalLiterals","regexUFlag","regexYFlag","restParams","spread","superInFunctions","templateStrings","unicodeCodePointEscapes","globalReturn","jsx","experimentalObjectRestSpread","env","browser","node","es6","commonjs","amd","rules","ignore","terms","location","allowSingleLine","before","after","SwitchCase","beforeColon","afterColon","beforeBlockComment","allowBlockStart"],"mappings":"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","file":".eslintrc.js","sourcesContent":["// 2015 December 1\n// https://github.com/bevry/base\n// http://eslint.org\n/* eslint no-warning-comments: 0 */\n'use strict'\n\nconst IGNORE = 0, WARN = 1, ERROR = 2, MAX_PARAMS = 4\n\nmodule.exports = {\n\t// parser: 'babel-eslint',\n\t// ^ the bundled ESLINT parser is now actually quite good, and supports the ecmaFeatures property\n\tecmaFeatures: {\n\t\t// this property only works with the bundled ESLINT parser, not babel-eslint\n\t\tarrowFunctions: true,\n\t\tbinaryLiterals: true,\n\t\tblockBindings: true,\n\t\tclasses: true,\n\t\tdefaultParams: true,\n\t\tdestructuring: true,\n\t\tforOf: true,\n\t\tgenerators: true,\n\t\tmodules: false,  // Disabled due to https://twitter.com/balupton/status/671519915795345410\n\t\tobjectLiteralComputedProperties: true,\n\t\tobjectLiteralDuplicateProperties: true,\n\t\tobjectLiteralShorthandMethods: true,\n\t\tobjectLiteralShorthandProperties: true,\n\t\toctalLiterals: true,\n\t\tregexUFlag: true,\n\t\tregexYFlag: true,\n\t\trestParams: true,\n\t\tspread: true,\n\t\tsuperInFunctions: true,\n\t\ttemplateStrings: true,\n\t\tunicodeCodePointEscapes: true,\n\t\tglobalReturn: true,\n\t\tjsx: true,\n\t\texperimentalObjectRestSpread: true\n\t},\n\tenv: {\n\t\tbrowser: true,\n\t\tnode: true,\n\t\tes6: true,\n\t\tcommonjs: true,\n\t\tamd: true\n\t},\n\trules: {\n\t\t// ----------------------------\n\t\t// Problems with these rules\n\t\t// If we can figure out how to enable the following, that would be great\n\n\t\t// Two spaces after one line if or else:\n\t\t// if ( blah )  return\n\t\t// Insead of one space:\n\t\t// if ( blah ) return\n\n\t\t// No spaces on embedded function:\n\t\t// .forEach(function(key, value){\n\t\t// instead of:\n\t\t// .forEach(function (key, value) {\n\n\t\t// Else and catch statements on the same line as closing brace:\n\t\t// } else {\n\t\t// } catch (e) {\n\t\t// instead of:\n\t\t// }\n\t\t// else {\n\n\n\t\t// --------------------------------------\n\t\t// Possible Errors\n\t\t// The following rules point out areas where you might have made mistakes.\n\n\t\t// ES6 supports dangling commas\n\t\t'comma-dangle': IGNORE,\n\n\t\t// Don't allow assignments in conditional statements (if, while, etc.)\n\t\t'no-cond-assign': [ERROR, 'always'],\n\n\t\t// Warn but don't error about console statements\n\t\t'no-console': WARN,\n\n\t\t// Allow while(true) loops\n\t\t'no-constant-condition': IGNORE,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-control-regex': ERROR,\n\n\t\t// Warn but don't error about console statements\n\t\t'no-debugger': WARN,\n\n\t\t// Don't allow duplicate arguments in a function, they can cause errors\n\t\t'no-dupe-args': ERROR,\n\n\t\t// Disallow duplicate keys in an object, they can cause errors\n\t\t'no-dupe-keys': ERROR,\n\n\t\t// Disallow duplicate case statements in a switch\n\t\t'no-duplicate-case': ERROR,\n\n\t\t// Disallow empty [] in regular expressions as they cause unexpected behaviour\n\t\t'no-empty-character-class': ERROR,\n\n\t\t// Allow empty block statements, they are useful for clarity\n\t\t'no-empty': IGNORE,\n\n\t\t// Overwriting the exception argument in a catch statement can cause memory leaks in some browsers\n\t\t'no-ex-assign': ERROR,\n\n\t\t// Disallow superflous boolean casts, they offer no value\n\t\t'no-extra-boolean-cast': ERROR,\n\n\t\t// Allow superflous parenthesis as they offer clarity in some cases\n\t\t'no-extra-parens': IGNORE,\n\n\t\t// Disallow superflous semicolons, they offer no value\n\t\t'no-extra-semi': IGNORE,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-func-assign': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-inner-declarations': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-invalid-regexp': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-irregular-whitespace': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-negated-in-lhs': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-obj-calls': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t// Instead of /  /  used / {ERROR}/ instead\n\t\t'no-regex-spaces': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-sparse-arrays': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-unexpected-multiline': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-unreachable': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'use-isnan': ERROR,\n\n\t\t// We use YUIdoc, not JSDoc\n\t\t'valid-jsdoc': IGNORE,\n\n\t\t// Seems like a good idea to error about this\n\t\t'valid-typeof': ERROR,\n\n\n\t\t// --------------------------------------\n\t\t// Best Practices\n\t\t// These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.\n\n\t\t// Meh\n\t\t'accessor-pairs': IGNORE,\n\n\t\t// This rule seems buggy\n\t\t'block-scoped-var': IGNORE,\n\n\t\t// Disable complexity checks, they are annoying and not that useful in detecting actual complexity\n\t\t'complexity': IGNORE,\n\n\t\t// We use blank returns for break statements\n\t\t'consistent-return': IGNORE,\n\n\t\t// Always require curly braces unless the statement is all on a single line\n\t\t'curly': [ERROR, 'multi-line'],\n\n\t\t// If we don't have a default cause, it probably means we should throw an error\n\t\t'default-case': ERROR,\n\n\t\t// Dots should be on the newlines\n\t\t// chainableThingy\n\t\t//   .doSomething()\n\t\t//   .doSomethingElse()\n\t\t'dot-location': [ERROR, 'property'],\n\n\t\t// Use dot notation where possible\n\t\t'dot-notation': ERROR,\n\n\t\t// Unless you are doing == null, then force === to avoid truthy/falsey mistakes\n\t\t'eqeqeq': [ERROR, 'allow-null'],\n\n\t\t// Always use hasOwnProperty when doing for in\n\t\t'guard-for-in': ERROR,\n\n\t\t// Warn about alert statements in our code\n\t\t// Use one of the suggested alternatives instead\n\t\t// Reasoning is they could be mistaken for left over debugging statements\n\t\t'no-alert': WARN,\n\n\t\t// They are very slow\n\t\t'no-caller': ERROR,\n\n\t\t// Wow...\n\t\t'no-case-declarations': ERROR,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-div-regex': ERROR,\n\n\t\t// Returns in else statements offer code clarity, so disable this rule\n\t\t'no-else-return': IGNORE,\n\n\t\t// Seems like a good idea to error about this\n\t\t'no-empty-label': ERROR,\n\n\t\t// Seems sensible\n\t\t'no-empty-pattern': ERROR,\n\n\t\t// We know that == null is a null and undefined check\n\t\t'no-eq-null': IGNORE,\n\n\t\t// Eval is slow and unsafe, use vm's instead\n\t\t'no-eval': ERROR,\n\n\t\t// There is never a good reason for this\n\t\t'no-extend-native': ERROR,\n\n\t\t// Don't allow useless binds\n\t\t'no-extra-bind': ERROR,\n\n\t\t// Don't allow switch case statements to follow through, use continue keyword instead\n\t\t'no-fallthrough': ERROR,\n\n\t\t// Use zero when doing decimals, otherwise it is confusing\n\t\t'no-floating-decimal': ERROR,\n\n\t\t// Cleverness is unclear\n\t\t'no-implicit-coercion': ERROR,\n\n\t\t// A sneaky way to do evals\n\t\t'no-implied-eval': ERROR,\n\n\t\t// This throws for a lot of senseless things, like chainy functions\n\t\t'no-invalid-this': IGNORE,\n\n\t\t// Use proper iterators instead\n\t\t'no-iterator': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-labels': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-lone-blocks': ERROR,\n\n\t\t// Loop functions always cause problems, as the scope isn't clear through iterations\n\t\t'no-loop-func': ERROR,\n\n\t\t// This is a great idea\n\t\t// Although ignore -1 and 0 as it is common with indexOf\n\t\t'no-magic-numbers': [WARN, { ignore: [-1, 0] }],\n\n\t\t// We like multi spaces for clarity\n\t\t// E.g. We like\n\t\t// if ( blah )  return foo\n\t\t// Instead of:\n\t\t// if ( blah ) return foo\n\t\t// @TODO would be great to enforce the above\n\t\t'no-multi-spaces': IGNORE,\n\n\t\t// Use ES6 template strings instead\n\t\t'no-multi-str': ERROR,\n\n\t\t// Would be silly to allow this\n\t\t'no-native-reassign': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-new-func': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-new-wrappers': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-new': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-octal-escape': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-octal': ERROR,\n\n\t\t// We got to be pretty silly if we don't realise we are doing this\n\t\t// As such, take any usage as intentional and aware\n\t\t'no-param-reassign': IGNORE,\n\n\t\t// We use process.env wisely\n\t\t'no-process-env': IGNORE,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-proto': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-redeclare': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-return-assign': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-script-url': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-self-compare': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-sequences': ERROR,\n\n\t\t// We always want proper error objects as they have stack traces and respond to instanceof Error checks\n\t\t'no-throw-literal': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-unused-expressions': ERROR,\n\n\t\t// Seems sensible\n\t\t'no-useless-call': ERROR,\n\n\t\t// Seems sensible\n\t\t'no-useless-concat': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-void': ERROR,\n\n\t\t// Warn about todos\n\t\t'no-warning-comments': [WARN, { terms: ['todo', 'fixme'], location: 'anywhere' }],\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-with': ERROR,\n\n\t\t// Always specify a radix to avoid errors\n\t\t'radix': ERROR,\n\n\t\t// We appreciate the clarity late defines offer\n\t\t'vars-on-top': IGNORE,\n\n\t\t// Wrap instant called functions in parenthesis for clearer intent\n\t\t'wrap-iife': ERROR,\n\n\t\t// Because we force === and never allow assignments in conditions\n\t\t// we have no need for yoda statements, so disable them\n\t\t'yoda': [ERROR, 'never'],\n\n\n\t\t// --------------------------------------\n\t\t// Strict Mode\n\t\t// These rules relate to using strict mode.\n\n\t\t// Ensure that use strict is specified to prevent the runtime erorr:\n\t\t// SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode\n\t\t'strict': [ERROR, 'global'],\n\n\n\t\t// --------------------------------------\n\t\t// Variables\n\t\t// These rules have to do with variable declarations.\n\n\t\t// We don't care\n\t\t'init-declaration': IGNORE,\n\n\t\t// Don't allow the catch method to shadow objects as browsers handle this differently\n\t\t// Update: We don't care for IE8\n\t\t'no-catch-shadow': IGNORE,\n\n\t\t// Don't use delete, it disables optimisations\n\t\t'no-delete-var': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-label-var': ERROR,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-shadow-restricted-names': ERROR,\n\n\t\t// We use shadowing\n\t\t'no-shadow': IGNORE,\n\n\t\t// Makes sense\n\t\t'no-undef-init': ERROR,\n\n\t\t// Error when an undefined variable is used\n\t\t'no-undef': ERROR,\n\n\t\t// typeof blah === 'undefined' should always be used\n\t\t'no-undefined': ERROR,\n\n\t\t// Warn us when we don't use something\n\t\t'no-unused-vars': WARN,\n\n\t\t// Error when we try and use something before it is defined\n\t\t'no-use-before-define': ERROR,\n\n\n\t\t// --------------------------------------\n\t\t// Node.js and CommonJS\n\t\t// These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.\n\n\t\t// Seems to difficult to enforce\n\t\t'callback-return': IGNORE,\n\n\t\t// We use require where it is appropriate to use it\n\t\t'global-require': IGNORE,\n\n\t\t// Force handling of callback errors\n\t\t'handle-callback-err': ERROR,\n\n\t\t// @TODO decide if this is good or not\n\t\t'no-mixed-requires': ERROR,\n\n\t\t// Disallow error prone syntax\n\t\t'no-new-require': ERROR,\n\n\t\t// Always use path.join for windows support\n\t\t'no-path-concat': ERROR,\n\n\t\t// We know what we are doing\n\t\t'no-process-exit': IGNORE,\n\n\t\t// No need to disallow any modules\n\t\t'no-restricted-modules': IGNORE,\n\n\t\t// Sometimes sync methods are useful, so warn but don't error\n\t\t'no-sync': WARN,\n\n\n\t\t// --------------------------------------\n\t\t// Stylistic\n\t\t// These rules are purely matters of style and are quite subjective.\n\n\t\t// We don't use spaces with brackets\n\t\t'array-bracket-spacing': [ERROR, 'never'],\n\n\t\t// Disallow or enforce spaces inside of single line blocks\n\t\t'block-spacing': [ERROR, 'always'],\n\n\t\t// Opening brace on same line, closing brace on its own line, except when statement is a single line\n\t\t'brace-style': [ERROR, 'stroustrup', { allowSingleLine: true }],\n\n\t\t// Use camel case\n\t\t'camelcase': ERROR,\n\n\t\t// Require a comma after always\n\t\t'comma-spacing': [ERROR, { before: false, after: true }],\n\n\t\t// Commas go last, we have tooling to detect if we forget a comma\n\t\t'comma-style': [ERROR, 'last'],\n\n\t\t// Require or disallow padding inside computed properties\n\t\t'computed-property-spacing': [ERROR, 'never'],\n\n\t\t// Enabling this was incredibly annoying when doing layers of nesting\n\t\t'consistent-this': IGNORE,\n\n\t\t// Enable to make UNIX people's lives easier\n\t\t'eol-last': ERROR,\n\n\t\t// We like anonymous functions\n\t\t'func-names': IGNORE,\n\n\t\t// Prefer to define functions via variables\n\t\t'func-style': [WARN, 'declaration'],\n\n\t\t// Sometimes short names are appropriate\n\t\t'id-length': IGNORE,\n\n\t\t// Camel case handles this for us\n\t\t'id-match': IGNORE,\n\n\t\t// Use tabs and indent case blocks\n\t\t'indent': [ERROR, 'tab', { SwitchCase: WARN }],\n\n\t\t// Prefer double qoutes for JSX properties: <a b=\"c\" />, <a b='\"' />\n\t\t'jsx-quotes': [ERROR, 'prefer-double'],\n\n\t\t// Space after the colon\n\t\t'key-spacing': [ERROR, {\n\t\t\tbeforeColon: false,\n\t\t\tafterColon: true\n\t\t}],\n\n\t\t// Enforce unix line breaks\n\t\t'linebreak-style': [ERROR, 'unix'],\n\n\t\t// Enforce new lines before block comments\n\t\t'lines-around-comment': [ERROR, { beforeBlockComment: true, allowBlockStart: true }],\n\n\t\t// Disabled to ensure consistency with complexity option\n\t\t'max-depth': IGNORE,\n\n\t\t// We use soft wrap\n\t\t'max-len': IGNORE,\n\n\t\t// We are smart enough to know if this is bad or not\n\t\t'max-nested-callbacks': IGNORE,\n\n\t\t// Sometimes we have no control over this for compat reasons, so just warn\n\t\t'max-params': [WARN, MAX_PARAMS],\n\n\t\t// We should be able to use whatever feels right\n\t\t'max-statements': IGNORE,\n\n\t\t// Constructors should be CamelCase\n\t\t'new-cap': ERROR,\n\n\t\t// Always use parens when instantiating a class\n\t\t'new-parens': ERROR,\n\n\t\t// Too difficult to enforce correctly as too many edge-cases\n\t\t'newline-after-var': IGNORE,\n\n\t\t// Don't use the array constructor when it is not needed\n\t\t'no-array-constructor': ERROR,\n\n\t\t// We never use bitwise, they are too clever\n\t\t'no-bitwise': ERROR,\n\n\t\t// We use continue\n\t\t'no-continue': IGNORE,\n\n\t\t// We like inline comments\n\t\t'no-inline-comments': IGNORE,\n\n\t\t// The code could be optimised if this error occurs\n\t\t'no-lonely-if': ERROR,\n\n\t\t// Don't mix spaces and tabs\n\t\t// @TODO maybe [ERROR, 'smart-tabs'] will be better, we will see\n\t\t'no-mixed-spaces-and-tabs': ERROR,\n\n\t\t// We use multiple empty lines for styling\n\t\t'no-multiple-empty-lines': IGNORE,\n\n\t\t// Sometimes it is more understandable with a negated condition\n\t\t'no-negated-condition': IGNORE,\n\n\t\t// Sometimes these are useful\n\t\t'no-nested-ternary': IGNORE,\n\n\t\t// Use {} instead of new Object()\n\t\t'no-new-object': ERROR,\n\n\t\t// We use plus plus\n\t\t'no-plusplus': IGNORE,\n\n\t\t// Handled by other rules\n\t\t'no-restricted-syntax': IGNORE,\n\n\t\t// We never use this, it seems silly to allow this\n\t\t'no-spaced-func': ERROR,\n\n\t\t// Sometimes ternaries are useful\n\t\t'no-ternary': IGNORE,\n\n\t\t// Disallow trailing spaces\n\t\t'no-trailing-spaces': ERROR,\n\n\t\t// Sometimes this is useful when avoiding shadowing\n\t\t'no-underscore-dangle': IGNORE,\n\n\t\t// Sensible\n\t\t'no-unneeded-ternary': ERROR,\n\n\t\t// Desirable, but too many edge cases it turns out where it is actually preferred\n\t\t'object-curly-spacing': IGNORE, // [ERROR, 'always'],\n\n\t\t// We like multiple var statements\n\t\t'one-var': IGNORE,\n\n\t\t// Force use of shorthands when available\n\t\t'operator-assignment': [ERROR, 'always'],\n\n\t\t// Should be before, but not with =, *=, /=, += lines\n\t\t// @TODO figure out how to enforce\n\t\t'operator-linebreak': IGNORE,\n\n\t\t// This rule doesn't appear to work correclty\n\t\t'padded-blocks': IGNORE,\n\n\t\t// Seems like a good idea to error about this\n\t\t'quote-props': [ERROR, 'consistent-as-needed'],\n\n\t\t// Use single quotes where escaping isn't needed\n\t\t'quotes': [ERROR, 'single', 'avoid-escape'],\n\n\t\t// We use YUIdoc\n\t\t'require-jsdoc': IGNORE,\n\n\t\t// If semi's are used, then add spacing after\n\t\t'semi-spacing': [ERROR, { before: false, after: true }],\n\n\t\t// Never use semicolons\n\t\t'semi': [ERROR, 'never'],\n\n\t\t// We don't care if our vars are alphabetical\n\t\t'sort-vars': IGNORE,\n\n\t\t// Always force a space after a keyword\n\t\t'space-after-keywords': [ERROR, 'always'],\n\n\t\t// Always force a space before a {\n\t\t'space-before-blocks': [ERROR, 'always'],\n\n\t\t// function () {, get blah () {\n\t\t'space-before-function-paren': [ERROR, 'always'],\n\n\t\t// We do this\n\t\t'space-before-keywords': [ERROR, 'always'],\n\n\t\t// This is for spacing between [], so [ WARN, ERROR, 3 ] which we don't want\n\t\t'space-in-brackets': IGNORE,\n\n\t\t// This is for spacing between (), so doSomething( WARN, ERROR, 3 ) or if ( WARN === 3 )\n\t\t// which we want for ifs, but don't want for calls\n\t\t'space-in-parens': IGNORE,\n\n\t\t// We use this\n\t\t'space-infix-ops': ERROR,\n\n\t\t// We use this\n\t\t'space-return-throw-case': ERROR,\n\n\t\t// We use this\n\t\t'space-unary-ops': ERROR,\n\n\t\t// We use this\n\t\t// 'spaced-line-comment': ERROR,\n\t\t'spaced-comment': ERROR,\n\n\t\t// We use this\n\t\t// @TODO revise this\n\t\t'wrap-regex': ERROR,\n\n\n\t\t// --------------------------------------\n\t\t// ECMAScript 6\n\n\t\t// Sensible to create more informed and clear code\n\t\t'arrow-body-style': [ERROR, 'as-needed'],\n\n\t\t// We do this, no reason why, just what we do\n\t\t'arrow-parens': [ERROR, 'always'],\n\n\t\t// Require consistent spacing for arrow functions\n\t\t'arrow-spacing': ERROR,\n\n\t\t// Makes sense as otherwise runtime error will occur\n\t\t'constructor-super': ERROR,\n\n\t\t// Seems the most consistent location for it\n\t\t'generator-star-spacing': [ERROR, 'before'],\n\n\t\t// Seems sensible\n\t\t'no-arrow-condition': ERROR,\n\n\t\t// Seems sensible\n\t\t'no-class-assign': ERROR,\n\n\t\t// Makes sense as otherwise runtime error will occur\n\t\t'no-const-assign': ERROR,\n\n\t\t// Makes sense as otherwise runtime error will occur\n\t\t'no-dupe-class-members': ERROR,\n\n\t\t// Makes sense as otherwise runtime error will occur\n\t\t'no-this-before-super': ERROR,\n\n\t\t// @TODO This probably should be an error\n\t\t// however it is useful for: for ( var key in obj ) {\n\t\t// which hopefully is more performant than let (@TODO check if it actually is more performant)\n\t\t'no-var': WARN,\n\n\t\t// Enforce ES6 object shorthand\n\t\t'object-shorthand': ERROR,\n\n\t\t// Better performance when running native\n\t\t// but horrible performance if not running native as could fallback to bind\n\t\t// https://travis-ci.org/bevry/es6-benchmarks\n\t\t'prefer-arrow-callback': IGNORE,\n\n\t\t// Sure, why not\n\t\t'prefer-const': WARN,\n\n\t\t// Controversial change, but makes sense to move towards to reduce the risk of bad people overwriting apply and call\n\t\t// https://github.com/eslint/eslint/issues/ERROR939\n\t\t'prefer-reflect': WARN,\n\n\t\t// Sure, why not\n\t\t'prefer-spread': ERROR,\n\n\t\t// Too annoying to enforce\n\t\t'prefer-template': IGNORE,\n\n\t\t// Makes sense\n\t\t'require-yield': ERROR\n\t}\n}\n"]}