{"version":3,"sources":["../../../../../../jspm_packages/npm/jquery@3.2.1/src/ajax/jsonp.js"],"names":["define","jQuery","nonce","rquery","oldCallbacks","rjsonp","ajaxSetup","jsonp","jsonpCallback","callback","pop","expando","ajaxPrefilter","s","originalSettings","jqXHR","callbackName","overwritten","responseContainer","jsonProp","test","url","data","contentType","indexOf","dataTypes","isFunction","replace","converters","error","window","arguments","always","undefined","removeProp","push"],"mappings":";;AAAA;AACAA,OAAQ,CACP,SADO,EAEP,aAFO,EAGP,cAHO,EAIP,SAJO,CAAR,EAKG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAkC;;AAErC;;AAEA,KAAIC,eAAe,EAAnB;AAAA,KACCC,SAAS,mBADV;;AAGA;AACAJ,QAAOK,SAAP,CAAkB;AACjBC,SAAO,UADU;AAEjBC,iBAAe,yBAAW;AACzB,OAAIC,WAAWL,aAAaM,GAAb,MAAwBT,OAAOU,OAAP,GAAiB,GAAjB,GAAyBT,OAAhE;AACA,QAAMO,QAAN,IAAmB,IAAnB;AACA,UAAOA,QAAP;AACA;AANgB,EAAlB;;AASA;AACAR,QAAOW,aAAP,CAAsB,YAAtB,EAAoC,UAAUC,CAAV,EAAaC,gBAAb,EAA+BC,KAA/B,EAAuC;;AAE1E,MAAIC,YAAJ;AAAA,MAAkBC,WAAlB;AAAA,MAA+BC,iBAA/B;AAAA,MACCC,WAAWN,EAAEN,KAAF,KAAY,KAAZ,KAAuBF,OAAOe,IAAP,CAAaP,EAAEQ,GAAf,IACjC,KADiC,GAEjC,OAAOR,EAAES,IAAT,KAAkB,QAAlB,IACC,CAAET,EAAEU,WAAF,IAAiB,EAAnB,EACEC,OADF,CACW,mCADX,MACqD,CAFtD,IAGCnB,OAAOe,IAAP,CAAaP,EAAES,IAAf,CAHD,IAG0B,MALhB,CADZ;;AASA;AACA,MAAKH,YAAYN,EAAEY,SAAF,CAAa,CAAb,MAAqB,OAAtC,EAAgD;;AAE/C;AACAT,kBAAeH,EAAEL,aAAF,GAAkBP,OAAOyB,UAAP,CAAmBb,EAAEL,aAArB,IAChCK,EAAEL,aAAF,EADgC,GAEhCK,EAAEL,aAFH;;AAIA;AACA,OAAKW,QAAL,EAAgB;AACfN,MAAGM,QAAH,IAAgBN,EAAGM,QAAH,EAAcQ,OAAd,CAAuBtB,MAAvB,EAA+B,OAAOW,YAAtC,CAAhB;AACA,IAFD,MAEO,IAAKH,EAAEN,KAAF,KAAY,KAAjB,EAAyB;AAC/BM,MAAEQ,GAAF,IAAS,CAAElB,OAAOiB,IAAP,CAAaP,EAAEQ,GAAf,IAAuB,GAAvB,GAA6B,GAA/B,IAAuCR,EAAEN,KAAzC,GAAiD,GAAjD,GAAuDS,YAAhE;AACA;;AAED;AACAH,KAAEe,UAAF,CAAc,aAAd,IAAgC,YAAW;AAC1C,QAAK,CAACV,iBAAN,EAA0B;AACzBjB,YAAO4B,KAAP,CAAcb,eAAe,iBAA7B;AACA;AACD,WAAOE,kBAAmB,CAAnB,CAAP;AACA,IALD;;AAOA;AACAL,KAAEY,SAAF,CAAa,CAAb,IAAmB,MAAnB;;AAEA;AACAR,iBAAca,OAAQd,YAAR,CAAd;AACAc,UAAQd,YAAR,IAAyB,YAAW;AACnCE,wBAAoBa,SAApB;AACA,IAFD;;AAIA;AACAhB,SAAMiB,MAAN,CAAc,YAAW;;AAExB;AACA,QAAKf,gBAAgBgB,SAArB,EAAiC;AAChChC,YAAQ6B,MAAR,EAAiBI,UAAjB,CAA6BlB,YAA7B;;AAED;AACC,KAJD,MAIO;AACNc,YAAQd,YAAR,IAAyBC,WAAzB;AACA;;AAED;AACA,QAAKJ,EAAGG,YAAH,CAAL,EAAyB;;AAExB;AACAH,OAAEL,aAAF,GAAkBM,iBAAiBN,aAAnC;;AAEA;AACAJ,kBAAa+B,IAAb,CAAmBnB,YAAnB;AACA;;AAED;AACA,QAAKE,qBAAqBjB,OAAOyB,UAAP,CAAmBT,WAAnB,CAA1B,EAA6D;AAC5DA,iBAAaC,kBAAmB,CAAnB,CAAb;AACA;;AAEDA,wBAAoBD,cAAcgB,SAAlC;AACA,IA3BD;;AA6BA;AACA,UAAO,QAAP;AACA;AACD,EA5ED;AA8EC,CArGD","file":"jsonp.js","sourcesContent":["/* */ \ndefine( [\n\t\"../core\",\n\t\"./var/nonce\",\n\t\"./var/rquery\",\n\t\"../ajax\"\n], function( jQuery, nonce, rquery ) {\n\n\"use strict\";\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n} );\n"]}