{"version":3,"sources":["../../../../../jspm_packages/npm/events@1.0.2/tests/add-listeners.js"],"names":["assert","require","events","e","EventEmitter","events_new_listener_emited","listeners_new_listener_emited","times_hello_emited","equal","addListener","on","event","listener","console","log","push","hello","a","b","foo","once","emit","f","setMaxListeners","deepEqual"],"mappings":";;AAAA;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,WAAR,CAAb;AACA,IAAIE,IAAI,IAAID,OAAOE,YAAX,EAAR;AACA,IAAIC,6BAA6B,EAAjC;AACA,IAAIC,gCAAgC,EAApC;AACA,IAAIC,qBAAqB,CAAzB;AACAP,OAAOQ,KAAP,CAAaL,EAAEM,WAAf,EAA4BN,EAAEO,EAA9B;AACAP,EAAEO,EAAF,CAAK,aAAL,EAAoB,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AAC5CC,UAAQC,GAAR,CAAY,kBAAkBH,KAA9B;AACAN,6BAA2BU,IAA3B,CAAgCJ,KAAhC;AACAL,gCAA8BS,IAA9B,CAAmCH,QAAnC;AACD,CAJD;AAKA,SAASI,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACnBL,UAAQC,GAAR,CAAY,OAAZ;AACAP,wBAAsB,CAAtB;AACAP,SAAOQ,KAAP,CAAa,GAAb,EAAkBS,CAAlB;AACAjB,SAAOQ,KAAP,CAAa,GAAb,EAAkBU,CAAlB;AACD;AACDf,EAAEO,EAAF,CAAK,OAAL,EAAcM,KAAd;AACA,IAAIG,MAAM,SAANA,GAAM,GAAW,CAAE,CAAvB;AACAhB,EAAEiB,IAAF,CAAO,KAAP,EAAcD,GAAd;AACAN,QAAQC,GAAR,CAAY,OAAZ;AACAX,EAAEkB,IAAF,CAAO,OAAP,EAAgB,GAAhB,EAAqB,GAArB;AACA,IAAIC,IAAI,IAAIpB,OAAOE,YAAX,EAAR;AACAkB,EAAEC,eAAF,CAAkB,CAAlB;AACAvB,OAAOwB,SAAP,CAAiB,CAAC,OAAD,EAAU,KAAV,CAAjB,EAAmCnB,0BAAnC;AACAL,OAAOwB,SAAP,CAAiB,CAACR,KAAD,EAAQG,GAAR,CAAjB,EAA+Bb,6BAA/B;AACAN,OAAOQ,KAAP,CAAa,CAAb,EAAgBD,kBAAhB","file":"add-listeners.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar events = require('../events');\nvar e = new events.EventEmitter();\nvar events_new_listener_emited = [];\nvar listeners_new_listener_emited = [];\nvar times_hello_emited = 0;\nassert.equal(e.addListener, e.on);\ne.on('newListener', function(event, listener) {\n  console.log('newListener: ' + event);\n  events_new_listener_emited.push(event);\n  listeners_new_listener_emited.push(listener);\n});\nfunction hello(a, b) {\n  console.log('hello');\n  times_hello_emited += 1;\n  assert.equal('a', a);\n  assert.equal('b', b);\n}\ne.on('hello', hello);\nvar foo = function() {};\ne.once('foo', foo);\nconsole.log('start');\ne.emit('hello', 'a', 'b');\nvar f = new events.EventEmitter();\nf.setMaxListeners(0);\nassert.deepEqual(['hello', 'foo'], events_new_listener_emited);\nassert.deepEqual([hello, foo], listeners_new_listener_emited);\nassert.equal(1, times_hello_emited);\n"]}