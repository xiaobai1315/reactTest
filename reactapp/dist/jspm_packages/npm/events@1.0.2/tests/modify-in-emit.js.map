{"version":3,"sources":["../../../../../jspm_packages/npm/events@1.0.2/tests/modify-in-emit.js"],"names":["assert","require","events","callbacks_called","e","EventEmitter","callback1","push","on","callback2","callback3","removeListener","equal","listeners","length","emit","deepEqual","removeAllListeners"],"mappings":";;AAAA;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,WAAR,CAAb;AACA,IAAIE,mBAAmB,EAAvB;AACA,IAAIC,IAAI,IAAIF,OAAOG,YAAX,EAAR;AACA,SAASC,SAAT,GAAqB;AACnBH,mBAAiBI,IAAjB,CAAsB,WAAtB;AACAH,IAAEI,EAAF,CAAK,KAAL,EAAYC,SAAZ;AACAL,IAAEI,EAAF,CAAK,KAAL,EAAYE,SAAZ;AACAN,IAAEO,cAAF,CAAiB,KAAjB,EAAwBL,SAAxB;AACD;AACD,SAASG,SAAT,GAAqB;AACnBN,mBAAiBI,IAAjB,CAAsB,WAAtB;AACAH,IAAEO,cAAF,CAAiB,KAAjB,EAAwBF,SAAxB;AACD;AACD,SAASC,SAAT,GAAqB;AACnBP,mBAAiBI,IAAjB,CAAsB,WAAtB;AACAH,IAAEO,cAAF,CAAiB,KAAjB,EAAwBD,SAAxB;AACD;AACDN,EAAEI,EAAF,CAAK,KAAL,EAAYF,SAAZ;AACAN,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAV,EAAEW,IAAF,CAAO,KAAP;AACAf,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAd,OAAOgB,SAAP,CAAiB,CAAC,WAAD,CAAjB,EAAgCb,gBAAhC;AACAC,EAAEW,IAAF,CAAO,KAAP;AACAf,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAd,OAAOgB,SAAP,CAAiB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAAjB,EAA0Db,gBAA1D;AACAC,EAAEW,IAAF,CAAO,KAAP;AACAf,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAd,OAAOgB,SAAP,CAAiB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAAjB,EAA0Db,gBAA1D;AACAC,EAAEI,EAAF,CAAK,KAAL,EAAYF,SAAZ;AACAF,EAAEI,EAAF,CAAK,KAAL,EAAYC,SAAZ;AACAT,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAV,EAAEa,kBAAF,CAAqB,KAArB;AACAjB,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAX,mBAAmB,EAAnB;AACAC,EAAEI,EAAF,CAAK,KAAL,EAAYC,SAAZ;AACAL,EAAEI,EAAF,CAAK,KAAL,EAAYE,SAAZ;AACAV,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC;AACAV,EAAEW,IAAF,CAAO,KAAP;AACAf,OAAOgB,SAAP,CAAiB,CAAC,WAAD,EAAc,WAAd,CAAjB,EAA6Cb,gBAA7C;AACAH,OAAOY,KAAP,CAAa,CAAb,EAAgBR,EAAES,SAAF,CAAY,KAAZ,EAAmBC,MAAnC","file":"modify-in-emit.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar events = require('../events');\nvar callbacks_called = [];\nvar e = new events.EventEmitter();\nfunction callback1() {\n  callbacks_called.push('callback1');\n  e.on('foo', callback2);\n  e.on('foo', callback3);\n  e.removeListener('foo', callback1);\n}\nfunction callback2() {\n  callbacks_called.push('callback2');\n  e.removeListener('foo', callback2);\n}\nfunction callback3() {\n  callbacks_called.push('callback3');\n  e.removeListener('foo', callback3);\n}\ne.on('foo', callback1);\nassert.equal(1, e.listeners('foo').length);\ne.emit('foo');\nassert.equal(2, e.listeners('foo').length);\nassert.deepEqual(['callback1'], callbacks_called);\ne.emit('foo');\nassert.equal(0, e.listeners('foo').length);\nassert.deepEqual(['callback1', 'callback2', 'callback3'], callbacks_called);\ne.emit('foo');\nassert.equal(0, e.listeners('foo').length);\nassert.deepEqual(['callback1', 'callback2', 'callback3'], callbacks_called);\ne.on('foo', callback1);\ne.on('foo', callback2);\nassert.equal(2, e.listeners('foo').length);\ne.removeAllListeners('foo');\nassert.equal(0, e.listeners('foo').length);\ncallbacks_called = [];\ne.on('foo', callback2);\ne.on('foo', callback3);\nassert.equal(2, e.listeners('foo').length);\ne.emit('foo');\nassert.deepEqual(['callback2', 'callback3'], callbacks_called);\nassert.equal(0, e.listeners('foo').length);\n"]}