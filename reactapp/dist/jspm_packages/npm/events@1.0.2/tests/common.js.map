{"version":3,"sources":["../../../../../jspm_packages/npm/events@1.0.2/tests/common.js"],"names":["assert","require","mustCallChecks","runCallChecks","failed_count","i","length","context","actual","expected","console","log","name","stack","split","slice","join","after","exports","mustCall","fn","Error","push","apply","arguments"],"mappings":";;AAAA;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,iBAAiB,EAArB;AACA,SAASC,aAAT,GAAyB;AACvB,MAAIC,eAAe,CAAnB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,eAAeI,MAAnC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,QAAIE,UAAUL,eAAeG,CAAf,CAAd;AACA,QAAIE,QAAQC,MAAR,KAAmBD,QAAQE,QAA/B,EAAyC;AACvC;AACD;AACDL;AACAM,YAAQC,GAAR,CAAY,uDAAZ,EAAqEJ,QAAQK,IAA7E,EAAmFL,QAAQE,QAA3F,EAAqGF,QAAQC,MAA7G;AACAE,YAAQC,GAAR,CAAYJ,QAAQM,KAAR,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,KAA1B,CAAgC,CAAhC,EAAmCC,IAAnC,CAAwC,IAAxC,CAAZ;AACD;AACDhB,SAAOI,iBAAiB,CAAxB;AACD;AACDa,MAAMd,aAAN;AACAe,QAAQC,QAAR,GAAmB,UAASC,EAAT,EAAaX,QAAb,EAAuB;AACxC,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EACEA,WAAW,CAAX;AACF,MAAIF,UAAU;AACZE,cAAUA,QADE;AAEZD,YAAQ,CAFI;AAGZK,WAAQ,IAAIQ,KAAJ,EAAD,CAAYR,KAHP;AAIZD,UAAMQ,GAAGR,IAAH,IAAW;AAJL,GAAd;AAMAV,iBAAeoB,IAAf,CAAoBf,OAApB;AACA,SAAO,YAAW;AAChBA,YAAQC,MAAR;AACA,WAAOY,GAAGG,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACD,GAHD;AAID,CAdD","file":"common.js","sourcesContent":["/* */ \nvar assert = require('assert');\nvar mustCallChecks = [];\nfunction runCallChecks() {\n  var failed_count = 0;\n  for (var i = 0; i < mustCallChecks.length; ++i) {\n    var context = mustCallChecks[i];\n    if (context.actual === context.expected) {\n      continue;\n    }\n    failed_count++;\n    console.log('Mismatched %s function calls. Expected %d, actual %d.', context.name, context.expected, context.actual);\n    console.log(context.stack.split('\\n').slice(2).join('\\n'));\n  }\n  assert(failed_count === 0);\n}\nafter(runCallChecks);\nexports.mustCall = function(fn, expected) {\n  if (typeof expected !== 'number')\n    expected = 1;\n  var context = {\n    expected: expected,\n    actual: 0,\n    stack: (new Error).stack,\n    name: fn.name || '<anonymous>'\n  };\n  mustCallChecks.push(context);\n  return function() {\n    context.actual++;\n    return fn.apply(this, arguments);\n  };\n};\n"]}